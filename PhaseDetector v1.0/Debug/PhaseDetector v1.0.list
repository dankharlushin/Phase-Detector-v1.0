
PhaseDetector v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005af4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005c7c  08005c7c  00015c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c94  08005c94  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  08005c94  08005c94  00015c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c9c  08005c9c  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c9c  08005c9c  00015c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ca0  08005ca0  00015ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08005ca4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  20000184  08005e28  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  08005e28  000204bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013bf7  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000264b  00000000  00000000  00033dab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fe8  00000000  00000000  000363f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ee0  00000000  00000000  000373e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020d54  00000000  00000000  000382c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c047  00000000  00000000  00059014  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c409e  00000000  00000000  0006505b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001290f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004308  00000000  00000000  00129174  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000184 	.word	0x20000184
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005c64 	.word	0x08005c64

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000188 	.word	0x20000188
 80001c4:	08005c64 	.word	0x08005c64

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f001 fa72 	bl	80019b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f814 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 fa38 	bl	8000948 <MX_GPIO_Init>
  MX_SPI3_Init();
 80004d8:	f000 f87a 	bl	80005d0 <MX_SPI3_Init>
  MX_TIM9_Init();
 80004dc:	f000 f996 	bl	800080c <MX_TIM9_Init>
  MX_TIM12_Init();
 80004e0:	f000 f9ce 	bl	8000880 <MX_TIM12_Init>
  MX_TIM2_Init();
 80004e4:	f000 f8aa 	bl	800063c <MX_TIM2_Init>
  MX_TIM3_Init();
 80004e8:	f000 f8f4 	bl	80006d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80004ec:	f000 f940 	bl	8000770 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80004f0:	f000 fa00 	bl	80008f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  GPIO_Init();
 80004f4:	f000 fac0 	bl	8000a78 <GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <main+0x30>
	...

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b094      	sub	sp, #80	; 0x50
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0320 	add.w	r3, r7, #32
 8000506:	2230      	movs	r2, #48	; 0x30
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f005 fba2 	bl	8005c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	f107 030c 	add.w	r3, r7, #12
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000520:	2300      	movs	r3, #0
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	4b28      	ldr	r3, [pc, #160]	; (80005c8 <SystemClock_Config+0xcc>)
 8000526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000528:	4a27      	ldr	r2, [pc, #156]	; (80005c8 <SystemClock_Config+0xcc>)
 800052a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052e:	6413      	str	r3, [r2, #64]	; 0x40
 8000530:	4b25      	ldr	r3, [pc, #148]	; (80005c8 <SystemClock_Config+0xcc>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800053c:	2300      	movs	r3, #0
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	4b22      	ldr	r3, [pc, #136]	; (80005cc <SystemClock_Config+0xd0>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a21      	ldr	r2, [pc, #132]	; (80005cc <SystemClock_Config+0xd0>)
 8000546:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054a:	6013      	str	r3, [r2, #0]
 800054c:	4b1f      	ldr	r3, [pc, #124]	; (80005cc <SystemClock_Config+0xd0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000558:	2301      	movs	r3, #1
 800055a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800055c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000560:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000562:	2302      	movs	r3, #2
 8000564:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000566:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800056a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800056c:	2304      	movs	r3, #4
 800056e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000570:	23a8      	movs	r3, #168	; 0xa8
 8000572:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000574:	2302      	movs	r3, #2
 8000576:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000578:	2304      	movs	r3, #4
 800057a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057c:	f107 0320 	add.w	r3, r7, #32
 8000580:	4618      	mov	r0, r3
 8000582:	f001 fe61 	bl	8002248 <HAL_RCC_OscConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800058c:	f000 fb9e 	bl	8000ccc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000590:	230f      	movs	r3, #15
 8000592:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000594:	2302      	movs	r3, #2
 8000596:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800059c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2105      	movs	r1, #5
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 f8ba 	bl	8002728 <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005ba:	f000 fb87 	bl	8000ccc <Error_Handler>
  }
}
 80005be:	bf00      	nop
 80005c0:	3750      	adds	r7, #80	; 0x50
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40023800 	.word	0x40023800
 80005cc:	40007000 	.word	0x40007000

080005d0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80005d4:	4b17      	ldr	r3, [pc, #92]	; (8000634 <MX_SPI3_Init+0x64>)
 80005d6:	4a18      	ldr	r2, [pc, #96]	; (8000638 <MX_SPI3_Init+0x68>)
 80005d8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80005da:	4b16      	ldr	r3, [pc, #88]	; (8000634 <MX_SPI3_Init+0x64>)
 80005dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005e0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <MX_SPI3_Init+0x64>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <MX_SPI3_Init+0x64>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <MX_SPI3_Init+0x64>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <MX_SPI3_Init+0x64>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <MX_SPI3_Init+0x64>)
 80005fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000600:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <MX_SPI3_Init+0x64>)
 8000604:	2200      	movs	r2, #0
 8000606:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <MX_SPI3_Init+0x64>)
 800060a:	2200      	movs	r2, #0
 800060c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <MX_SPI3_Init+0x64>)
 8000610:	2200      	movs	r2, #0
 8000612:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <MX_SPI3_Init+0x64>)
 8000616:	2200      	movs	r2, #0
 8000618:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <MX_SPI3_Init+0x64>)
 800061c:	220a      	movs	r2, #10
 800061e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000620:	4804      	ldr	r0, [pc, #16]	; (8000634 <MX_SPI3_Init+0x64>)
 8000622:	f002 fa73 	bl	8002b0c <HAL_SPI_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800062c:	f000 fb4e 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000358 	.word	0x20000358
 8000638:	40003c00 	.word	0x40003c00

0800063c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000642:	f107 0308 	add.w	r3, r7, #8
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000650:	463b      	mov	r3, r7
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000658:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <MX_TIM2_Init+0x94>)
 800065a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800065e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000660:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <MX_TIM2_Init+0x94>)
 8000662:	2201      	movs	r2, #1
 8000664:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000666:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <MX_TIM2_Init+0x94>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800066c:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <MX_TIM2_Init+0x94>)
 800066e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000672:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000674:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <MX_TIM2_Init+0x94>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800067a:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <MX_TIM2_Init+0x94>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000680:	4813      	ldr	r0, [pc, #76]	; (80006d0 <MX_TIM2_Init+0x94>)
 8000682:	f002 ff97 	bl	80035b4 <HAL_TIM_Base_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800068c:	f000 fb1e 	bl	8000ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000694:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000696:	f107 0308 	add.w	r3, r7, #8
 800069a:	4619      	mov	r1, r3
 800069c:	480c      	ldr	r0, [pc, #48]	; (80006d0 <MX_TIM2_Init+0x94>)
 800069e:	f003 f90b 	bl	80038b8 <HAL_TIM_ConfigClockSource>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80006a8:	f000 fb10 	bl	8000ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ac:	2300      	movs	r3, #0
 80006ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006b4:	463b      	mov	r3, r7
 80006b6:	4619      	mov	r1, r3
 80006b8:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_TIM2_Init+0x94>)
 80006ba:	f003 fb21 	bl	8003d00 <HAL_TIMEx_MasterConfigSynchronization>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80006c4:	f000 fb02 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006c8:	bf00      	nop
 80006ca:	3718      	adds	r7, #24
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000434 	.word	0x20000434

080006d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006da:	f107 0308 	add.w	r3, r7, #8
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e8:	463b      	mov	r3, r7
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006f0:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <MX_TIM3_Init+0x94>)
 80006f2:	4a1e      	ldr	r2, [pc, #120]	; (800076c <MX_TIM3_Init+0x98>)
 80006f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80006f6:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <MX_TIM3_Init+0x94>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fc:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <MX_TIM3_Init+0x94>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000702:	4b19      	ldr	r3, [pc, #100]	; (8000768 <MX_TIM3_Init+0x94>)
 8000704:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000708:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800070a:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_TIM3_Init+0x94>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000710:	4b15      	ldr	r3, [pc, #84]	; (8000768 <MX_TIM3_Init+0x94>)
 8000712:	2200      	movs	r2, #0
 8000714:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000716:	4814      	ldr	r0, [pc, #80]	; (8000768 <MX_TIM3_Init+0x94>)
 8000718:	f002 ff4c 	bl	80035b4 <HAL_TIM_Base_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000722:	f000 fad3 	bl	8000ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800072c:	f107 0308 	add.w	r3, r7, #8
 8000730:	4619      	mov	r1, r3
 8000732:	480d      	ldr	r0, [pc, #52]	; (8000768 <MX_TIM3_Init+0x94>)
 8000734:	f003 f8c0 	bl	80038b8 <HAL_TIM_ConfigClockSource>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800073e:	f000 fac5 	bl	8000ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	4619      	mov	r1, r3
 800074e:	4806      	ldr	r0, [pc, #24]	; (8000768 <MX_TIM3_Init+0x94>)
 8000750:	f003 fad6 	bl	8003d00 <HAL_TIMEx_MasterConfigSynchronization>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800075a:	f000 fab7 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	3718      	adds	r7, #24
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000318 	.word	0x20000318
 800076c:	40000400 	.word	0x40000400

08000770 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000776:	f107 0308 	add.w	r3, r7, #8
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000784:	463b      	mov	r3, r7
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800078c:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <MX_TIM4_Init+0x94>)
 800078e:	4a1e      	ldr	r2, [pc, #120]	; (8000808 <MX_TIM4_Init+0x98>)
 8000790:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <MX_TIM4_Init+0x94>)
 8000794:	2201      	movs	r2, #1
 8000796:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000798:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_TIM4_Init+0x94>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <MX_TIM4_Init+0x94>)
 80007a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007a4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a6:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_TIM4_Init+0x94>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ac:	4b15      	ldr	r3, [pc, #84]	; (8000804 <MX_TIM4_Init+0x94>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80007b2:	4814      	ldr	r0, [pc, #80]	; (8000804 <MX_TIM4_Init+0x94>)
 80007b4:	f002 fefe 	bl	80035b4 <HAL_TIM_Base_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80007be:	f000 fa85 	bl	8000ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	4619      	mov	r1, r3
 80007ce:	480d      	ldr	r0, [pc, #52]	; (8000804 <MX_TIM4_Init+0x94>)
 80007d0:	f003 f872 	bl	80038b8 <HAL_TIM_ConfigClockSource>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80007da:	f000 fa77 	bl	8000ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007de:	2300      	movs	r3, #0
 80007e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007e6:	463b      	mov	r3, r7
 80007e8:	4619      	mov	r1, r3
 80007ea:	4806      	ldr	r0, [pc, #24]	; (8000804 <MX_TIM4_Init+0x94>)
 80007ec:	f003 fa88 	bl	8003d00 <HAL_TIMEx_MasterConfigSynchronization>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80007f6:	f000 fa69 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200002d0 	.word	0x200002d0
 8000808:	40000800 	.word	0x40000800

0800080c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000812:	463b      	mov	r3, r7
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800081e:	4b16      	ldr	r3, [pc, #88]	; (8000878 <MX_TIM9_Init+0x6c>)
 8000820:	4a16      	ldr	r2, [pc, #88]	; (800087c <MX_TIM9_Init+0x70>)
 8000822:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_TIM9_Init+0x6c>)
 8000826:	2200      	movs	r2, #0
 8000828:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082a:	4b13      	ldr	r3, [pc, #76]	; (8000878 <MX_TIM9_Init+0x6c>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_TIM9_Init+0x6c>)
 8000832:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000836:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_TIM9_Init+0x6c>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_TIM9_Init+0x6c>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000844:	480c      	ldr	r0, [pc, #48]	; (8000878 <MX_TIM9_Init+0x6c>)
 8000846:	f002 feb5 	bl	80035b4 <HAL_TIM_Base_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8000850:	f000 fa3c 	bl	8000ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000858:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800085a:	463b      	mov	r3, r7
 800085c:	4619      	mov	r1, r3
 800085e:	4806      	ldr	r0, [pc, #24]	; (8000878 <MX_TIM9_Init+0x6c>)
 8000860:	f003 f82a 	bl	80038b8 <HAL_TIM_ConfigClockSource>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 800086a:	f000 fa2f 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200003f4 	.word	0x200003f4
 800087c:	40014000 	.word	0x40014000

08000880 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000886:	463b      	mov	r3, r7
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000892:	4b16      	ldr	r3, [pc, #88]	; (80008ec <MX_TIM12_Init+0x6c>)
 8000894:	4a16      	ldr	r2, [pc, #88]	; (80008f0 <MX_TIM12_Init+0x70>)
 8000896:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1;
 8000898:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_TIM12_Init+0x6c>)
 800089a:	2201      	movs	r2, #1
 800089c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089e:	4b13      	ldr	r3, [pc, #76]	; (80008ec <MX_TIM12_Init+0x6c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_TIM12_Init+0x6c>)
 80008a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008aa:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_TIM12_Init+0x6c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_TIM12_Init+0x6c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80008b8:	480c      	ldr	r0, [pc, #48]	; (80008ec <MX_TIM12_Init+0x6c>)
 80008ba:	f002 fe7b 	bl	80035b4 <HAL_TIM_Base_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 80008c4:	f000 fa02 	bl	8000ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008cc:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80008ce:	463b      	mov	r3, r7
 80008d0:	4619      	mov	r1, r3
 80008d2:	4806      	ldr	r0, [pc, #24]	; (80008ec <MX_TIM12_Init+0x6c>)
 80008d4:	f002 fff0 	bl	80038b8 <HAL_TIM_ConfigClockSource>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 80008de:	f000 f9f5 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000478 	.word	0x20000478
 80008f0:	40001800 	.word	0x40001800

080008f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_USART1_UART_Init+0x4c>)
 80008fa:	4a12      	ldr	r2, [pc, #72]	; (8000944 <MX_USART1_UART_Init+0x50>)
 80008fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <MX_USART1_UART_Init+0x4c>)
 8000900:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000904:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_USART1_UART_Init+0x4c>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_USART1_UART_Init+0x4c>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_USART1_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_USART1_UART_Init+0x4c>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_USART1_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_USART1_UART_Init+0x4c>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_USART1_UART_Init+0x4c>)
 800092c:	f003 fa78 	bl	8003e20 <HAL_UART_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000936:	f000 f9c9 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200003b4 	.word	0x200003b4
 8000944:	40011000 	.word	0x40011000

08000948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08a      	sub	sp, #40	; 0x28
 800094c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
 800095c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
 8000962:	4b41      	ldr	r3, [pc, #260]	; (8000a68 <MX_GPIO_Init+0x120>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a40      	ldr	r2, [pc, #256]	; (8000a68 <MX_GPIO_Init+0x120>)
 8000968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b3e      	ldr	r3, [pc, #248]	; (8000a68 <MX_GPIO_Init+0x120>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	4b3a      	ldr	r3, [pc, #232]	; (8000a68 <MX_GPIO_Init+0x120>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a39      	ldr	r2, [pc, #228]	; (8000a68 <MX_GPIO_Init+0x120>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b37      	ldr	r3, [pc, #220]	; (8000a68 <MX_GPIO_Init+0x120>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	4b33      	ldr	r3, [pc, #204]	; (8000a68 <MX_GPIO_Init+0x120>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a32      	ldr	r2, [pc, #200]	; (8000a68 <MX_GPIO_Init+0x120>)
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b30      	ldr	r3, [pc, #192]	; (8000a68 <MX_GPIO_Init+0x120>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0304 	and.w	r3, r3, #4
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	4b2c      	ldr	r3, [pc, #176]	; (8000a68 <MX_GPIO_Init+0x120>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a2b      	ldr	r2, [pc, #172]	; (8000a68 <MX_GPIO_Init+0x120>)
 80009bc:	f043 0308 	orr.w	r3, r3, #8
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b29      	ldr	r3, [pc, #164]	; (8000a68 <MX_GPIO_Init+0x120>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0308 	and.w	r3, r3, #8
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	603b      	str	r3, [r7, #0]
 80009d2:	4b25      	ldr	r3, [pc, #148]	; (8000a68 <MX_GPIO_Init+0x120>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a24      	ldr	r2, [pc, #144]	; (8000a68 <MX_GPIO_Init+0x120>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b22      	ldr	r3, [pc, #136]	; (8000a68 <MX_GPIO_Init+0x120>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80009ea:	2201      	movs	r2, #1
 80009ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009f0:	481e      	ldr	r0, [pc, #120]	; (8000a6c <MX_GPIO_Init+0x124>)
 80009f2:	f001 fbf7 	bl	80021e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, GPIO_PIN_SET);
 80009f6:	2201      	movs	r2, #1
 80009f8:	2104      	movs	r1, #4
 80009fa:	481d      	ldr	r0, [pc, #116]	; (8000a70 <MX_GPIO_Init+0x128>)
 80009fc:	f001 fbf2 	bl	80021e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	2108      	movs	r1, #8
 8000a04:	481b      	ldr	r0, [pc, #108]	; (8000a74 <MX_GPIO_Init+0x12c>)
 8000a06:	f001 fbed 	bl	80021e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8000a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	4812      	ldr	r0, [pc, #72]	; (8000a6c <MX_GPIO_Init+0x124>)
 8000a24:	f001 f94a 	bl	8001cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_RST_Pin */
  GPIO_InitStruct.Pin = W5500_RST_Pin;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a34:	2302      	movs	r3, #2
 8000a36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(W5500_RST_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	480c      	ldr	r0, [pc, #48]	; (8000a70 <MX_GPIO_Init+0x128>)
 8000a40:	f001 f93c 	bl	8001cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a44:	2308      	movs	r3, #8
 8000a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a50:	2302      	movs	r3, #2
 8000a52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4806      	ldr	r0, [pc, #24]	; (8000a74 <MX_GPIO_Init+0x12c>)
 8000a5c:	f001 f92e 	bl	8001cbc <HAL_GPIO_Init>

}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	; 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020000 	.word	0x40020000
 8000a70:	40020c00 	.word	0x40020c00
 8000a74:	40020400 	.word	0x40020400

08000a78 <GPIO_Init>:

/* USER CODE BEGIN 4 */

static void GPIO_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b8c      	ldr	r3, [pc, #560]	; (8000cb4 <GPIO_Init+0x23c>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a8b      	ldr	r2, [pc, #556]	; (8000cb4 <GPIO_Init+0x23c>)
 8000a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b89      	ldr	r3, [pc, #548]	; (8000cb4 <GPIO_Init+0x23c>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	4b85      	ldr	r3, [pc, #532]	; (8000cb4 <GPIO_Init+0x23c>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a84      	ldr	r2, [pc, #528]	; (8000cb4 <GPIO_Init+0x23c>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b82      	ldr	r3, [pc, #520]	; (8000cb4 <GPIO_Init+0x23c>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	4b7e      	ldr	r3, [pc, #504]	; (8000cb4 <GPIO_Init+0x23c>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a7d      	ldr	r2, [pc, #500]	; (8000cb4 <GPIO_Init+0x23c>)
 8000ac0:	f043 0302 	orr.w	r3, r3, #2
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b7b      	ldr	r3, [pc, #492]	; (8000cb4 <GPIO_Init+0x23c>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	4b77      	ldr	r3, [pc, #476]	; (8000cb4 <GPIO_Init+0x23c>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a76      	ldr	r2, [pc, #472]	; (8000cb4 <GPIO_Init+0x23c>)
 8000adc:	f043 0304 	orr.w	r3, r3, #4
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b74      	ldr	r3, [pc, #464]	; (8000cb4 <GPIO_Init+0x23c>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0304 	and.w	r3, r3, #4
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	4b70      	ldr	r3, [pc, #448]	; (8000cb4 <GPIO_Init+0x23c>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a6f      	ldr	r2, [pc, #444]	; (8000cb4 <GPIO_Init+0x23c>)
 8000af8:	f043 0308 	orr.w	r3, r3, #8
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b6d      	ldr	r3, [pc, #436]	; (8000cb4 <GPIO_Init+0x23c>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0308 	and.w	r3, r3, #8
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2006      	movs	r0, #6
 8000b10:	f001 f89d 	bl	8001c4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b14:	2006      	movs	r0, #6
 8000b16:	f001 f8b6 	bl	8001c86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2007      	movs	r0, #7
 8000b20:	f001 f895 	bl	8001c4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b24:	2007      	movs	r0, #7
 8000b26:	f001 f8ae 	bl	8001c86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2008      	movs	r0, #8
 8000b30:	f001 f88d 	bl	8001c4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000b34:	2008      	movs	r0, #8
 8000b36:	f001 f8a6 	bl	8001c86 <HAL_NVIC_EnableIRQ>

   HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2009      	movs	r0, #9
 8000b40:	f001 f885 	bl	8001c4e <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000b44:	2009      	movs	r0, #9
 8000b46:	f001 f89e 	bl	8001c86 <HAL_NVIC_EnableIRQ>

   for( int8_t i = 0; i < MIXER_PIN_COUNT; i++)	 GPIO_PIN_INIT(Bus_Mixer + i);
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	75fb      	strb	r3, [r7, #23]
 8000b4e:	e033      	b.n	8000bb8 <GPIO_Init+0x140>
 8000b50:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8000b54:	4613      	mov	r3, r2
 8000b56:	00db      	lsls	r3, r3, #3
 8000b58:	1a9b      	subs	r3, r3, r2
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b56      	ldr	r3, [pc, #344]	; (8000cb8 <GPIO_Init+0x240>)
 8000b60:	4413      	add	r3, r2
 8000b62:	6818      	ldr	r0, [r3, #0]
 8000b64:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	00db      	lsls	r3, r3, #3
 8000b6c:	1a9b      	subs	r3, r3, r2
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b51      	ldr	r3, [pc, #324]	; (8000cb8 <GPIO_Init+0x240>)
 8000b74:	4413      	add	r3, r2
 8000b76:	889b      	ldrh	r3, [r3, #4]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f001 fa39 	bl	8001ff0 <HAL_GPIO_DeInit>
 8000b7e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8000b82:	4613      	mov	r3, r2
 8000b84:	00db      	lsls	r3, r3, #3
 8000b86:	1a9b      	subs	r3, r3, r2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	4b4a      	ldr	r3, [pc, #296]	; (8000cb8 <GPIO_Init+0x240>)
 8000b8e:	4413      	add	r3, r2
 8000b90:	6818      	ldr	r0, [r3, #0]
 8000b92:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8000b96:	4613      	mov	r3, r2
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	1a9b      	subs	r3, r3, r2
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	4b45      	ldr	r3, [pc, #276]	; (8000cb8 <GPIO_Init+0x240>)
 8000ba2:	4413      	add	r3, r2
 8000ba4:	3308      	adds	r3, #8
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	f001 f888 	bl	8001cbc <HAL_GPIO_Init>
 8000bac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	75fb      	strb	r3, [r7, #23]
 8000bb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000bbc:	2b07      	cmp	r3, #7
 8000bbe:	ddc7      	ble.n	8000b50 <GPIO_Init+0xd8>
   for( int8_t i = 0; i < WIZNET_PIN_COUNT; i++) GPIO_PIN_INIT(Bus_WizNet_SPI + i);
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	75bb      	strb	r3, [r7, #22]
 8000bc4:	e033      	b.n	8000c2e <GPIO_Init+0x1b6>
 8000bc6:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	1a9b      	subs	r3, r3, r2
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	4b39      	ldr	r3, [pc, #228]	; (8000cbc <GPIO_Init+0x244>)
 8000bd6:	4413      	add	r3, r2
 8000bd8:	6818      	ldr	r0, [r3, #0]
 8000bda:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8000bde:	4613      	mov	r3, r2
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	1a9b      	subs	r3, r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	461a      	mov	r2, r3
 8000be8:	4b34      	ldr	r3, [pc, #208]	; (8000cbc <GPIO_Init+0x244>)
 8000bea:	4413      	add	r3, r2
 8000bec:	889b      	ldrh	r3, [r3, #4]
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f001 f9fe 	bl	8001ff0 <HAL_GPIO_DeInit>
 8000bf4:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	00db      	lsls	r3, r3, #3
 8000bfc:	1a9b      	subs	r3, r3, r2
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b2e      	ldr	r3, [pc, #184]	; (8000cbc <GPIO_Init+0x244>)
 8000c04:	4413      	add	r3, r2
 8000c06:	6818      	ldr	r0, [r3, #0]
 8000c08:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	1a9b      	subs	r3, r3, r2
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b29      	ldr	r3, [pc, #164]	; (8000cbc <GPIO_Init+0x244>)
 8000c18:	4413      	add	r3, r2
 8000c1a:	3308      	adds	r3, #8
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f001 f84d 	bl	8001cbc <HAL_GPIO_Init>
 8000c22:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	3301      	adds	r3, #1
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	75bb      	strb	r3, [r7, #22]
 8000c2e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	ddc7      	ble.n	8000bc6 <GPIO_Init+0x14e>
   GPIO_PIN_SET(Bus_Mixer + PRUPX);
 8000c36:	4b20      	ldr	r3, [pc, #128]	; (8000cb8 <GPIO_Init+0x240>)
 8000c38:	6818      	ldr	r0, [r3, #0]
 8000c3a:	4b1f      	ldr	r3, [pc, #124]	; (8000cb8 <GPIO_Init+0x240>)
 8000c3c:	8899      	ldrh	r1, [r3, #4]
 8000c3e:	4b1e      	ldr	r3, [pc, #120]	; (8000cb8 <GPIO_Init+0x240>)
 8000c40:	799b      	ldrb	r3, [r3, #6]
 8000c42:	f083 0301 	eor.w	r3, r3, #1
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	461a      	mov	r2, r3
 8000c4a:	f001 facb 	bl	80021e4 <HAL_GPIO_WritePin>
   GPIO_PIN_SET(Bus_Mixer + PRUPY);
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <GPIO_Init+0x240>)
 8000c50:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000c52:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <GPIO_Init+0x240>)
 8000c54:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <GPIO_Init+0x240>)
 8000c58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000c5c:	f083 0301 	eor.w	r3, r3, #1
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	461a      	mov	r2, r3
 8000c64:	f001 fabe 	bl	80021e4 <HAL_GPIO_WritePin>
   GPIO_PIN_SET(Bus_Mixer + PRUPZ);
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <GPIO_Init+0x240>)
 8000c6a:	69d8      	ldr	r0, [r3, #28]
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <GPIO_Init+0x240>)
 8000c6e:	8c19      	ldrh	r1, [r3, #32]
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <GPIO_Init+0x240>)
 8000c72:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000c76:	f083 0301 	eor.w	r3, r3, #1
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	f001 fab1 	bl	80021e4 <HAL_GPIO_WritePin>
   GPIO_PIN_SET(Bus_Mixer + PRUPA);
 8000c82:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <GPIO_Init+0x240>)
 8000c84:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8000c86:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <GPIO_Init+0x240>)
 8000c88:	f8b3 1058 	ldrh.w	r1, [r3, #88]	; 0x58
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <GPIO_Init+0x240>)
 8000c8e:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8000c92:	f083 0301 	eor.w	r3, r3, #1
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	461a      	mov	r2, r3
 8000c9a:	f001 faa3 	bl	80021e4 <HAL_GPIO_WritePin>
   WizchIP_main(&hspi3,SPI3_CS_GPIO_Port, SPI3_CS_Pin, &huart1);
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <GPIO_Init+0x248>)
 8000ca0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ca4:	4907      	ldr	r1, [pc, #28]	; (8000cc4 <GPIO_Init+0x24c>)
 8000ca6:	4808      	ldr	r0, [pc, #32]	; (8000cc8 <GPIO_Init+0x250>)
 8000ca8:	f000 fc78 	bl	800159c <WizchIP_main>
}
 8000cac:	bf00      	nop
 8000cae:	3718      	adds	r7, #24
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	20000054 	.word	0x20000054
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	200003b4 	.word	0x200003b4
 8000cc4:	40020000 	.word	0x40020000
 8000cc8:	20000358 	.word	0x20000358

08000ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <HAL_MspInit+0x4c>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	4a0f      	ldr	r2, [pc, #60]	; (8000d28 <HAL_MspInit+0x4c>)
 8000cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf2:	4b0d      	ldr	r3, [pc, #52]	; (8000d28 <HAL_MspInit+0x4c>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	603b      	str	r3, [r7, #0]
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <HAL_MspInit+0x4c>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	4a08      	ldr	r2, [pc, #32]	; (8000d28 <HAL_MspInit+0x4c>)
 8000d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_MspInit+0x4c>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	40023800 	.word	0x40023800

08000d2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	; 0x28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a19      	ldr	r2, [pc, #100]	; (8000db0 <HAL_SPI_MspInit+0x84>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d12c      	bne.n	8000da8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <HAL_SPI_MspInit+0x88>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	4a17      	ldr	r2, [pc, #92]	; (8000db4 <HAL_SPI_MspInit+0x88>)
 8000d58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <HAL_SPI_MspInit+0x88>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <HAL_SPI_MspInit+0x88>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a10      	ldr	r2, [pc, #64]	; (8000db4 <HAL_SPI_MspInit+0x88>)
 8000d74:	f043 0304 	orr.w	r3, r3, #4
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_SPI_MspInit+0x88>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0304 	and.w	r3, r3, #4
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000d86:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d94:	2303      	movs	r3, #3
 8000d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d98:	2306      	movs	r3, #6
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	4619      	mov	r1, r3
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <HAL_SPI_MspInit+0x8c>)
 8000da4:	f000 ff8a 	bl	8001cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000da8:	bf00      	nop
 8000daa:	3728      	adds	r7, #40	; 0x28
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40003c00 	.word	0x40003c00
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020800 	.word	0x40020800

08000dbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dcc:	d116      	bne.n	8000dfc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
 8000dd2:	4b44      	ldr	r3, [pc, #272]	; (8000ee4 <HAL_TIM_Base_MspInit+0x128>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	4a43      	ldr	r2, [pc, #268]	; (8000ee4 <HAL_TIM_Base_MspInit+0x128>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dde:	4b41      	ldr	r3, [pc, #260]	; (8000ee4 <HAL_TIM_Base_MspInit+0x128>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	61fb      	str	r3, [r7, #28]
 8000de8:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2100      	movs	r1, #0
 8000dee:	201c      	movs	r0, #28
 8000df0:	f000 ff2d 	bl	8001c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000df4:	201c      	movs	r0, #28
 8000df6:	f000 ff46 	bl	8001c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8000dfa:	e06e      	b.n	8000eda <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM3)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a39      	ldr	r2, [pc, #228]	; (8000ee8 <HAL_TIM_Base_MspInit+0x12c>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d116      	bne.n	8000e34 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	61bb      	str	r3, [r7, #24]
 8000e0a:	4b36      	ldr	r3, [pc, #216]	; (8000ee4 <HAL_TIM_Base_MspInit+0x128>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	4a35      	ldr	r2, [pc, #212]	; (8000ee4 <HAL_TIM_Base_MspInit+0x128>)
 8000e10:	f043 0302 	orr.w	r3, r3, #2
 8000e14:	6413      	str	r3, [r2, #64]	; 0x40
 8000e16:	4b33      	ldr	r3, [pc, #204]	; (8000ee4 <HAL_TIM_Base_MspInit+0x128>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	61bb      	str	r3, [r7, #24]
 8000e20:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2100      	movs	r1, #0
 8000e26:	201d      	movs	r0, #29
 8000e28:	f000 ff11 	bl	8001c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e2c:	201d      	movs	r0, #29
 8000e2e:	f000 ff2a 	bl	8001c86 <HAL_NVIC_EnableIRQ>
}
 8000e32:	e052      	b.n	8000eda <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a2c      	ldr	r2, [pc, #176]	; (8000eec <HAL_TIM_Base_MspInit+0x130>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d116      	bne.n	8000e6c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
 8000e42:	4b28      	ldr	r3, [pc, #160]	; (8000ee4 <HAL_TIM_Base_MspInit+0x128>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	4a27      	ldr	r2, [pc, #156]	; (8000ee4 <HAL_TIM_Base_MspInit+0x128>)
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4e:	4b25      	ldr	r3, [pc, #148]	; (8000ee4 <HAL_TIM_Base_MspInit+0x128>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	f003 0304 	and.w	r3, r3, #4
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	201e      	movs	r0, #30
 8000e60:	f000 fef5 	bl	8001c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000e64:	201e      	movs	r0, #30
 8000e66:	f000 ff0e 	bl	8001c86 <HAL_NVIC_EnableIRQ>
}
 8000e6a:	e036      	b.n	8000eda <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM9)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a1f      	ldr	r2, [pc, #124]	; (8000ef0 <HAL_TIM_Base_MspInit+0x134>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d116      	bne.n	8000ea4 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <HAL_TIM_Base_MspInit+0x128>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	4a19      	ldr	r2, [pc, #100]	; (8000ee4 <HAL_TIM_Base_MspInit+0x128>)
 8000e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e84:	6453      	str	r3, [r2, #68]	; 0x44
 8000e86:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <HAL_TIM_Base_MspInit+0x128>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2100      	movs	r1, #0
 8000e96:	2018      	movs	r0, #24
 8000e98:	f000 fed9 	bl	8001c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000e9c:	2018      	movs	r0, #24
 8000e9e:	f000 fef2 	bl	8001c86 <HAL_NVIC_EnableIRQ>
}
 8000ea2:	e01a      	b.n	8000eda <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM12)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <HAL_TIM_Base_MspInit+0x138>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d115      	bne.n	8000eda <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <HAL_TIM_Base_MspInit+0x128>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <HAL_TIM_Base_MspInit+0x128>)
 8000eb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <HAL_TIM_Base_MspInit+0x128>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	202b      	movs	r0, #43	; 0x2b
 8000ed0:	f000 febd 	bl	8001c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8000ed4:	202b      	movs	r0, #43	; 0x2b
 8000ed6:	f000 fed6 	bl	8001c86 <HAL_NVIC_EnableIRQ>
}
 8000eda:	bf00      	nop
 8000edc:	3720      	adds	r7, #32
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40000400 	.word	0x40000400
 8000eec:	40000800 	.word	0x40000800
 8000ef0:	40014000 	.word	0x40014000
 8000ef4:	40001800 	.word	0x40001800

08000ef8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a19      	ldr	r2, [pc, #100]	; (8000f7c <HAL_UART_MspInit+0x84>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d12b      	bne.n	8000f72 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <HAL_UART_MspInit+0x88>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	4a17      	ldr	r2, [pc, #92]	; (8000f80 <HAL_UART_MspInit+0x88>)
 8000f24:	f043 0310 	orr.w	r3, r3, #16
 8000f28:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <HAL_UART_MspInit+0x88>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	f003 0310 	and.w	r3, r3, #16
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <HAL_UART_MspInit+0x88>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a10      	ldr	r2, [pc, #64]	; (8000f80 <HAL_UART_MspInit+0x88>)
 8000f40:	f043 0302 	orr.w	r3, r3, #2
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <HAL_UART_MspInit+0x88>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f52:	23c0      	movs	r3, #192	; 0xc0
 8000f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f62:	2307      	movs	r3, #7
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4805      	ldr	r0, [pc, #20]	; (8000f84 <HAL_UART_MspInit+0x8c>)
 8000f6e:	f000 fea5 	bl	8001cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f72:	bf00      	nop
 8000f74:	3728      	adds	r7, #40	; 0x28
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40011000 	.word	0x40011000
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40020400 	.word	0x40020400

08000f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <HardFault_Handler+0x4>

08000f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <MemManage_Handler+0x4>

08000fa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <BusFault_Handler+0x4>

08000fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <UsageFault_Handler+0x4>

08000fae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fdc:	f000 fd3c 	bl	8001a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000fe8:	4806      	ldr	r0, [pc, #24]	; (8001004 <TIM1_BRK_TIM9_IRQHandler+0x20>)
 8000fea:	f002 fb5d 	bl	80036a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */
  Error = 0x01; //разница фаз не найдена
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <TIM1_BRK_TIM9_IRQHandler+0x24>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
  RefreshTIM(&htim9);
 8000ff4:	4803      	ldr	r0, [pc, #12]	; (8001004 <TIM1_BRK_TIM9_IRQHandler+0x20>)
 8000ff6:	f000 fa4f 	bl	8001498 <RefreshTIM>
  Count = 0;
 8000ffa:	4b04      	ldr	r3, [pc, #16]	; (800100c <TIM1_BRK_TIM9_IRQHandler+0x28>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
  //RefreshTIM(&htim12);
  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	200003f4 	.word	0x200003f4
 8001008:	200001a0 	.word	0x200001a0
 800100c:	200001a1 	.word	0x200001a1

08001010 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <TIM2_IRQHandler+0x10>)
 8001016:	f002 fb47 	bl	80036a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000434 	.word	0x20000434

08001024 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <TIM3_IRQHandler+0x10>)
 800102a:	f002 fb3d 	bl	80036a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000318 	.word	0x20000318

08001038 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <TIM4_IRQHandler+0x10>)
 800103e:	f002 fb33 	bl	80036a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200002d0 	.word	0x200002d0

0800104c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8001050:	4806      	ldr	r0, [pc, #24]	; (800106c <TIM8_BRK_TIM12_IRQHandler+0x20>)
 8001052:	f002 fb29 	bl	80036a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */
  Error = 0x02; //Период больше 1500мкс
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <TIM8_BRK_TIM12_IRQHandler+0x24>)
 8001058:	2202      	movs	r2, #2
 800105a:	701a      	strb	r2, [r3, #0]
  RefreshTIM(&htim12);
 800105c:	4803      	ldr	r0, [pc, #12]	; (800106c <TIM8_BRK_TIM12_IRQHandler+0x20>)
 800105e:	f000 fa1b 	bl	8001498 <RefreshTIM>
  Count = 0;
 8001062:	4b04      	ldr	r3, [pc, #16]	; (8001074 <TIM8_BRK_TIM12_IRQHandler+0x28>)
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000478 	.word	0x20000478
 8001070:	200001a0 	.word	0x200001a0
 8001074:	200001a1 	.word	0x200001a1

08001078 <EXTI0_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800107c:	2001      	movs	r0, #1
 800107e:	f001 f8cb 	bl	8002218 <HAL_GPIO_EXTI_IRQHandler>

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}

08001086 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800108a:	2002      	movs	r0, #2
 800108c:	f001 f8c4 	bl	8002218 <HAL_GPIO_EXTI_IRQHandler>

}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}

08001094 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001098:	2004      	movs	r0, #4
 800109a:	f001 f8bd 	bl	8002218 <HAL_GPIO_EXTI_IRQHandler>

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80010a6:	2008      	movs	r0, #8
 80010a8:	f001 f8b6 	bl	8002218 <HAL_GPIO_EXTI_IRQHandler>

}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	80fb      	strh	r3, [r7, #6]
	}*/

	//else {

	//if (count < 50000) {
		dPhase = 0;
 80010ba:	4b7c      	ldr	r3, [pc, #496]	; (80012ac <HAL_GPIO_EXTI_Callback+0x1fc>)
 80010bc:	2200      	movs	r2, #0
 80010be:	801a      	strh	r2, [r3, #0]
		switch (Count)
 80010c0:	4b7b      	ldr	r3, [pc, #492]	; (80012b0 <HAL_GPIO_EXTI_Callback+0x200>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d002      	beq.n	80010ce <HAL_GPIO_EXTI_Callback+0x1e>
 80010c8:	2b03      	cmp	r3, #3
 80010ca:	d00d      	beq.n	80010e8 <HAL_GPIO_EXTI_Callback+0x38>
 80010cc:	e01a      	b.n	8001104 <HAL_GPIO_EXTI_Callback+0x54>
		{
		case 0:
			RefreshTIM(&htim9);
 80010ce:	4879      	ldr	r0, [pc, #484]	; (80012b4 <HAL_GPIO_EXTI_Callback+0x204>)
 80010d0:	f000 f9e2 	bl	8001498 <RefreshTIM>
			HAL_TIM_Base_Start_IT(&htim9);
 80010d4:	4877      	ldr	r0, [pc, #476]	; (80012b4 <HAL_GPIO_EXTI_Callback+0x204>)
 80010d6:	f002 fa98 	bl	800360a <HAL_TIM_Base_Start_IT>
			Count++;
 80010da:	4b75      	ldr	r3, [pc, #468]	; (80012b0 <HAL_GPIO_EXTI_Callback+0x200>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	3301      	adds	r3, #1
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4b73      	ldr	r3, [pc, #460]	; (80012b0 <HAL_GPIO_EXTI_Callback+0x200>)
 80010e4:	701a      	strb	r2, [r3, #0]
			break;
 80010e6:	e019      	b.n	800111c <HAL_GPIO_EXTI_Callback+0x6c>

		case AXIS_COUNT-1:
		dPhase = TIM9 ->CNT;
 80010e8:	4b73      	ldr	r3, [pc, #460]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x208>)
 80010ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	4b6f      	ldr	r3, [pc, #444]	; (80012ac <HAL_GPIO_EXTI_Callback+0x1fc>)
 80010f0:	801a      	strh	r2, [r3, #0]
		RefreshTIM(&htim9);
 80010f2:	4870      	ldr	r0, [pc, #448]	; (80012b4 <HAL_GPIO_EXTI_Callback+0x204>)
 80010f4:	f000 f9d0 	bl	8001498 <RefreshTIM>
		Count = 0;
 80010f8:	4b6d      	ldr	r3, [pc, #436]	; (80012b0 <HAL_GPIO_EXTI_Callback+0x200>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
		PhaseRelativelyA();
 80010fe:	f000 f9e1 	bl	80014c4 <PhaseRelativelyA>
		break;
 8001102:	e00b      	b.n	800111c <HAL_GPIO_EXTI_Callback+0x6c>

		default:
			dPhase = TIM9 -> CNT;
 8001104:	4b6c      	ldr	r3, [pc, #432]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x208>)
 8001106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001108:	b29a      	uxth	r2, r3
 800110a:	4b68      	ldr	r3, [pc, #416]	; (80012ac <HAL_GPIO_EXTI_Callback+0x1fc>)
 800110c:	801a      	strh	r2, [r3, #0]
			Count++;
 800110e:	4b68      	ldr	r3, [pc, #416]	; (80012b0 <HAL_GPIO_EXTI_Callback+0x200>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	3301      	adds	r3, #1
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4b66      	ldr	r3, [pc, #408]	; (80012b0 <HAL_GPIO_EXTI_Callback+0x200>)
 8001118:	701a      	strb	r2, [r3, #0]
			break;
 800111a:	bf00      	nop
		}


		switch (GPIO_Pin)
 800111c:	88fb      	ldrh	r3, [r7, #6]
 800111e:	3b01      	subs	r3, #1
 8001120:	2b07      	cmp	r3, #7
 8001122:	f200 8193 	bhi.w	800144c <HAL_GPIO_EXTI_Callback+0x39c>
 8001126:	a201      	add	r2, pc, #4	; (adr r2, 800112c <HAL_GPIO_EXTI_Callback+0x7c>)
 8001128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800112c:	080011fb 	.word	0x080011fb
 8001130:	0800114d 	.word	0x0800114d
 8001134:	0800144d 	.word	0x0800144d
 8001138:	080012f1 	.word	0x080012f1
 800113c:	0800144d 	.word	0x0800144d
 8001140:	0800144d 	.word	0x0800144d
 8001144:	0800144d 	.word	0x0800144d
 8001148:	0800139f 	.word	0x0800139f
		{

		case GPIO_PIN_1:
			HAL_TIM_Base_Stop_IT(&htim12);
 800114c:	485b      	ldr	r0, [pc, #364]	; (80012bc <HAL_GPIO_EXTI_Callback+0x20c>)
 800114e:	f002 fa80 	bl	8003652 <HAL_TIM_Base_Stop_IT>
			Period = TIM12 ->CNT;
 8001152:	4b5b      	ldr	r3, [pc, #364]	; (80012c0 <HAL_GPIO_EXTI_Callback+0x210>)
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001156:	b29a      	uxth	r2, r3
 8001158:	4b5a      	ldr	r3, [pc, #360]	; (80012c4 <HAL_GPIO_EXTI_Callback+0x214>)
 800115a:	801a      	strh	r2, [r3, #0]
			PeriodAVG[iZ] = Period;
 800115c:	4b5a      	ldr	r3, [pc, #360]	; (80012c8 <HAL_GPIO_EXTI_Callback+0x218>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	4b58      	ldr	r3, [pc, #352]	; (80012c4 <HAL_GPIO_EXTI_Callback+0x214>)
 8001164:	8819      	ldrh	r1, [r3, #0]
 8001166:	4b59      	ldr	r3, [pc, #356]	; (80012cc <HAL_GPIO_EXTI_Callback+0x21c>)
 8001168:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			iZ++;
 800116c:	4b56      	ldr	r3, [pc, #344]	; (80012c8 <HAL_GPIO_EXTI_Callback+0x218>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	3301      	adds	r3, #1
 8001172:	b2da      	uxtb	r2, r3
 8001174:	4b54      	ldr	r3, [pc, #336]	; (80012c8 <HAL_GPIO_EXTI_Callback+0x218>)
 8001176:	701a      	strb	r2, [r3, #0]
			sumZ += Period;
 8001178:	4b52      	ldr	r3, [pc, #328]	; (80012c4 <HAL_GPIO_EXTI_Callback+0x214>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	461a      	mov	r2, r3
 800117e:	4b54      	ldr	r3, [pc, #336]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x220>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4413      	add	r3, r2
 8001184:	4a52      	ldr	r2, [pc, #328]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x220>)
 8001186:	6013      	str	r3, [r2, #0]
			if(iZ == AVG){
 8001188:	4b4f      	ldr	r3, [pc, #316]	; (80012c8 <HAL_GPIO_EXTI_Callback+0x218>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b64      	cmp	r3, #100	; 0x64
 800118e:	d10e      	bne.n	80011ae <HAL_GPIO_EXTI_Callback+0xfe>
				PeriodZ = sumZ/AVG;
 8001190:	4b4f      	ldr	r3, [pc, #316]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x220>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a4f      	ldr	r2, [pc, #316]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x224>)
 8001196:	fba2 2303 	umull	r2, r3, r2, r3
 800119a:	095b      	lsrs	r3, r3, #5
 800119c:	b29a      	uxth	r2, r3
 800119e:	4b4e      	ldr	r3, [pc, #312]	; (80012d8 <HAL_GPIO_EXTI_Callback+0x228>)
 80011a0:	801a      	strh	r2, [r3, #0]
				iZ  = 0;
 80011a2:	4b49      	ldr	r3, [pc, #292]	; (80012c8 <HAL_GPIO_EXTI_Callback+0x218>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]
				sumZ = 0;
 80011a8:	4b49      	ldr	r3, [pc, #292]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x220>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
			}
			RefreshTIM(&htim12);
 80011ae:	4843      	ldr	r0, [pc, #268]	; (80012bc <HAL_GPIO_EXTI_Callback+0x20c>)
 80011b0:	f000 f972 	bl	8001498 <RefreshTIM>
			HAL_TIM_Base_Start_IT(&htim12);
 80011b4:	4841      	ldr	r0, [pc, #260]	; (80012bc <HAL_GPIO_EXTI_Callback+0x20c>)
 80011b6:	f002 fa28 	bl	800360a <HAL_TIM_Base_Start_IT>
			if (Count == 0)
 80011ba:	4b3d      	ldr	r3, [pc, #244]	; (80012b0 <HAL_GPIO_EXTI_Callback+0x200>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d10c      	bne.n	80011dc <HAL_GPIO_EXTI_Callback+0x12c>
			{
				Phase[0][Axis_Z] = 4;
 80011c2:	4b46      	ldr	r3, [pc, #280]	; (80012dc <HAL_GPIO_EXTI_Callback+0x22c>)
 80011c4:	2204      	movs	r2, #4
 80011c6:	809a      	strh	r2, [r3, #4]
				Phase[1][Axis_Z] = dPhase;
 80011c8:	4b38      	ldr	r3, [pc, #224]	; (80012ac <HAL_GPIO_EXTI_Callback+0x1fc>)
 80011ca:	881a      	ldrh	r2, [r3, #0]
 80011cc:	4b43      	ldr	r3, [pc, #268]	; (80012dc <HAL_GPIO_EXTI_Callback+0x22c>)
 80011ce:	819a      	strh	r2, [r3, #12]
				sendDataByWiznet(Phase[1][Axis_Z]);
 80011d0:	4b42      	ldr	r3, [pc, #264]	; (80012dc <HAL_GPIO_EXTI_Callback+0x22c>)
 80011d2:	899b      	ldrh	r3, [r3, #12]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f000 f9ad 	bl	8001534 <sendDataByWiznet>
			{
				Phase[0][Axis_Z] = Count;
				Phase[1][Axis_Z] = dPhase;
				sendDataByWiznet(Phase[1][Axis_Z]);
			}
			break;
 80011da:	e138      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x39e>
				Phase[0][Axis_Z] = Count;
 80011dc:	4b34      	ldr	r3, [pc, #208]	; (80012b0 <HAL_GPIO_EXTI_Callback+0x200>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	4b3e      	ldr	r3, [pc, #248]	; (80012dc <HAL_GPIO_EXTI_Callback+0x22c>)
 80011e4:	809a      	strh	r2, [r3, #4]
				Phase[1][Axis_Z] = dPhase;
 80011e6:	4b31      	ldr	r3, [pc, #196]	; (80012ac <HAL_GPIO_EXTI_Callback+0x1fc>)
 80011e8:	881a      	ldrh	r2, [r3, #0]
 80011ea:	4b3c      	ldr	r3, [pc, #240]	; (80012dc <HAL_GPIO_EXTI_Callback+0x22c>)
 80011ec:	819a      	strh	r2, [r3, #12]
				sendDataByWiznet(Phase[1][Axis_Z]);
 80011ee:	4b3b      	ldr	r3, [pc, #236]	; (80012dc <HAL_GPIO_EXTI_Callback+0x22c>)
 80011f0:	899b      	ldrh	r3, [r3, #12]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f99e 	bl	8001534 <sendDataByWiznet>
			break;
 80011f8:	e129      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x39e>

		case GPIO_PIN_0:
			HAL_TIM_Base_Stop_IT(&htim2);
 80011fa:	4839      	ldr	r0, [pc, #228]	; (80012e0 <HAL_GPIO_EXTI_Callback+0x230>)
 80011fc:	f002 fa29 	bl	8003652 <HAL_TIM_Base_Stop_IT>
			Period = TIM2 ->CNT;
 8001200:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001206:	b29a      	uxth	r2, r3
 8001208:	4b2e      	ldr	r3, [pc, #184]	; (80012c4 <HAL_GPIO_EXTI_Callback+0x214>)
 800120a:	801a      	strh	r2, [r3, #0]
			PeriodAVG[iY] = Period;
 800120c:	4b35      	ldr	r3, [pc, #212]	; (80012e4 <HAL_GPIO_EXTI_Callback+0x234>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	4b2c      	ldr	r3, [pc, #176]	; (80012c4 <HAL_GPIO_EXTI_Callback+0x214>)
 8001214:	8819      	ldrh	r1, [r3, #0]
 8001216:	4b2d      	ldr	r3, [pc, #180]	; (80012cc <HAL_GPIO_EXTI_Callback+0x21c>)
 8001218:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			iY++;
 800121c:	4b31      	ldr	r3, [pc, #196]	; (80012e4 <HAL_GPIO_EXTI_Callback+0x234>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	3301      	adds	r3, #1
 8001222:	b2da      	uxtb	r2, r3
 8001224:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <HAL_GPIO_EXTI_Callback+0x234>)
 8001226:	701a      	strb	r2, [r3, #0]
			sumY += Period;
 8001228:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <HAL_GPIO_EXTI_Callback+0x214>)
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	4b2e      	ldr	r3, [pc, #184]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x238>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4413      	add	r3, r2
 8001234:	4a2c      	ldr	r2, [pc, #176]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x238>)
 8001236:	6013      	str	r3, [r2, #0]
			if(iY == AVG){
 8001238:	4b2a      	ldr	r3, [pc, #168]	; (80012e4 <HAL_GPIO_EXTI_Callback+0x234>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b64      	cmp	r3, #100	; 0x64
 800123e:	d10e      	bne.n	800125e <HAL_GPIO_EXTI_Callback+0x1ae>
				PeriodY = sumY/AVG;
 8001240:	4b29      	ldr	r3, [pc, #164]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x238>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a23      	ldr	r2, [pc, #140]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x224>)
 8001246:	fba2 2303 	umull	r2, r3, r2, r3
 800124a:	095b      	lsrs	r3, r3, #5
 800124c:	b29a      	uxth	r2, r3
 800124e:	4b27      	ldr	r3, [pc, #156]	; (80012ec <HAL_GPIO_EXTI_Callback+0x23c>)
 8001250:	801a      	strh	r2, [r3, #0]
				iY  = 0;
 8001252:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <HAL_GPIO_EXTI_Callback+0x234>)
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
				sumY = 0;
 8001258:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x238>)
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
			}
			RefreshTIM(&htim2);
 800125e:	4820      	ldr	r0, [pc, #128]	; (80012e0 <HAL_GPIO_EXTI_Callback+0x230>)
 8001260:	f000 f91a 	bl	8001498 <RefreshTIM>
			HAL_TIM_Base_Start_IT(&htim2);
 8001264:	481e      	ldr	r0, [pc, #120]	; (80012e0 <HAL_GPIO_EXTI_Callback+0x230>)
 8001266:	f002 f9d0 	bl	800360a <HAL_TIM_Base_Start_IT>
			if (Count == 0)
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <HAL_GPIO_EXTI_Callback+0x200>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d10c      	bne.n	800128c <HAL_GPIO_EXTI_Callback+0x1dc>
			{
				Phase[0][Axis_Y] = 4;
 8001272:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <HAL_GPIO_EXTI_Callback+0x22c>)
 8001274:	2204      	movs	r2, #4
 8001276:	805a      	strh	r2, [r3, #2]
				Phase[1][Axis_Y] = dPhase;
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <HAL_GPIO_EXTI_Callback+0x1fc>)
 800127a:	881a      	ldrh	r2, [r3, #0]
 800127c:	4b17      	ldr	r3, [pc, #92]	; (80012dc <HAL_GPIO_EXTI_Callback+0x22c>)
 800127e:	815a      	strh	r2, [r3, #10]
				sendDataByWiznet(Phase[1][Axis_Y]);
 8001280:	4b16      	ldr	r3, [pc, #88]	; (80012dc <HAL_GPIO_EXTI_Callback+0x22c>)
 8001282:	895b      	ldrh	r3, [r3, #10]
 8001284:	4618      	mov	r0, r3
 8001286:	f000 f955 	bl	8001534 <sendDataByWiznet>
			{
				Phase[0][Axis_Y] = Count;
				Phase[1][Axis_Y] = dPhase;
				sendDataByWiznet(Phase[1][Axis_Y]);
			}
			break;
 800128a:	e0e0      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x39e>
				Phase[0][Axis_Y] = Count;
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <HAL_GPIO_EXTI_Callback+0x200>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	b29a      	uxth	r2, r3
 8001292:	4b12      	ldr	r3, [pc, #72]	; (80012dc <HAL_GPIO_EXTI_Callback+0x22c>)
 8001294:	805a      	strh	r2, [r3, #2]
				Phase[1][Axis_Y] = dPhase;
 8001296:	4b05      	ldr	r3, [pc, #20]	; (80012ac <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001298:	881a      	ldrh	r2, [r3, #0]
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <HAL_GPIO_EXTI_Callback+0x22c>)
 800129c:	815a      	strh	r2, [r3, #10]
				sendDataByWiznet(Phase[1][Axis_Y]);
 800129e:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <HAL_GPIO_EXTI_Callback+0x22c>)
 80012a0:	895b      	ldrh	r3, [r3, #10]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 f946 	bl	8001534 <sendDataByWiznet>
			break;
 80012a8:	e0d1      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x39e>
 80012aa:	bf00      	nop
 80012ac:	200001a4 	.word	0x200001a4
 80012b0:	200001a1 	.word	0x200001a1
 80012b4:	200003f4 	.word	0x200003f4
 80012b8:	40014000 	.word	0x40014000
 80012bc:	20000478 	.word	0x20000478
 80012c0:	40001800 	.word	0x40001800
 80012c4:	200001a2 	.word	0x200001a2
 80012c8:	20000272 	.word	0x20000272
 80012cc:	200001a8 	.word	0x200001a8
 80012d0:	2000027c 	.word	0x2000027c
 80012d4:	51eb851f 	.word	0x51eb851f
 80012d8:	20000288 	.word	0x20000288
 80012dc:	2000028c 	.word	0x2000028c
 80012e0:	20000434 	.word	0x20000434
 80012e4:	20000271 	.word	0x20000271
 80012e8:	20000278 	.word	0x20000278
 80012ec:	20000286 	.word	0x20000286

		case GPIO_PIN_2:
			HAL_TIM_Base_Stop_IT(&htim3);
 80012f0:	4859      	ldr	r0, [pc, #356]	; (8001458 <HAL_GPIO_EXTI_Callback+0x3a8>)
 80012f2:	f002 f9ae 	bl	8003652 <HAL_TIM_Base_Stop_IT>
			Period = TIM3 ->CNT;
 80012f6:	4b59      	ldr	r3, [pc, #356]	; (800145c <HAL_GPIO_EXTI_Callback+0x3ac>)
 80012f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	4b58      	ldr	r3, [pc, #352]	; (8001460 <HAL_GPIO_EXTI_Callback+0x3b0>)
 80012fe:	801a      	strh	r2, [r3, #0]
			PeriodAVG[iX] = Period;
 8001300:	4b58      	ldr	r3, [pc, #352]	; (8001464 <HAL_GPIO_EXTI_Callback+0x3b4>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4b56      	ldr	r3, [pc, #344]	; (8001460 <HAL_GPIO_EXTI_Callback+0x3b0>)
 8001308:	8819      	ldrh	r1, [r3, #0]
 800130a:	4b57      	ldr	r3, [pc, #348]	; (8001468 <HAL_GPIO_EXTI_Callback+0x3b8>)
 800130c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			iX++;
 8001310:	4b54      	ldr	r3, [pc, #336]	; (8001464 <HAL_GPIO_EXTI_Callback+0x3b4>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	3301      	adds	r3, #1
 8001316:	b2da      	uxtb	r2, r3
 8001318:	4b52      	ldr	r3, [pc, #328]	; (8001464 <HAL_GPIO_EXTI_Callback+0x3b4>)
 800131a:	701a      	strb	r2, [r3, #0]
			sumX += Period;
 800131c:	4b50      	ldr	r3, [pc, #320]	; (8001460 <HAL_GPIO_EXTI_Callback+0x3b0>)
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	4b52      	ldr	r3, [pc, #328]	; (800146c <HAL_GPIO_EXTI_Callback+0x3bc>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4413      	add	r3, r2
 8001328:	4a50      	ldr	r2, [pc, #320]	; (800146c <HAL_GPIO_EXTI_Callback+0x3bc>)
 800132a:	6013      	str	r3, [r2, #0]
			if(iX == AVG){
 800132c:	4b4d      	ldr	r3, [pc, #308]	; (8001464 <HAL_GPIO_EXTI_Callback+0x3b4>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b64      	cmp	r3, #100	; 0x64
 8001332:	d10e      	bne.n	8001352 <HAL_GPIO_EXTI_Callback+0x2a2>
				PeriodX = sumX/AVG;
 8001334:	4b4d      	ldr	r3, [pc, #308]	; (800146c <HAL_GPIO_EXTI_Callback+0x3bc>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a4d      	ldr	r2, [pc, #308]	; (8001470 <HAL_GPIO_EXTI_Callback+0x3c0>)
 800133a:	fba2 2303 	umull	r2, r3, r2, r3
 800133e:	095b      	lsrs	r3, r3, #5
 8001340:	b29a      	uxth	r2, r3
 8001342:	4b4c      	ldr	r3, [pc, #304]	; (8001474 <HAL_GPIO_EXTI_Callback+0x3c4>)
 8001344:	801a      	strh	r2, [r3, #0]
				iX  = 0;
 8001346:	4b47      	ldr	r3, [pc, #284]	; (8001464 <HAL_GPIO_EXTI_Callback+0x3b4>)
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
				sumX = 0;
 800134c:	4b47      	ldr	r3, [pc, #284]	; (800146c <HAL_GPIO_EXTI_Callback+0x3bc>)
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
			}
			RefreshTIM(&htim3);
 8001352:	4841      	ldr	r0, [pc, #260]	; (8001458 <HAL_GPIO_EXTI_Callback+0x3a8>)
 8001354:	f000 f8a0 	bl	8001498 <RefreshTIM>
			HAL_TIM_Base_Start_IT(&htim3);
 8001358:	483f      	ldr	r0, [pc, #252]	; (8001458 <HAL_GPIO_EXTI_Callback+0x3a8>)
 800135a:	f002 f956 	bl	800360a <HAL_TIM_Base_Start_IT>
			if (Count == 0)
 800135e:	4b46      	ldr	r3, [pc, #280]	; (8001478 <HAL_GPIO_EXTI_Callback+0x3c8>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10c      	bne.n	8001380 <HAL_GPIO_EXTI_Callback+0x2d0>
			{
				Phase[0][Axis_X] = 4;
 8001366:	4b45      	ldr	r3, [pc, #276]	; (800147c <HAL_GPIO_EXTI_Callback+0x3cc>)
 8001368:	2204      	movs	r2, #4
 800136a:	801a      	strh	r2, [r3, #0]
				Phase[1][Axis_X] = dPhase;
 800136c:	4b44      	ldr	r3, [pc, #272]	; (8001480 <HAL_GPIO_EXTI_Callback+0x3d0>)
 800136e:	881a      	ldrh	r2, [r3, #0]
 8001370:	4b42      	ldr	r3, [pc, #264]	; (800147c <HAL_GPIO_EXTI_Callback+0x3cc>)
 8001372:	811a      	strh	r2, [r3, #8]
				sendDataByWiznet(Phase[1][Axis_X]);
 8001374:	4b41      	ldr	r3, [pc, #260]	; (800147c <HAL_GPIO_EXTI_Callback+0x3cc>)
 8001376:	891b      	ldrh	r3, [r3, #8]
 8001378:	4618      	mov	r0, r3
 800137a:	f000 f8db 	bl	8001534 <sendDataByWiznet>
			{
				Phase[0][Axis_X] = Count;
				Phase[1][Axis_X] = dPhase;
				sendDataByWiznet(Phase[1][Axis_X]);
			};
			break;
 800137e:	e066      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x39e>
				Phase[0][Axis_X] = Count;
 8001380:	4b3d      	ldr	r3, [pc, #244]	; (8001478 <HAL_GPIO_EXTI_Callback+0x3c8>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	b29a      	uxth	r2, r3
 8001386:	4b3d      	ldr	r3, [pc, #244]	; (800147c <HAL_GPIO_EXTI_Callback+0x3cc>)
 8001388:	801a      	strh	r2, [r3, #0]
				Phase[1][Axis_X] = dPhase;
 800138a:	4b3d      	ldr	r3, [pc, #244]	; (8001480 <HAL_GPIO_EXTI_Callback+0x3d0>)
 800138c:	881a      	ldrh	r2, [r3, #0]
 800138e:	4b3b      	ldr	r3, [pc, #236]	; (800147c <HAL_GPIO_EXTI_Callback+0x3cc>)
 8001390:	811a      	strh	r2, [r3, #8]
				sendDataByWiznet(Phase[1][Axis_X]);
 8001392:	4b3a      	ldr	r3, [pc, #232]	; (800147c <HAL_GPIO_EXTI_Callback+0x3cc>)
 8001394:	891b      	ldrh	r3, [r3, #8]
 8001396:	4618      	mov	r0, r3
 8001398:	f000 f8cc 	bl	8001534 <sendDataByWiznet>
			break;
 800139c:	e057      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x39e>

		case GPIO_PIN_3:
			HAL_TIM_Base_Stop_IT(&htim4);
 800139e:	4839      	ldr	r0, [pc, #228]	; (8001484 <HAL_GPIO_EXTI_Callback+0x3d4>)
 80013a0:	f002 f957 	bl	8003652 <HAL_TIM_Base_Stop_IT>
			Period = TIM4 ->CNT;
 80013a4:	4b38      	ldr	r3, [pc, #224]	; (8001488 <HAL_GPIO_EXTI_Callback+0x3d8>)
 80013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	4b2d      	ldr	r3, [pc, #180]	; (8001460 <HAL_GPIO_EXTI_Callback+0x3b0>)
 80013ac:	801a      	strh	r2, [r3, #0]
			PeriodAVG[iA] = Period;
 80013ae:	4b37      	ldr	r3, [pc, #220]	; (800148c <HAL_GPIO_EXTI_Callback+0x3dc>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	4b2a      	ldr	r3, [pc, #168]	; (8001460 <HAL_GPIO_EXTI_Callback+0x3b0>)
 80013b6:	8819      	ldrh	r1, [r3, #0]
 80013b8:	4b2b      	ldr	r3, [pc, #172]	; (8001468 <HAL_GPIO_EXTI_Callback+0x3b8>)
 80013ba:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			iA++;
 80013be:	4b33      	ldr	r3, [pc, #204]	; (800148c <HAL_GPIO_EXTI_Callback+0x3dc>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	3301      	adds	r3, #1
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4b31      	ldr	r3, [pc, #196]	; (800148c <HAL_GPIO_EXTI_Callback+0x3dc>)
 80013c8:	701a      	strb	r2, [r3, #0]
			sumA += Period;
 80013ca:	4b25      	ldr	r3, [pc, #148]	; (8001460 <HAL_GPIO_EXTI_Callback+0x3b0>)
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	461a      	mov	r2, r3
 80013d0:	4b2f      	ldr	r3, [pc, #188]	; (8001490 <HAL_GPIO_EXTI_Callback+0x3e0>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4413      	add	r3, r2
 80013d6:	4a2e      	ldr	r2, [pc, #184]	; (8001490 <HAL_GPIO_EXTI_Callback+0x3e0>)
 80013d8:	6013      	str	r3, [r2, #0]
			if(iA == AVG){
 80013da:	4b2c      	ldr	r3, [pc, #176]	; (800148c <HAL_GPIO_EXTI_Callback+0x3dc>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b64      	cmp	r3, #100	; 0x64
 80013e0:	d10e      	bne.n	8001400 <HAL_GPIO_EXTI_Callback+0x350>
				PeriodA = sumA/AVG;
 80013e2:	4b2b      	ldr	r3, [pc, #172]	; (8001490 <HAL_GPIO_EXTI_Callback+0x3e0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a22      	ldr	r2, [pc, #136]	; (8001470 <HAL_GPIO_EXTI_Callback+0x3c0>)
 80013e8:	fba2 2303 	umull	r2, r3, r2, r3
 80013ec:	095b      	lsrs	r3, r3, #5
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	4b28      	ldr	r3, [pc, #160]	; (8001494 <HAL_GPIO_EXTI_Callback+0x3e4>)
 80013f2:	801a      	strh	r2, [r3, #0]
				iA  = 0;
 80013f4:	4b25      	ldr	r3, [pc, #148]	; (800148c <HAL_GPIO_EXTI_Callback+0x3dc>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
				sumA = 0;
 80013fa:	4b25      	ldr	r3, [pc, #148]	; (8001490 <HAL_GPIO_EXTI_Callback+0x3e0>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
			}
			RefreshTIM(&htim4);
 8001400:	4820      	ldr	r0, [pc, #128]	; (8001484 <HAL_GPIO_EXTI_Callback+0x3d4>)
 8001402:	f000 f849 	bl	8001498 <RefreshTIM>
			HAL_TIM_Base_Start_IT(&htim4);
 8001406:	481f      	ldr	r0, [pc, #124]	; (8001484 <HAL_GPIO_EXTI_Callback+0x3d4>)
 8001408:	f002 f8ff 	bl	800360a <HAL_TIM_Base_Start_IT>
			if (Count == 0)
 800140c:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <HAL_GPIO_EXTI_Callback+0x3c8>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d10c      	bne.n	800142e <HAL_GPIO_EXTI_Callback+0x37e>
			{
				Phase[0][Axis_A] = 4;
 8001414:	4b19      	ldr	r3, [pc, #100]	; (800147c <HAL_GPIO_EXTI_Callback+0x3cc>)
 8001416:	2204      	movs	r2, #4
 8001418:	80da      	strh	r2, [r3, #6]
				Phase[1][Axis_A] = dPhase;
 800141a:	4b19      	ldr	r3, [pc, #100]	; (8001480 <HAL_GPIO_EXTI_Callback+0x3d0>)
 800141c:	881a      	ldrh	r2, [r3, #0]
 800141e:	4b17      	ldr	r3, [pc, #92]	; (800147c <HAL_GPIO_EXTI_Callback+0x3cc>)
 8001420:	81da      	strh	r2, [r3, #14]
				sendDataByWiznet(Phase[1][Axis_A]);
 8001422:	4b16      	ldr	r3, [pc, #88]	; (800147c <HAL_GPIO_EXTI_Callback+0x3cc>)
 8001424:	89db      	ldrh	r3, [r3, #14]
 8001426:	4618      	mov	r0, r3
 8001428:	f000 f884 	bl	8001534 <sendDataByWiznet>
			{
				Phase[0][Axis_A] = Count;
				Phase[1][Axis_A] = dPhase;
				sendDataByWiznet(Phase[1][Axis_A]);
			};
			break;
 800142c:	e00f      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x39e>
				Phase[0][Axis_A] = Count;
 800142e:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_GPIO_EXTI_Callback+0x3c8>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b29a      	uxth	r2, r3
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <HAL_GPIO_EXTI_Callback+0x3cc>)
 8001436:	80da      	strh	r2, [r3, #6]
				Phase[1][Axis_A] = dPhase;
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <HAL_GPIO_EXTI_Callback+0x3d0>)
 800143a:	881a      	ldrh	r2, [r3, #0]
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <HAL_GPIO_EXTI_Callback+0x3cc>)
 800143e:	81da      	strh	r2, [r3, #14]
				sendDataByWiznet(Phase[1][Axis_A]);
 8001440:	4b0e      	ldr	r3, [pc, #56]	; (800147c <HAL_GPIO_EXTI_Callback+0x3cc>)
 8001442:	89db      	ldrh	r3, [r3, #14]
 8001444:	4618      	mov	r0, r3
 8001446:	f000 f875 	bl	8001534 <sendDataByWiznet>
			break;
 800144a:	e000      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x39e>

		default:
			break;
 800144c:	bf00      	nop
		}
	//}
	//count++;
	//}
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000318 	.word	0x20000318
 800145c:	40000400 	.word	0x40000400
 8001460:	200001a2 	.word	0x200001a2
 8001464:	20000270 	.word	0x20000270
 8001468:	200001a8 	.word	0x200001a8
 800146c:	20000274 	.word	0x20000274
 8001470:	51eb851f 	.word	0x51eb851f
 8001474:	20000284 	.word	0x20000284
 8001478:	200001a1 	.word	0x200001a1
 800147c:	2000028c 	.word	0x2000028c
 8001480:	200001a4 	.word	0x200001a4
 8001484:	200002d0 	.word	0x200002d0
 8001488:	40000800 	.word	0x40000800
 800148c:	20000273 	.word	0x20000273
 8001490:	20000280 	.word	0x20000280
 8001494:	2000028a 	.word	0x2000028a

08001498 <RefreshTIM>:

int RefreshTIM(TIM_HandleTypeDef *htim){
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(htim);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f002 f8d6 	bl	8003652 <HAL_TIM_Base_Stop_IT>
	htim->Instance->CNT = 0;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2200      	movs	r2, #0
 80014ac:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_CLEAR_FLAG(htim,TIM_FLAG_UPDATE);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f06f 0201 	mvn.w	r2, #1
 80014b6:	611a      	str	r2, [r3, #16]
	return 0;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <PhaseRelativelyA>:

void PhaseRelativelyA(void){
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
	for(uint8_t j = 0; j < AXIS_COUNT - 1; j++){
 80014ca:	2300      	movs	r3, #0
 80014cc:	71fb      	strb	r3, [r7, #7]
 80014ce:	e023      	b.n	8001518 <PhaseRelativelyA+0x54>
		if(Phase[0][Axis_A]>Phase[0][j]){
 80014d0:	4b16      	ldr	r3, [pc, #88]	; (800152c <PhaseRelativelyA+0x68>)
 80014d2:	88da      	ldrh	r2, [r3, #6]
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	4915      	ldr	r1, [pc, #84]	; (800152c <PhaseRelativelyA+0x68>)
 80014d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d90e      	bls.n	80014fe <PhaseRelativelyA+0x3a>
			PhaseRelatA[j]=Phase[1][j]-Phase[1][Axis_A];
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	4a12      	ldr	r2, [pc, #72]	; (800152c <PhaseRelativelyA+0x68>)
 80014e4:	3304      	adds	r3, #4
 80014e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014ea:	4619      	mov	r1, r3
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <PhaseRelativelyA+0x68>)
 80014ee:	89db      	ldrh	r3, [r3, #14]
 80014f0:	461a      	mov	r2, r3
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	1a8a      	subs	r2, r1, r2
 80014f6:	490e      	ldr	r1, [pc, #56]	; (8001530 <PhaseRelativelyA+0x6c>)
 80014f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80014fc:	e009      	b.n	8001512 <PhaseRelativelyA+0x4e>
		}
		else
		{
			PhaseRelatA[j]=Phase[1][j];
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	4a0a      	ldr	r2, [pc, #40]	; (800152c <PhaseRelativelyA+0x68>)
 8001502:	3304      	adds	r3, #4
 8001504:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	4611      	mov	r1, r2
 800150c:	4a08      	ldr	r2, [pc, #32]	; (8001530 <PhaseRelativelyA+0x6c>)
 800150e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(uint8_t j = 0; j < AXIS_COUNT - 1; j++){
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	3301      	adds	r3, #1
 8001516:	71fb      	strb	r3, [r7, #7]
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	2b02      	cmp	r3, #2
 800151c:	d9d8      	bls.n	80014d0 <PhaseRelativelyA+0xc>
		}
	}
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	2000028c 	.word	0x2000028c
 8001530:	2000029c 	.word	0x2000029c

08001534 <sendDataByWiznet>:

void sendDataByWiznet(uint16_t data) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	80fb      	strh	r3, [r7, #6]

	uint8_t buffer[TRANSPORT_BUFFER_SIZE];

	uint8_t highByteOfData = data >> 8;
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	0a1b      	lsrs	r3, r3, #8
 8001542:	b29b      	uxth	r3, r3
 8001544:	73fb      	strb	r3, [r7, #15]
	uint8_t lowByteOfData =  data & 0xFF;
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	73bb      	strb	r3, [r7, #14]
	buffer[0] = 10;
 800154a:	230a      	movs	r3, #10
 800154c:	723b      	strb	r3, [r7, #8]
	buffer[1] = highByteOfData;
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	727b      	strb	r3, [r7, #9]
	buffer[2] = lowByteOfData;
 8001552:	7bbb      	ldrb	r3, [r7, #14]
 8001554:	72bb      	strb	r3, [r7, #10]
	loopback_tcps_server(0, buffer, PORT);
 8001556:	f107 0308 	add.w	r3, r7, #8
 800155a:	f241 3288 	movw	r2, #5000	; 0x1388
 800155e:	4619      	mov	r1, r3
 8001560:	2000      	movs	r0, #0
 8001562:	f000 f937 	bl	80017d4 <loopback_tcps_server>


}
 8001566:	bf00      	nop
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <SystemInit+0x28>)
 8001576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800157a:	4a07      	ldr	r2, [pc, #28]	; (8001598 <SystemInit+0x28>)
 800157c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001580:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <SystemInit+0x28>)
 8001586:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800158a:	609a      	str	r2, [r3, #8]
#endif
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <WizchIP_main>:
 *  uint16_t GPIO_PIN_CS - Pin CS
 *  UART_HandleTypeDef* uart - debug info in console (can be deleted)
 *  @retval None
 *  */
void WizchIP_main(SPI_HandleTypeDef* spi,GPIO_TypeDef *GPIO_CS, uint16_t GPIO_PIN_CS, UART_HandleTypeDef* uart)
{
 800159c:	b590      	push	{r4, r7, lr}
 800159e:	f6ad 0d34 	subw	sp, sp, #2100	; 0x834
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	f107 040c 	add.w	r4, r7, #12
 80015a8:	6020      	str	r0, [r4, #0]
 80015aa:	f107 0008 	add.w	r0, r7, #8
 80015ae:	6001      	str	r1, [r0, #0]
 80015b0:	4611      	mov	r1, r2
 80015b2:	463a      	mov	r2, r7
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	1dbb      	adds	r3, r7, #6
 80015b8:	460a      	mov	r2, r1
 80015ba:	801a      	strh	r2, [r3, #0]
	SPI_WIZCHIP = spi;
 80015bc:	4a30      	ldr	r2, [pc, #192]	; (8001680 <WizchIP_main+0xe4>)
 80015be:	f107 030c 	add.w	r3, r7, #12
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6013      	str	r3, [r2, #0]
	GPIO_SPI_CS_WIZCHIP = GPIO_CS;
 80015c6:	4a2f      	ldr	r2, [pc, #188]	; (8001684 <WizchIP_main+0xe8>)
 80015c8:	f107 0308 	add.w	r3, r7, #8
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6013      	str	r3, [r2, #0]
	GPIO_Pin_SPI_CS_WIZCHIP = GPIO_PIN_CS;
 80015d0:	4a2d      	ldr	r2, [pc, #180]	; (8001688 <WizchIP_main+0xec>)
 80015d2:	1dbb      	adds	r3, r7, #6
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	8013      	strh	r3, [r2, #0]

	UART_WIZCHIP = uart;
 80015d8:	4a2c      	ldr	r2, [pc, #176]	; (800168c <WizchIP_main+0xf0>)
 80015da:	463b      	mov	r3, r7
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6013      	str	r3, [r2, #0]

	uint8_t gDATABUF[DATA_BUF_SIZE];

	uint8_t tmp;
	int32_t ret = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
	uint8_t memsize[2][8] = {{16,0,0,0,0,0,0,0},{16,0,0,0,0,0,0,0}}; //
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	461a      	mov	r2, r3
 80015ec:	2300      	movs	r3, #0
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	6053      	str	r3, [r2, #4]
 80015f2:	6093      	str	r3, [r2, #8]
 80015f4:	60d3      	str	r3, [r2, #12]
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	2210      	movs	r2, #16
 80015fc:	701a      	strb	r2, [r3, #0]
 80015fe:	f107 0314 	add.w	r3, r7, #20
 8001602:	2210      	movs	r2, #16
 8001604:	721a      	strb	r2, [r3, #8]

	 // First of all, Should register SPI callback functions implemented by user for accessing WIZCHIP //
	   ////////////////////////////////////////////////////////////////////////////////////////////////////
	   /* Critical section callback - No use in this example */
	   reg_wizchip_cris_cbfunc(0, 0);
 8001606:	2100      	movs	r1, #0
 8001608:	2000      	movs	r0, #0
 800160a:	f003 fdd1 	bl	80051b0 <reg_wizchip_cris_cbfunc>
	   /* Chip selection call back */
	#if   _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_
	    reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 800160e:	4920      	ldr	r1, [pc, #128]	; (8001690 <WizchIP_main+0xf4>)
 8001610:	4820      	ldr	r0, [pc, #128]	; (8001694 <WizchIP_main+0xf8>)
 8001612:	f003 fdf1 	bl	80051f8 <reg_wizchip_cs_cbfunc>
	   #else
	      reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
	   #endif
	#endif
	    /* SPI Read & Write callback function */
	    reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 8001616:	4920      	ldr	r1, [pc, #128]	; (8001698 <WizchIP_main+0xfc>)
 8001618:	4820      	ldr	r0, [pc, #128]	; (800169c <WizchIP_main+0x100>)
 800161a:	f003 fe11 	bl	8005240 <reg_wizchip_spi_cbfunc>
	    reg_wizchip_spiburst_cbfunc(wizchip_read_burst, wizchip_write_burst);
 800161e:	4920      	ldr	r1, [pc, #128]	; (80016a0 <WizchIP_main+0x104>)
 8001620:	4820      	ldr	r0, [pc, #128]	; (80016a4 <WizchIP_main+0x108>)
 8001622:	f003 fe39 	bl	8005298 <reg_wizchip_spiburst_cbfunc>

	    uint8_t ret_version = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	f887 382b 	strb.w	r3, [r7, #2091]	; 0x82b
	    ret_version = getVERSIONR();
 800162c:	f44f 5064 	mov.w	r0, #14592	; 0x3900
 8001630:	f002 ffc0 	bl	80045b4 <WIZCHIP_READ>
 8001634:	4603      	mov	r3, r0
 8001636:	f887 382b 	strb.w	r3, [r7, #2091]	; 0x82b
	    if(ret_version != 0x4)
 800163a:	f897 382b 	ldrb.w	r3, [r7, #2091]	; 0x82b
 800163e:	2b04      	cmp	r3, #4
 8001640:	d000      	beq.n	8001644 <WizchIP_main+0xa8>
	    {
	    	//Error read SPI
	    	while(1);
 8001642:	e7fe      	b.n	8001642 <WizchIP_main+0xa6>
	    }

	    ////////////////////////////////////////////////////////////////////////
	    /* WIZCHIP SOCKET Buffer initialize */
	        if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1)
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4619      	mov	r1, r3
 800164a:	2001      	movs	r0, #1
 800164c:	f003 fe50 	bl	80052f0 <ctlwizchip>
 8001650:	4603      	mov	r3, r0
 8001652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001656:	d100      	bne.n	800165a <WizchIP_main+0xbe>
	        {
	        	//UART_Printf("WIZCHIP Initialized fail.\r\n");

	           while(1);
 8001658:	e7fe      	b.n	8001658 <WizchIP_main+0xbc>
	        }

	        /* PHY link status check */
	        do
	        {
	           if(ctlwizchip(CW_GET_PHYLINK, (void*)&tmp) == -1);
 800165a:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800165e:	4619      	mov	r1, r3
 8001660:	200f      	movs	r0, #15
 8001662:	f003 fe45 	bl	80052f0 <ctlwizchip>

	        	   //UART_Printf("Unknown PHY Link stauts.\r\n");

	        }while(tmp == PHY_LINK_OFF);
 8001666:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f4      	beq.n	800165a <WizchIP_main+0xbe>
	        /* Network initialization */

	        network_init();
 8001670:	f000 f88a 	bl	8001788 <network_init>
	        	}
	        	*/

	       // } // end of Main loop

}
 8001674:	bf00      	nop
 8001676:	f607 0734 	addw	r7, r7, #2100	; 0x834
 800167a:	46bd      	mov	sp, r7
 800167c:	bd90      	pop	{r4, r7, pc}
 800167e:	bf00      	nop
 8001680:	20000310 	.word	0x20000310
 8001684:	20000314 	.word	0x20000314
 8001688:	200003b0 	.word	0x200003b0
 800168c:	20000474 	.word	0x20000474
 8001690:	080016cd 	.word	0x080016cd
 8001694:	080016a9 	.word	0x080016a9
 8001698:	080016ed 	.word	0x080016ed
 800169c:	08001715 	.word	0x08001715
 80016a0:	08001761 	.word	0x08001761
 80016a4:	08001739 	.word	0x08001739

080016a8 <wizchip_select>:


/* Set Low CS */
void  wizchip_select(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
   GPIO_SPI_CS_WIZCHIP->BSRR = GPIO_Pin_SPI_CS_WIZCHIP << 16U;
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <wizchip_select+0x1c>)
 80016ae:	881b      	ldrh	r3, [r3, #0]
 80016b0:	041a      	lsls	r2, r3, #16
 80016b2:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <wizchip_select+0x20>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	619a      	str	r2, [r3, #24]
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	200003b0 	.word	0x200003b0
 80016c8:	20000314 	.word	0x20000314

080016cc <wizchip_deselect>:
/* Set High CS*/
void  wizchip_deselect(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
	GPIO_SPI_CS_WIZCHIP->BSRR = GPIO_Pin_SPI_CS_WIZCHIP;
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <wizchip_deselect+0x18>)
 80016d2:	881a      	ldrh	r2, [r3, #0]
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <wizchip_deselect+0x1c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	619a      	str	r2, [r3, #24]
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	200003b0 	.word	0x200003b0
 80016e8:	20000314 	.word	0x20000314

080016ec <wizchip_write>:

void  wizchip_write(uint8_t wb)    //Write SPI
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit( SPI_WIZCHIP, &wb, 	1 , HAL_MAX_DELAY);
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <wizchip_write+0x24>)
 80016f8:	6818      	ldr	r0, [r3, #0]
 80016fa:	1df9      	adds	r1, r7, #7
 80016fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001700:	2201      	movs	r2, #1
 8001702:	f001 fa67 	bl	8002bd4 <HAL_SPI_Transmit>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000310 	.word	0x20000310

08001714 <wizchip_read>:

uint8_t wizchip_read() //Read SPI
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
	uint8_t spi_read_buf;
    HAL_SPI_Receive (SPI_WIZCHIP, &spi_read_buf, 1, HAL_MAX_DELAY);
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <wizchip_read+0x20>)
 800171c:	6818      	ldr	r0, [r3, #0]
 800171e:	1df9      	adds	r1, r7, #7
 8001720:	f04f 33ff 	mov.w	r3, #4294967295
 8001724:	2201      	movs	r2, #1
 8001726:	f001 fb89 	bl	8002e3c <HAL_SPI_Receive>
    return spi_read_buf;
 800172a:	79fb      	ldrb	r3, [r7, #7]

}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000310 	.word	0x20000310

08001738 <wizchip_read_burst>:

void wizchip_read_burst(uint8_t* pBuf, uint16_t len) //Read SPI
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive (SPI_WIZCHIP, pBuf, len, HAL_MAX_DELAY);
 8001744:	4b05      	ldr	r3, [pc, #20]	; (800175c <wizchip_read_burst+0x24>)
 8001746:	6818      	ldr	r0, [r3, #0]
 8001748:	887a      	ldrh	r2, [r7, #2]
 800174a:	f04f 33ff 	mov.w	r3, #4294967295
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	f001 fb74 	bl	8002e3c <HAL_SPI_Receive>
}
 8001754:	bf00      	nop
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000310 	.word	0x20000310

08001760 <wizchip_write_burst>:

void wizchip_write_burst(uint8_t* pBuf, uint16_t len) //Read SPI
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(SPI_WIZCHIP, pBuf, len, HAL_MAX_DELAY);
 800176c:	4b05      	ldr	r3, [pc, #20]	; (8001784 <wizchip_write_burst+0x24>)
 800176e:	6818      	ldr	r0, [r3, #0]
 8001770:	887a      	ldrh	r2, [r7, #2]
 8001772:	f04f 33ff 	mov.w	r3, #4294967295
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	f001 fa2c 	bl	8002bd4 <HAL_SPI_Transmit>
}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000310 	.word	0x20000310

08001788 <network_init>:

/////////////////////////////////////////////////////////////
// Intialize the network information to be used in WIZCHIP //
/////////////////////////////////////////////////////////////
void network_init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
	uint8_t rx_tx_buff_sizes[] = {16, 0, 0, 0, 0, 0, 0, 0};
 800178e:	f107 0308 	add.w	r3, r7, #8
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	2310      	movs	r3, #16
 800179a:	723b      	strb	r3, [r7, #8]
    wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 800179c:	f107 0208 	add.w	r2, r7, #8
 80017a0:	f107 0308 	add.w	r3, r7, #8
 80017a4:	4611      	mov	r1, r2
 80017a6:	4618      	mov	r0, r3
 80017a8:	f003 ff0a 	bl	80055c0 <wizchip_init>
    uint8_t tmpstr[6];
	ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO);
 80017ac:	4908      	ldr	r1, [pc, #32]	; (80017d0 <network_init+0x48>)
 80017ae:	2000      	movs	r0, #0
 80017b0:	f003 fe7c 	bl	80054ac <ctlnetwork>
	ctlnetwork(CN_GET_NETINFO, (void*)&gWIZNETINFO);
 80017b4:	4906      	ldr	r1, [pc, #24]	; (80017d0 <network_init+0x48>)
 80017b6:	2001      	movs	r0, #1
 80017b8:	f003 fe78 	bl	80054ac <ctlnetwork>

	// Display Network Information
	ctlwizchip(CW_GET_ID,(void*)tmpstr);
 80017bc:	463b      	mov	r3, r7
 80017be:	4619      	mov	r1, r3
 80017c0:	2008      	movs	r0, #8
 80017c2:	f003 fd95 	bl	80052f0 <ctlwizchip>
//	UART_Printf("SUB: %d.%d.%d.%d\r\n", gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
//	HAL_Delay(10);
//	UART_Printf("DNS: %d.%d.%d.%d\r\n", gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
//	UART_Printf("======================\r\n");

}
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000138 	.word	0x20000138

080017d4 <loopback_tcps_server>:
/////////////////////////////////////////////////////////////

int32_t loopback_tcps_server(uint8_t sn, uint8_t* buf, uint16_t port)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	6039      	str	r1, [r7, #0]
 80017de:	71fb      	strb	r3, [r7, #7]
 80017e0:	4613      	mov	r3, r2
 80017e2:	80bb      	strh	r3, [r7, #4]
   int32_t ret;
   uint16_t size = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	81fb      	strh	r3, [r7, #14]
   uint8_t startSendidngFlag = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	737b      	strb	r3, [r7, #13]

   switch(getSn_SR(sn))   //Проверить состояние сокета sn
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	3301      	adds	r3, #1
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80017f8:	4618      	mov	r0, r3
 80017fa:	f002 fedb 	bl	80045b4 <WIZCHIP_READ>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b1c      	cmp	r3, #28
 8001802:	f200 80a1 	bhi.w	8001948 <loopback_tcps_server+0x174>
 8001806:	a201      	add	r2, pc, #4	; (adr r2, 800180c <loopback_tcps_server+0x38>)
 8001808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800180c:	08001917 	.word	0x08001917
 8001810:	08001949 	.word	0x08001949
 8001814:	08001949 	.word	0x08001949
 8001818:	08001949 	.word	0x08001949
 800181c:	08001949 	.word	0x08001949
 8001820:	08001949 	.word	0x08001949
 8001824:	08001949 	.word	0x08001949
 8001828:	08001949 	.word	0x08001949
 800182c:	08001949 	.word	0x08001949
 8001830:	08001949 	.word	0x08001949
 8001834:	08001949 	.word	0x08001949
 8001838:	08001949 	.word	0x08001949
 800183c:	08001949 	.word	0x08001949
 8001840:	08001949 	.word	0x08001949
 8001844:	08001949 	.word	0x08001949
 8001848:	08001949 	.word	0x08001949
 800184c:	08001949 	.word	0x08001949
 8001850:	08001949 	.word	0x08001949
 8001854:	08001949 	.word	0x08001949
 8001858:	08001901 	.word	0x08001901
 800185c:	08001949 	.word	0x08001949
 8001860:	08001949 	.word	0x08001949
 8001864:	08001949 	.word	0x08001949
 8001868:	08001881 	.word	0x08001881
 800186c:	08001949 	.word	0x08001949
 8001870:	08001949 	.word	0x08001949
 8001874:	08001949 	.word	0x08001949
 8001878:	08001949 	.word	0x08001949
 800187c:	080018eb 	.word	0x080018eb
   {

      case SOCK_ESTABLISHED :

    	 /* Check physical state cabel Ethernet */
    	 if((getPHYCFGR() & PHYCFGR_LNK_ON)== 0)
 8001880:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001884:	f002 fe96 	bl	80045b4 <WIZCHIP_READ>
 8001888:	4603      	mov	r3, r0
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b00      	cmp	r3, #0
 8001890:	d103      	bne.n	800189a <loopback_tcps_server+0xc6>
    	 {
    	     close(sn);
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	4618      	mov	r0, r3
 8001896:	f003 f9ef 	bl	8004c78 <close>
    	 }
		 /* Check If new client Connected */
         if(getSn_IR(sn) & Sn_IR_CON)
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	3301      	adds	r3, #1
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80018a6:	4618      	mov	r0, r3
 80018a8:	f002 fe84 	bl	80045b4 <WIZCHIP_READ>
 80018ac:	4603      	mov	r3, r0
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d009      	beq.n	80018ca <loopback_tcps_server+0xf6>
         {
        	// UART_Printf("%d:Connected\r\n",sn);
            setSn_IR(sn,Sn_IR_CON);
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	3301      	adds	r3, #1
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80018c2:	2101      	movs	r1, #1
 80018c4:	4618      	mov	r0, r3
 80018c6:	f002 fec1 	bl	800464c <WIZCHIP_WRITE>
         /* Recv data */
         //------------------------------------------------------------//
         //-------------- Example Mirror ------------------------------//
         //------------------------------------------------------------//
         /* Receive data */
         if((size = getSn_RX_RSR(sn)) > 0)
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f003 f816 	bl	80048fe <getSn_RX_RSR>
 80018d2:	4603      	mov	r3, r0
 80018d4:	81fb      	strh	r3, [r7, #14]
 80018d6:	89fb      	ldrh	r3, [r7, #14]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d037      	beq.n	800194c <loopback_tcps_server+0x178>
         {
        	 send(sn, buf, sizeof buf);
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	2204      	movs	r2, #4
 80018e0:	6839      	ldr	r1, [r7, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f003 fb06 	bl	8004ef4 <send>
         }


//------------------------------------------------------------//
         break;
 80018e8:	e030      	b.n	800194c <loopback_tcps_server+0x178>

      case SOCK_CLOSE_WAIT :

         if((ret=disconnect(sn)) != SOCK_OK) return ret;
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f003 fa8b 	bl	8004e08 <disconnect>
 80018f2:	4603      	mov	r3, r0
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d029      	beq.n	8001950 <loopback_tcps_server+0x17c>
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	e02b      	b.n	8001958 <loopback_tcps_server+0x184>

         break;

      case SOCK_INIT :

         if( (ret = listen(sn)) != SOCK_OK) return ret;  //слушаем сокет
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	4618      	mov	r0, r3
 8001904:	f003 fa26 	bl	8004d54 <listen>
 8001908:	4603      	mov	r3, r0
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d020      	beq.n	8001954 <loopback_tcps_server+0x180>
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	e020      	b.n	8001958 <loopback_tcps_server+0x184>

         break;
      case SOCK_CLOSED:
    	  if((ret=socket(sn,Sn_MR_TCP,port,0x00)) != sn)  return ret;
 8001916:	88ba      	ldrh	r2, [r7, #4]
 8001918:	79f8      	ldrb	r0, [r7, #7]
 800191a:	2300      	movs	r3, #0
 800191c:	2101      	movs	r1, #1
 800191e:	f003 f895 	bl	8004a4c <socket>
 8001922:	4603      	mov	r3, r0
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	68ba      	ldr	r2, [r7, #8]
 800192a:	429a      	cmp	r2, r3
 800192c:	d001      	beq.n	8001932 <loopback_tcps_server+0x15e>
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	e012      	b.n	8001958 <loopback_tcps_server+0x184>
    	  // UART_Printf("%d:Opened\r\n",sn);
		  //UART_Printf("%d:LBTStart\r\n");

		  setSn_KPALVTR(sn, 10);
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	3301      	adds	r3, #1
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800193e:	210a      	movs	r1, #10
 8001940:	4618      	mov	r0, r3
 8001942:	f002 fe83 	bl	800464c <WIZCHIP_WRITE>

         break;
 8001946:	e006      	b.n	8001956 <loopback_tcps_server+0x182>
      default:
         break;
 8001948:	bf00      	nop
 800194a:	e004      	b.n	8001956 <loopback_tcps_server+0x182>
         break;
 800194c:	bf00      	nop
 800194e:	e002      	b.n	8001956 <loopback_tcps_server+0x182>
         break;
 8001950:	bf00      	nop
 8001952:	e000      	b.n	8001956 <loopback_tcps_server+0x182>
         break;
 8001954:	bf00      	nop
   }
   return 1;
 8001956:	2301      	movs	r3, #1
}
 8001958:	4618      	mov	r0, r3
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001960:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001998 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001964:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001966:	e003      	b.n	8001970 <LoopCopyDataInit>

08001968 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800196a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800196c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800196e:	3104      	adds	r1, #4

08001970 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001970:	480b      	ldr	r0, [pc, #44]	; (80019a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001972:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001974:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001976:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001978:	d3f6      	bcc.n	8001968 <CopyDataInit>
  ldr  r2, =_sbss
 800197a:	4a0b      	ldr	r2, [pc, #44]	; (80019a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800197c:	e002      	b.n	8001984 <LoopFillZerobss>

0800197e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800197e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001980:	f842 3b04 	str.w	r3, [r2], #4

08001984 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001984:	4b09      	ldr	r3, [pc, #36]	; (80019ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001986:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001988:	d3f9      	bcc.n	800197e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800198a:	f7ff fdf1 	bl	8001570 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800198e:	f004 f93d 	bl	8005c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001992:	f7fe fd99 	bl	80004c8 <main>
  bx  lr    
 8001996:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001998:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800199c:	08005ca4 	.word	0x08005ca4
  ldr  r0, =_sdata
 80019a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019a4:	20000184 	.word	0x20000184
  ldr  r2, =_sbss
 80019a8:	20000184 	.word	0x20000184
  ldr  r3, = _ebss
 80019ac:	200004bc 	.word	0x200004bc

080019b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019b0:	e7fe      	b.n	80019b0 <ADC_IRQHandler>
	...

080019b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019b8:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <HAL_Init+0x40>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a0d      	ldr	r2, [pc, #52]	; (80019f4 <HAL_Init+0x40>)
 80019be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019c4:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <HAL_Init+0x40>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <HAL_Init+0x40>)
 80019ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <HAL_Init+0x40>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a07      	ldr	r2, [pc, #28]	; (80019f4 <HAL_Init+0x40>)
 80019d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019dc:	2003      	movs	r0, #3
 80019de:	f000 f92b 	bl	8001c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019e2:	2000      	movs	r0, #0
 80019e4:	f000 f808 	bl	80019f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019e8:	f7ff f978 	bl	8000cdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40023c00 	.word	0x40023c00

080019f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <HAL_InitTick+0x54>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_InitTick+0x58>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 f943 	bl	8001ca2 <HAL_SYSTICK_Config>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e00e      	b.n	8001a44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b0f      	cmp	r3, #15
 8001a2a:	d80a      	bhi.n	8001a42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	f04f 30ff 	mov.w	r0, #4294967295
 8001a34:	f000 f90b 	bl	8001c4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a38:	4a06      	ldr	r2, [pc, #24]	; (8001a54 <HAL_InitTick+0x5c>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e000      	b.n	8001a44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20000134 	.word	0x20000134
 8001a50:	20000154 	.word	0x20000154
 8001a54:	20000150 	.word	0x20000150

08001a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_IncTick+0x20>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_IncTick+0x24>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4413      	add	r3, r2
 8001a68:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <HAL_IncTick+0x24>)
 8001a6a:	6013      	str	r3, [r2, #0]
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	20000154 	.word	0x20000154
 8001a7c:	200004b8 	.word	0x200004b8

08001a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return uwTick;
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <HAL_GetTick+0x14>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	200004b8 	.word	0x200004b8

08001a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <__NVIC_SetPriorityGrouping+0x44>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aca:	4a04      	ldr	r2, [pc, #16]	; (8001adc <__NVIC_SetPriorityGrouping+0x44>)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	60d3      	str	r3, [r2, #12]
}
 8001ad0:	bf00      	nop
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae4:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	0a1b      	lsrs	r3, r3, #8
 8001aea:	f003 0307 	and.w	r3, r3, #7
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	db0b      	blt.n	8001b26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	f003 021f 	and.w	r2, r3, #31
 8001b14:	4907      	ldr	r1, [pc, #28]	; (8001b34 <__NVIC_EnableIRQ+0x38>)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	095b      	lsrs	r3, r3, #5
 8001b1c:	2001      	movs	r0, #1
 8001b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	e000e100 	.word	0xe000e100

08001b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	6039      	str	r1, [r7, #0]
 8001b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	db0a      	blt.n	8001b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	490c      	ldr	r1, [pc, #48]	; (8001b84 <__NVIC_SetPriority+0x4c>)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	0112      	lsls	r2, r2, #4
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b60:	e00a      	b.n	8001b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	4908      	ldr	r1, [pc, #32]	; (8001b88 <__NVIC_SetPriority+0x50>)
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	3b04      	subs	r3, #4
 8001b70:	0112      	lsls	r2, r2, #4
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	440b      	add	r3, r1
 8001b76:	761a      	strb	r2, [r3, #24]
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000e100 	.word	0xe000e100
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b089      	sub	sp, #36	; 0x24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f1c3 0307 	rsb	r3, r3, #7
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	bf28      	it	cs
 8001baa:	2304      	movcs	r3, #4
 8001bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	2b06      	cmp	r3, #6
 8001bb4:	d902      	bls.n	8001bbc <NVIC_EncodePriority+0x30>
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3b03      	subs	r3, #3
 8001bba:	e000      	b.n	8001bbe <NVIC_EncodePriority+0x32>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43da      	mvns	r2, r3
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	401a      	ands	r2, r3
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	fa01 f303 	lsl.w	r3, r1, r3
 8001bde:	43d9      	mvns	r1, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be4:	4313      	orrs	r3, r2
         );
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3724      	adds	r7, #36	; 0x24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c04:	d301      	bcc.n	8001c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c06:	2301      	movs	r3, #1
 8001c08:	e00f      	b.n	8001c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	; (8001c34 <SysTick_Config+0x40>)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c12:	210f      	movs	r1, #15
 8001c14:	f04f 30ff 	mov.w	r0, #4294967295
 8001c18:	f7ff ff8e 	bl	8001b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <SysTick_Config+0x40>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c22:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <SysTick_Config+0x40>)
 8001c24:	2207      	movs	r2, #7
 8001c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	e000e010 	.word	0xe000e010

08001c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff ff29 	bl	8001a98 <__NVIC_SetPriorityGrouping>
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b086      	sub	sp, #24
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	4603      	mov	r3, r0
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	607a      	str	r2, [r7, #4]
 8001c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c60:	f7ff ff3e 	bl	8001ae0 <__NVIC_GetPriorityGrouping>
 8001c64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	68b9      	ldr	r1, [r7, #8]
 8001c6a:	6978      	ldr	r0, [r7, #20]
 8001c6c:	f7ff ff8e 	bl	8001b8c <NVIC_EncodePriority>
 8001c70:	4602      	mov	r2, r0
 8001c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c76:	4611      	mov	r1, r2
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff5d 	bl	8001b38 <__NVIC_SetPriority>
}
 8001c7e:	bf00      	nop
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ff31 	bl	8001afc <__NVIC_EnableIRQ>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff ffa2 	bl	8001bf4 <SysTick_Config>
 8001cb0:	4603      	mov	r3, r0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
	...

08001cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b089      	sub	sp, #36	; 0x24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
 8001cd6:	e16b      	b.n	8001fb0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cd8:	2201      	movs	r2, #1
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	f040 815a 	bne.w	8001faa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d00b      	beq.n	8001d16 <HAL_GPIO_Init+0x5a>
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d007      	beq.n	8001d16 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d0a:	2b11      	cmp	r3, #17
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b12      	cmp	r3, #18
 8001d14:	d130      	bne.n	8001d78 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	2203      	movs	r2, #3
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	091b      	lsrs	r3, r3, #4
 8001d62:	f003 0201 	and.w	r2, r3, #1
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	2203      	movs	r2, #3
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_Init+0xfc>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b12      	cmp	r3, #18
 8001db6:	d123      	bne.n	8001e00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	08da      	lsrs	r2, r3, #3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3208      	adds	r2, #8
 8001dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	220f      	movs	r2, #15
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	691a      	ldr	r2, [r3, #16]
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	08da      	lsrs	r2, r3, #3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3208      	adds	r2, #8
 8001dfa:	69b9      	ldr	r1, [r7, #24]
 8001dfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 0203 	and.w	r2, r3, #3
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f000 80b4 	beq.w	8001faa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	4b5f      	ldr	r3, [pc, #380]	; (8001fc4 <HAL_GPIO_Init+0x308>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	4a5e      	ldr	r2, [pc, #376]	; (8001fc4 <HAL_GPIO_Init+0x308>)
 8001e4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e50:	6453      	str	r3, [r2, #68]	; 0x44
 8001e52:	4b5c      	ldr	r3, [pc, #368]	; (8001fc4 <HAL_GPIO_Init+0x308>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e5e:	4a5a      	ldr	r2, [pc, #360]	; (8001fc8 <HAL_GPIO_Init+0x30c>)
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	089b      	lsrs	r3, r3, #2
 8001e64:	3302      	adds	r3, #2
 8001e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	220f      	movs	r2, #15
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a51      	ldr	r2, [pc, #324]	; (8001fcc <HAL_GPIO_Init+0x310>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d02b      	beq.n	8001ee2 <HAL_GPIO_Init+0x226>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a50      	ldr	r2, [pc, #320]	; (8001fd0 <HAL_GPIO_Init+0x314>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d025      	beq.n	8001ede <HAL_GPIO_Init+0x222>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a4f      	ldr	r2, [pc, #316]	; (8001fd4 <HAL_GPIO_Init+0x318>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d01f      	beq.n	8001eda <HAL_GPIO_Init+0x21e>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a4e      	ldr	r2, [pc, #312]	; (8001fd8 <HAL_GPIO_Init+0x31c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d019      	beq.n	8001ed6 <HAL_GPIO_Init+0x21a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a4d      	ldr	r2, [pc, #308]	; (8001fdc <HAL_GPIO_Init+0x320>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d013      	beq.n	8001ed2 <HAL_GPIO_Init+0x216>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a4c      	ldr	r2, [pc, #304]	; (8001fe0 <HAL_GPIO_Init+0x324>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d00d      	beq.n	8001ece <HAL_GPIO_Init+0x212>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a4b      	ldr	r2, [pc, #300]	; (8001fe4 <HAL_GPIO_Init+0x328>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d007      	beq.n	8001eca <HAL_GPIO_Init+0x20e>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a4a      	ldr	r2, [pc, #296]	; (8001fe8 <HAL_GPIO_Init+0x32c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d101      	bne.n	8001ec6 <HAL_GPIO_Init+0x20a>
 8001ec2:	2307      	movs	r3, #7
 8001ec4:	e00e      	b.n	8001ee4 <HAL_GPIO_Init+0x228>
 8001ec6:	2308      	movs	r3, #8
 8001ec8:	e00c      	b.n	8001ee4 <HAL_GPIO_Init+0x228>
 8001eca:	2306      	movs	r3, #6
 8001ecc:	e00a      	b.n	8001ee4 <HAL_GPIO_Init+0x228>
 8001ece:	2305      	movs	r3, #5
 8001ed0:	e008      	b.n	8001ee4 <HAL_GPIO_Init+0x228>
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	e006      	b.n	8001ee4 <HAL_GPIO_Init+0x228>
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e004      	b.n	8001ee4 <HAL_GPIO_Init+0x228>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e002      	b.n	8001ee4 <HAL_GPIO_Init+0x228>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <HAL_GPIO_Init+0x228>
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	69fa      	ldr	r2, [r7, #28]
 8001ee6:	f002 0203 	and.w	r2, r2, #3
 8001eea:	0092      	lsls	r2, r2, #2
 8001eec:	4093      	lsls	r3, r2
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ef4:	4934      	ldr	r1, [pc, #208]	; (8001fc8 <HAL_GPIO_Init+0x30c>)
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	089b      	lsrs	r3, r3, #2
 8001efa:	3302      	adds	r3, #2
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f02:	4b3a      	ldr	r3, [pc, #232]	; (8001fec <HAL_GPIO_Init+0x330>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f26:	4a31      	ldr	r2, [pc, #196]	; (8001fec <HAL_GPIO_Init+0x330>)
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f2c:	4b2f      	ldr	r3, [pc, #188]	; (8001fec <HAL_GPIO_Init+0x330>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f50:	4a26      	ldr	r2, [pc, #152]	; (8001fec <HAL_GPIO_Init+0x330>)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f56:	4b25      	ldr	r3, [pc, #148]	; (8001fec <HAL_GPIO_Init+0x330>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4013      	ands	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f7a:	4a1c      	ldr	r2, [pc, #112]	; (8001fec <HAL_GPIO_Init+0x330>)
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f80:	4b1a      	ldr	r3, [pc, #104]	; (8001fec <HAL_GPIO_Init+0x330>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fa4:	4a11      	ldr	r2, [pc, #68]	; (8001fec <HAL_GPIO_Init+0x330>)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3301      	adds	r3, #1
 8001fae:	61fb      	str	r3, [r7, #28]
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	2b0f      	cmp	r3, #15
 8001fb4:	f67f ae90 	bls.w	8001cd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fb8:	bf00      	nop
 8001fba:	3724      	adds	r7, #36	; 0x24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40013800 	.word	0x40013800
 8001fcc:	40020000 	.word	0x40020000
 8001fd0:	40020400 	.word	0x40020400
 8001fd4:	40020800 	.word	0x40020800
 8001fd8:	40020c00 	.word	0x40020c00
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40021400 	.word	0x40021400
 8001fe4:	40021800 	.word	0x40021800
 8001fe8:	40021c00 	.word	0x40021c00
 8001fec:	40013c00 	.word	0x40013c00

08001ff0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002002:	2300      	movs	r3, #0
 8002004:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	e0cd      	b.n	80021a8 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800200c:	2201      	movs	r2, #1
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4013      	ands	r3, r2
 800201c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	429a      	cmp	r2, r3
 8002024:	f040 80bd 	bne.w	80021a2 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002028:	4a64      	ldr	r2, [pc, #400]	; (80021bc <HAL_GPIO_DeInit+0x1cc>)
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	089b      	lsrs	r3, r3, #2
 800202e:	3302      	adds	r3, #2
 8002030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002034:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	220f      	movs	r2, #15
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	4013      	ands	r3, r2
 8002048:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a5c      	ldr	r2, [pc, #368]	; (80021c0 <HAL_GPIO_DeInit+0x1d0>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d02b      	beq.n	80020aa <HAL_GPIO_DeInit+0xba>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a5b      	ldr	r2, [pc, #364]	; (80021c4 <HAL_GPIO_DeInit+0x1d4>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d025      	beq.n	80020a6 <HAL_GPIO_DeInit+0xb6>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a5a      	ldr	r2, [pc, #360]	; (80021c8 <HAL_GPIO_DeInit+0x1d8>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d01f      	beq.n	80020a2 <HAL_GPIO_DeInit+0xb2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a59      	ldr	r2, [pc, #356]	; (80021cc <HAL_GPIO_DeInit+0x1dc>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d019      	beq.n	800209e <HAL_GPIO_DeInit+0xae>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a58      	ldr	r2, [pc, #352]	; (80021d0 <HAL_GPIO_DeInit+0x1e0>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d013      	beq.n	800209a <HAL_GPIO_DeInit+0xaa>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a57      	ldr	r2, [pc, #348]	; (80021d4 <HAL_GPIO_DeInit+0x1e4>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d00d      	beq.n	8002096 <HAL_GPIO_DeInit+0xa6>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a56      	ldr	r2, [pc, #344]	; (80021d8 <HAL_GPIO_DeInit+0x1e8>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d007      	beq.n	8002092 <HAL_GPIO_DeInit+0xa2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a55      	ldr	r2, [pc, #340]	; (80021dc <HAL_GPIO_DeInit+0x1ec>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d101      	bne.n	800208e <HAL_GPIO_DeInit+0x9e>
 800208a:	2307      	movs	r3, #7
 800208c:	e00e      	b.n	80020ac <HAL_GPIO_DeInit+0xbc>
 800208e:	2308      	movs	r3, #8
 8002090:	e00c      	b.n	80020ac <HAL_GPIO_DeInit+0xbc>
 8002092:	2306      	movs	r3, #6
 8002094:	e00a      	b.n	80020ac <HAL_GPIO_DeInit+0xbc>
 8002096:	2305      	movs	r3, #5
 8002098:	e008      	b.n	80020ac <HAL_GPIO_DeInit+0xbc>
 800209a:	2304      	movs	r3, #4
 800209c:	e006      	b.n	80020ac <HAL_GPIO_DeInit+0xbc>
 800209e:	2303      	movs	r3, #3
 80020a0:	e004      	b.n	80020ac <HAL_GPIO_DeInit+0xbc>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e002      	b.n	80020ac <HAL_GPIO_DeInit+0xbc>
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <HAL_GPIO_DeInit+0xbc>
 80020aa:	2300      	movs	r3, #0
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	f002 0203 	and.w	r2, r2, #3
 80020b2:	0092      	lsls	r2, r2, #2
 80020b4:	4093      	lsls	r3, r2
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d132      	bne.n	8002122 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80020bc:	4b48      	ldr	r3, [pc, #288]	; (80021e0 <HAL_GPIO_DeInit+0x1f0>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	4946      	ldr	r1, [pc, #280]	; (80021e0 <HAL_GPIO_DeInit+0x1f0>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80020ca:	4b45      	ldr	r3, [pc, #276]	; (80021e0 <HAL_GPIO_DeInit+0x1f0>)
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	4943      	ldr	r1, [pc, #268]	; (80021e0 <HAL_GPIO_DeInit+0x1f0>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80020d8:	4b41      	ldr	r3, [pc, #260]	; (80021e0 <HAL_GPIO_DeInit+0x1f0>)
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	43db      	mvns	r3, r3
 80020e0:	493f      	ldr	r1, [pc, #252]	; (80021e0 <HAL_GPIO_DeInit+0x1f0>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80020e6:	4b3e      	ldr	r3, [pc, #248]	; (80021e0 <HAL_GPIO_DeInit+0x1f0>)
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	493c      	ldr	r1, [pc, #240]	; (80021e0 <HAL_GPIO_DeInit+0x1f0>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	220f      	movs	r2, #15
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002104:	4a2d      	ldr	r2, [pc, #180]	; (80021bc <HAL_GPIO_DeInit+0x1cc>)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	089b      	lsrs	r3, r3, #2
 800210a:	3302      	adds	r3, #2
 800210c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	43da      	mvns	r2, r3
 8002114:	4829      	ldr	r0, [pc, #164]	; (80021bc <HAL_GPIO_DeInit+0x1cc>)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	089b      	lsrs	r3, r3, #2
 800211a:	400a      	ands	r2, r1
 800211c:	3302      	adds	r3, #2
 800211e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	2103      	movs	r1, #3
 800212c:	fa01 f303 	lsl.w	r3, r1, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	401a      	ands	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	08da      	lsrs	r2, r3, #3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3208      	adds	r2, #8
 8002140:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	220f      	movs	r2, #15
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	08d2      	lsrs	r2, r2, #3
 8002158:	4019      	ands	r1, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3208      	adds	r2, #8
 800215e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	2103      	movs	r1, #3
 800216c:	fa01 f303 	lsl.w	r3, r1, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	401a      	ands	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	2101      	movs	r1, #1
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	fa01 f303 	lsl.w	r3, r1, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	401a      	ands	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	2103      	movs	r1, #3
 8002196:	fa01 f303 	lsl.w	r3, r1, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	401a      	ands	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	3301      	adds	r3, #1
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	2b0f      	cmp	r3, #15
 80021ac:	f67f af2e 	bls.w	800200c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80021b0:	bf00      	nop
 80021b2:	371c      	adds	r7, #28
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	40013800 	.word	0x40013800
 80021c0:	40020000 	.word	0x40020000
 80021c4:	40020400 	.word	0x40020400
 80021c8:	40020800 	.word	0x40020800
 80021cc:	40020c00 	.word	0x40020c00
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40021400 	.word	0x40021400
 80021d8:	40021800 	.word	0x40021800
 80021dc:	40021c00 	.word	0x40021c00
 80021e0:	40013c00 	.word	0x40013c00

080021e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	807b      	strh	r3, [r7, #2]
 80021f0:	4613      	mov	r3, r2
 80021f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021f4:	787b      	ldrb	r3, [r7, #1]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021fa:	887a      	ldrh	r2, [r7, #2]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002200:	e003      	b.n	800220a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002202:	887b      	ldrh	r3, [r7, #2]
 8002204:	041a      	lsls	r2, r3, #16
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	619a      	str	r2, [r3, #24]
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002222:	4b08      	ldr	r3, [pc, #32]	; (8002244 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002224:	695a      	ldr	r2, [r3, #20]
 8002226:	88fb      	ldrh	r3, [r7, #6]
 8002228:	4013      	ands	r3, r2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d006      	beq.n	800223c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800222e:	4a05      	ldr	r2, [pc, #20]	; (8002244 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002230:	88fb      	ldrh	r3, [r7, #6]
 8002232:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002234:	88fb      	ldrh	r3, [r7, #6]
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe ff3a 	bl	80010b0 <HAL_GPIO_EXTI_Callback>
  }
}
 800223c:	bf00      	nop
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40013c00 	.word	0x40013c00

08002248 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e25b      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d075      	beq.n	8002352 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002266:	4ba3      	ldr	r3, [pc, #652]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 030c 	and.w	r3, r3, #12
 800226e:	2b04      	cmp	r3, #4
 8002270:	d00c      	beq.n	800228c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002272:	4ba0      	ldr	r3, [pc, #640]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800227a:	2b08      	cmp	r3, #8
 800227c:	d112      	bne.n	80022a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800227e:	4b9d      	ldr	r3, [pc, #628]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002286:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800228a:	d10b      	bne.n	80022a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800228c:	4b99      	ldr	r3, [pc, #612]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d05b      	beq.n	8002350 <HAL_RCC_OscConfig+0x108>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d157      	bne.n	8002350 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e236      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ac:	d106      	bne.n	80022bc <HAL_RCC_OscConfig+0x74>
 80022ae:	4b91      	ldr	r3, [pc, #580]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a90      	ldr	r2, [pc, #576]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80022b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	e01d      	b.n	80022f8 <HAL_RCC_OscConfig+0xb0>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022c4:	d10c      	bne.n	80022e0 <HAL_RCC_OscConfig+0x98>
 80022c6:	4b8b      	ldr	r3, [pc, #556]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a8a      	ldr	r2, [pc, #552]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80022cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	4b88      	ldr	r3, [pc, #544]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a87      	ldr	r2, [pc, #540]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80022d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	e00b      	b.n	80022f8 <HAL_RCC_OscConfig+0xb0>
 80022e0:	4b84      	ldr	r3, [pc, #528]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a83      	ldr	r2, [pc, #524]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80022e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	4b81      	ldr	r3, [pc, #516]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a80      	ldr	r2, [pc, #512]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80022f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d013      	beq.n	8002328 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002300:	f7ff fbbe 	bl	8001a80 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002308:	f7ff fbba 	bl	8001a80 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b64      	cmp	r3, #100	; 0x64
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e1fb      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231a:	4b76      	ldr	r3, [pc, #472]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f0      	beq.n	8002308 <HAL_RCC_OscConfig+0xc0>
 8002326:	e014      	b.n	8002352 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002328:	f7ff fbaa 	bl	8001a80 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002330:	f7ff fba6 	bl	8001a80 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b64      	cmp	r3, #100	; 0x64
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e1e7      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002342:	4b6c      	ldr	r3, [pc, #432]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0xe8>
 800234e:	e000      	b.n	8002352 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d063      	beq.n	8002426 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800235e:	4b65      	ldr	r3, [pc, #404]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00b      	beq.n	8002382 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800236a:	4b62      	ldr	r3, [pc, #392]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002372:	2b08      	cmp	r3, #8
 8002374:	d11c      	bne.n	80023b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002376:	4b5f      	ldr	r3, [pc, #380]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d116      	bne.n	80023b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002382:	4b5c      	ldr	r3, [pc, #368]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d005      	beq.n	800239a <HAL_RCC_OscConfig+0x152>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d001      	beq.n	800239a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e1bb      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800239a:	4b56      	ldr	r3, [pc, #344]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	4952      	ldr	r1, [pc, #328]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ae:	e03a      	b.n	8002426 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d020      	beq.n	80023fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023b8:	4b4f      	ldr	r3, [pc, #316]	; (80024f8 <HAL_RCC_OscConfig+0x2b0>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023be:	f7ff fb5f 	bl	8001a80 <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023c6:	f7ff fb5b 	bl	8001a80 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e19c      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d8:	4b46      	ldr	r3, [pc, #280]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0f0      	beq.n	80023c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e4:	4b43      	ldr	r3, [pc, #268]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	4940      	ldr	r1, [pc, #256]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	600b      	str	r3, [r1, #0]
 80023f8:	e015      	b.n	8002426 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023fa:	4b3f      	ldr	r3, [pc, #252]	; (80024f8 <HAL_RCC_OscConfig+0x2b0>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002400:	f7ff fb3e 	bl	8001a80 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002408:	f7ff fb3a 	bl	8001a80 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e17b      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800241a:	4b36      	ldr	r3, [pc, #216]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f0      	bne.n	8002408 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d030      	beq.n	8002494 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d016      	beq.n	8002468 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800243a:	4b30      	ldr	r3, [pc, #192]	; (80024fc <HAL_RCC_OscConfig+0x2b4>)
 800243c:	2201      	movs	r2, #1
 800243e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002440:	f7ff fb1e 	bl	8001a80 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002448:	f7ff fb1a 	bl	8001a80 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e15b      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800245a:	4b26      	ldr	r3, [pc, #152]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 800245c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f0      	beq.n	8002448 <HAL_RCC_OscConfig+0x200>
 8002466:	e015      	b.n	8002494 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002468:	4b24      	ldr	r3, [pc, #144]	; (80024fc <HAL_RCC_OscConfig+0x2b4>)
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246e:	f7ff fb07 	bl	8001a80 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002476:	f7ff fb03 	bl	8001a80 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e144      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002488:	4b1a      	ldr	r3, [pc, #104]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 800248a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1f0      	bne.n	8002476 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 80a0 	beq.w	80025e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a2:	2300      	movs	r3, #0
 80024a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024a6:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10f      	bne.n	80024d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	4b0f      	ldr	r3, [pc, #60]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	4a0e      	ldr	r2, [pc, #56]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80024bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c0:	6413      	str	r3, [r2, #64]	; 0x40
 80024c2:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ce:	2301      	movs	r3, #1
 80024d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d2:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <HAL_RCC_OscConfig+0x2b8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d121      	bne.n	8002522 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024de:	4b08      	ldr	r3, [pc, #32]	; (8002500 <HAL_RCC_OscConfig+0x2b8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a07      	ldr	r2, [pc, #28]	; (8002500 <HAL_RCC_OscConfig+0x2b8>)
 80024e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ea:	f7ff fac9 	bl	8001a80 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f0:	e011      	b.n	8002516 <HAL_RCC_OscConfig+0x2ce>
 80024f2:	bf00      	nop
 80024f4:	40023800 	.word	0x40023800
 80024f8:	42470000 	.word	0x42470000
 80024fc:	42470e80 	.word	0x42470e80
 8002500:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002504:	f7ff fabc 	bl	8001a80 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e0fd      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002516:	4b81      	ldr	r3, [pc, #516]	; (800271c <HAL_RCC_OscConfig+0x4d4>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f0      	beq.n	8002504 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d106      	bne.n	8002538 <HAL_RCC_OscConfig+0x2f0>
 800252a:	4b7d      	ldr	r3, [pc, #500]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 800252c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252e:	4a7c      	ldr	r2, [pc, #496]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	6713      	str	r3, [r2, #112]	; 0x70
 8002536:	e01c      	b.n	8002572 <HAL_RCC_OscConfig+0x32a>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	2b05      	cmp	r3, #5
 800253e:	d10c      	bne.n	800255a <HAL_RCC_OscConfig+0x312>
 8002540:	4b77      	ldr	r3, [pc, #476]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 8002542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002544:	4a76      	ldr	r2, [pc, #472]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 8002546:	f043 0304 	orr.w	r3, r3, #4
 800254a:	6713      	str	r3, [r2, #112]	; 0x70
 800254c:	4b74      	ldr	r3, [pc, #464]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 800254e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002550:	4a73      	ldr	r2, [pc, #460]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	6713      	str	r3, [r2, #112]	; 0x70
 8002558:	e00b      	b.n	8002572 <HAL_RCC_OscConfig+0x32a>
 800255a:	4b71      	ldr	r3, [pc, #452]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 800255c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255e:	4a70      	ldr	r2, [pc, #448]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 8002560:	f023 0301 	bic.w	r3, r3, #1
 8002564:	6713      	str	r3, [r2, #112]	; 0x70
 8002566:	4b6e      	ldr	r3, [pc, #440]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256a:	4a6d      	ldr	r2, [pc, #436]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 800256c:	f023 0304 	bic.w	r3, r3, #4
 8002570:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d015      	beq.n	80025a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257a:	f7ff fa81 	bl	8001a80 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002580:	e00a      	b.n	8002598 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002582:	f7ff fa7d 	bl	8001a80 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002590:	4293      	cmp	r3, r2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e0bc      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002598:	4b61      	ldr	r3, [pc, #388]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 800259a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0ee      	beq.n	8002582 <HAL_RCC_OscConfig+0x33a>
 80025a4:	e014      	b.n	80025d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a6:	f7ff fa6b 	bl	8001a80 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ac:	e00a      	b.n	80025c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ae:	f7ff fa67 	bl	8001a80 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025bc:	4293      	cmp	r3, r2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e0a6      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c4:	4b56      	ldr	r3, [pc, #344]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 80025c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1ee      	bne.n	80025ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025d0:	7dfb      	ldrb	r3, [r7, #23]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d105      	bne.n	80025e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d6:	4b52      	ldr	r3, [pc, #328]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	4a51      	ldr	r2, [pc, #324]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 80025dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 8092 	beq.w	8002710 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025ec:	4b4c      	ldr	r3, [pc, #304]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 030c 	and.w	r3, r3, #12
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d05c      	beq.n	80026b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d141      	bne.n	8002684 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002600:	4b48      	ldr	r3, [pc, #288]	; (8002724 <HAL_RCC_OscConfig+0x4dc>)
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002606:	f7ff fa3b 	bl	8001a80 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800260e:	f7ff fa37 	bl	8001a80 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e078      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002620:	4b3f      	ldr	r3, [pc, #252]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f0      	bne.n	800260e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69da      	ldr	r2, [r3, #28]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	019b      	lsls	r3, r3, #6
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002642:	085b      	lsrs	r3, r3, #1
 8002644:	3b01      	subs	r3, #1
 8002646:	041b      	lsls	r3, r3, #16
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264e:	061b      	lsls	r3, r3, #24
 8002650:	4933      	ldr	r1, [pc, #204]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 8002652:	4313      	orrs	r3, r2
 8002654:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002656:	4b33      	ldr	r3, [pc, #204]	; (8002724 <HAL_RCC_OscConfig+0x4dc>)
 8002658:	2201      	movs	r2, #1
 800265a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265c:	f7ff fa10 	bl	8001a80 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002664:	f7ff fa0c 	bl	8001a80 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e04d      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002676:	4b2a      	ldr	r3, [pc, #168]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0x41c>
 8002682:	e045      	b.n	8002710 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002684:	4b27      	ldr	r3, [pc, #156]	; (8002724 <HAL_RCC_OscConfig+0x4dc>)
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268a:	f7ff f9f9 	bl	8001a80 <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002692:	f7ff f9f5 	bl	8001a80 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e036      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a4:	4b1e      	ldr	r3, [pc, #120]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1f0      	bne.n	8002692 <HAL_RCC_OscConfig+0x44a>
 80026b0:	e02e      	b.n	8002710 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e029      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026be:	4b18      	ldr	r3, [pc, #96]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d11c      	bne.n	800270c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026dc:	429a      	cmp	r2, r3
 80026de:	d115      	bne.n	800270c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026e6:	4013      	ands	r3, r2
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d10d      	bne.n	800270c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d106      	bne.n	800270c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002708:	429a      	cmp	r2, r3
 800270a:	d001      	beq.n	8002710 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e000      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40007000 	.word	0x40007000
 8002720:	40023800 	.word	0x40023800
 8002724:	42470060 	.word	0x42470060

08002728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e0cc      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800273c:	4b68      	ldr	r3, [pc, #416]	; (80028e0 <HAL_RCC_ClockConfig+0x1b8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 030f 	and.w	r3, r3, #15
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d90c      	bls.n	8002764 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274a:	4b65      	ldr	r3, [pc, #404]	; (80028e0 <HAL_RCC_ClockConfig+0x1b8>)
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002752:	4b63      	ldr	r3, [pc, #396]	; (80028e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d001      	beq.n	8002764 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e0b8      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d020      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800277c:	4b59      	ldr	r3, [pc, #356]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	4a58      	ldr	r2, [pc, #352]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002786:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	2b00      	cmp	r3, #0
 8002792:	d005      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002794:	4b53      	ldr	r3, [pc, #332]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	4a52      	ldr	r2, [pc, #328]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 800279a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800279e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a0:	4b50      	ldr	r3, [pc, #320]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	494d      	ldr	r1, [pc, #308]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d044      	beq.n	8002848 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d107      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c6:	4b47      	ldr	r3, [pc, #284]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d119      	bne.n	8002806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e07f      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d003      	beq.n	80027e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027e2:	2b03      	cmp	r3, #3
 80027e4:	d107      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e6:	4b3f      	ldr	r3, [pc, #252]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d109      	bne.n	8002806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e06f      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f6:	4b3b      	ldr	r3, [pc, #236]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e067      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002806:	4b37      	ldr	r3, [pc, #220]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f023 0203 	bic.w	r2, r3, #3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	4934      	ldr	r1, [pc, #208]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002814:	4313      	orrs	r3, r2
 8002816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002818:	f7ff f932 	bl	8001a80 <HAL_GetTick>
 800281c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281e:	e00a      	b.n	8002836 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002820:	f7ff f92e 	bl	8001a80 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	f241 3288 	movw	r2, #5000	; 0x1388
 800282e:	4293      	cmp	r3, r2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e04f      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002836:	4b2b      	ldr	r3, [pc, #172]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 020c 	and.w	r2, r3, #12
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	429a      	cmp	r2, r3
 8002846:	d1eb      	bne.n	8002820 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002848:	4b25      	ldr	r3, [pc, #148]	; (80028e0 <HAL_RCC_ClockConfig+0x1b8>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	429a      	cmp	r2, r3
 8002854:	d20c      	bcs.n	8002870 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002856:	4b22      	ldr	r3, [pc, #136]	; (80028e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800285e:	4b20      	ldr	r3, [pc, #128]	; (80028e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	429a      	cmp	r2, r3
 800286a:	d001      	beq.n	8002870 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e032      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d008      	beq.n	800288e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800287c:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	4916      	ldr	r1, [pc, #88]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 800288a:	4313      	orrs	r3, r2
 800288c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d009      	beq.n	80028ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800289a:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	490e      	ldr	r1, [pc, #56]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028ae:	f000 f821 	bl	80028f4 <HAL_RCC_GetSysClockFreq>
 80028b2:	4601      	mov	r1, r0
 80028b4:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	091b      	lsrs	r3, r3, #4
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <HAL_RCC_ClockConfig+0x1c0>)
 80028c0:	5cd3      	ldrb	r3, [r2, r3]
 80028c2:	fa21 f303 	lsr.w	r3, r1, r3
 80028c6:	4a09      	ldr	r2, [pc, #36]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 80028c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028ca:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <HAL_RCC_ClockConfig+0x1c8>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff f892 	bl	80019f8 <HAL_InitTick>

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40023c00 	.word	0x40023c00
 80028e4:	40023800 	.word	0x40023800
 80028e8:	08005c7c 	.word	0x08005c7c
 80028ec:	20000134 	.word	0x20000134
 80028f0:	20000150 	.word	0x20000150

080028f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	607b      	str	r3, [r7, #4]
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	2300      	movs	r3, #0
 8002904:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800290a:	4b63      	ldr	r3, [pc, #396]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 030c 	and.w	r3, r3, #12
 8002912:	2b04      	cmp	r3, #4
 8002914:	d007      	beq.n	8002926 <HAL_RCC_GetSysClockFreq+0x32>
 8002916:	2b08      	cmp	r3, #8
 8002918:	d008      	beq.n	800292c <HAL_RCC_GetSysClockFreq+0x38>
 800291a:	2b00      	cmp	r3, #0
 800291c:	f040 80b4 	bne.w	8002a88 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002920:	4b5e      	ldr	r3, [pc, #376]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002922:	60bb      	str	r3, [r7, #8]
       break;
 8002924:	e0b3      	b.n	8002a8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002926:	4b5e      	ldr	r3, [pc, #376]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002928:	60bb      	str	r3, [r7, #8]
      break;
 800292a:	e0b0      	b.n	8002a8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800292c:	4b5a      	ldr	r3, [pc, #360]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002934:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002936:	4b58      	ldr	r3, [pc, #352]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d04a      	beq.n	80029d8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002942:	4b55      	ldr	r3, [pc, #340]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	099b      	lsrs	r3, r3, #6
 8002948:	f04f 0400 	mov.w	r4, #0
 800294c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	ea03 0501 	and.w	r5, r3, r1
 8002958:	ea04 0602 	and.w	r6, r4, r2
 800295c:	4629      	mov	r1, r5
 800295e:	4632      	mov	r2, r6
 8002960:	f04f 0300 	mov.w	r3, #0
 8002964:	f04f 0400 	mov.w	r4, #0
 8002968:	0154      	lsls	r4, r2, #5
 800296a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800296e:	014b      	lsls	r3, r1, #5
 8002970:	4619      	mov	r1, r3
 8002972:	4622      	mov	r2, r4
 8002974:	1b49      	subs	r1, r1, r5
 8002976:	eb62 0206 	sbc.w	r2, r2, r6
 800297a:	f04f 0300 	mov.w	r3, #0
 800297e:	f04f 0400 	mov.w	r4, #0
 8002982:	0194      	lsls	r4, r2, #6
 8002984:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002988:	018b      	lsls	r3, r1, #6
 800298a:	1a5b      	subs	r3, r3, r1
 800298c:	eb64 0402 	sbc.w	r4, r4, r2
 8002990:	f04f 0100 	mov.w	r1, #0
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	00e2      	lsls	r2, r4, #3
 800299a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800299e:	00d9      	lsls	r1, r3, #3
 80029a0:	460b      	mov	r3, r1
 80029a2:	4614      	mov	r4, r2
 80029a4:	195b      	adds	r3, r3, r5
 80029a6:	eb44 0406 	adc.w	r4, r4, r6
 80029aa:	f04f 0100 	mov.w	r1, #0
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	0262      	lsls	r2, r4, #9
 80029b4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80029b8:	0259      	lsls	r1, r3, #9
 80029ba:	460b      	mov	r3, r1
 80029bc:	4614      	mov	r4, r2
 80029be:	4618      	mov	r0, r3
 80029c0:	4621      	mov	r1, r4
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f04f 0400 	mov.w	r4, #0
 80029c8:	461a      	mov	r2, r3
 80029ca:	4623      	mov	r3, r4
 80029cc:	f7fd fbfc 	bl	80001c8 <__aeabi_uldivmod>
 80029d0:	4603      	mov	r3, r0
 80029d2:	460c      	mov	r4, r1
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	e049      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029d8:	4b2f      	ldr	r3, [pc, #188]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	099b      	lsrs	r3, r3, #6
 80029de:	f04f 0400 	mov.w	r4, #0
 80029e2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	ea03 0501 	and.w	r5, r3, r1
 80029ee:	ea04 0602 	and.w	r6, r4, r2
 80029f2:	4629      	mov	r1, r5
 80029f4:	4632      	mov	r2, r6
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	f04f 0400 	mov.w	r4, #0
 80029fe:	0154      	lsls	r4, r2, #5
 8002a00:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a04:	014b      	lsls	r3, r1, #5
 8002a06:	4619      	mov	r1, r3
 8002a08:	4622      	mov	r2, r4
 8002a0a:	1b49      	subs	r1, r1, r5
 8002a0c:	eb62 0206 	sbc.w	r2, r2, r6
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	f04f 0400 	mov.w	r4, #0
 8002a18:	0194      	lsls	r4, r2, #6
 8002a1a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a1e:	018b      	lsls	r3, r1, #6
 8002a20:	1a5b      	subs	r3, r3, r1
 8002a22:	eb64 0402 	sbc.w	r4, r4, r2
 8002a26:	f04f 0100 	mov.w	r1, #0
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	00e2      	lsls	r2, r4, #3
 8002a30:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a34:	00d9      	lsls	r1, r3, #3
 8002a36:	460b      	mov	r3, r1
 8002a38:	4614      	mov	r4, r2
 8002a3a:	195b      	adds	r3, r3, r5
 8002a3c:	eb44 0406 	adc.w	r4, r4, r6
 8002a40:	f04f 0100 	mov.w	r1, #0
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	02a2      	lsls	r2, r4, #10
 8002a4a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a4e:	0299      	lsls	r1, r3, #10
 8002a50:	460b      	mov	r3, r1
 8002a52:	4614      	mov	r4, r2
 8002a54:	4618      	mov	r0, r3
 8002a56:	4621      	mov	r1, r4
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f04f 0400 	mov.w	r4, #0
 8002a5e:	461a      	mov	r2, r3
 8002a60:	4623      	mov	r3, r4
 8002a62:	f7fd fbb1 	bl	80001c8 <__aeabi_uldivmod>
 8002a66:	4603      	mov	r3, r0
 8002a68:	460c      	mov	r4, r1
 8002a6a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a6c:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	0c1b      	lsrs	r3, r3, #16
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	3301      	adds	r3, #1
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a84:	60bb      	str	r3, [r7, #8]
      break;
 8002a86:	e002      	b.n	8002a8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a88:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002a8a:	60bb      	str	r3, [r7, #8]
      break;
 8002a8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	00f42400 	.word	0x00f42400
 8002aa0:	007a1200 	.word	0x007a1200

08002aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa8:	4b03      	ldr	r3, [pc, #12]	; (8002ab8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	20000134 	.word	0x20000134

08002abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ac0:	f7ff fff0 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>
 8002ac4:	4601      	mov	r1, r0
 8002ac6:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	0a9b      	lsrs	r3, r3, #10
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	4a03      	ldr	r2, [pc, #12]	; (8002ae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ad2:	5cd3      	ldrb	r3, [r2, r3]
 8002ad4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	08005c8c 	.word	0x08005c8c

08002ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ae8:	f7ff ffdc 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>
 8002aec:	4601      	mov	r1, r0
 8002aee:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	0b5b      	lsrs	r3, r3, #13
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	4a03      	ldr	r2, [pc, #12]	; (8002b08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002afa:	5cd3      	ldrb	r3, [r2, r3]
 8002afc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40023800 	.word	0x40023800
 8002b08:	08005c8c 	.word	0x08005c8c

08002b0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e056      	b.n	8002bcc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d106      	bne.n	8002b3e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7fe f8f7 	bl	8000d2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2202      	movs	r2, #2
 8002b42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b54:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	431a      	orrs	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	431a      	orrs	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	431a      	orrs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	ea42 0103 	orr.w	r1, r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	0c1b      	lsrs	r3, r3, #16
 8002b9c:	f003 0104 	and.w	r1, r3, #4
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	69da      	ldr	r2, [r3, #28]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b088      	sub	sp, #32
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	603b      	str	r3, [r7, #0]
 8002be0:	4613      	mov	r3, r2
 8002be2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002be4:	2300      	movs	r3, #0
 8002be6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d101      	bne.n	8002bf6 <HAL_SPI_Transmit+0x22>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	e11e      	b.n	8002e34 <HAL_SPI_Transmit+0x260>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bfe:	f7fe ff3f 	bl	8001a80 <HAL_GetTick>
 8002c02:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c04:	88fb      	ldrh	r3, [r7, #6]
 8002c06:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d002      	beq.n	8002c1a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c14:	2302      	movs	r3, #2
 8002c16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c18:	e103      	b.n	8002e22 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <HAL_SPI_Transmit+0x52>
 8002c20:	88fb      	ldrh	r3, [r7, #6]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d102      	bne.n	8002c2c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c2a:	e0fa      	b.n	8002e22 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2203      	movs	r2, #3
 8002c30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	88fa      	ldrh	r2, [r7, #6]
 8002c44:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	88fa      	ldrh	r2, [r7, #6]
 8002c4a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c72:	d107      	bne.n	8002c84 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c82:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8e:	2b40      	cmp	r3, #64	; 0x40
 8002c90:	d007      	beq.n	8002ca2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ca0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002caa:	d14b      	bne.n	8002d44 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d002      	beq.n	8002cba <HAL_SPI_Transmit+0xe6>
 8002cb4:	8afb      	ldrh	r3, [r7, #22]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d13e      	bne.n	8002d38 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	881a      	ldrh	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	1c9a      	adds	r2, r3, #2
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002cde:	e02b      	b.n	8002d38 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d112      	bne.n	8002d14 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	881a      	ldrh	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	1c9a      	adds	r2, r3, #2
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d12:	e011      	b.n	8002d38 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d14:	f7fe feb4 	bl	8001a80 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d803      	bhi.n	8002d2c <HAL_SPI_Transmit+0x158>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d2a:	d102      	bne.n	8002d32 <HAL_SPI_Transmit+0x15e>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d102      	bne.n	8002d38 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d36:	e074      	b.n	8002e22 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1ce      	bne.n	8002ce0 <HAL_SPI_Transmit+0x10c>
 8002d42:	e04c      	b.n	8002dde <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <HAL_SPI_Transmit+0x17e>
 8002d4c:	8afb      	ldrh	r3, [r7, #22]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d140      	bne.n	8002dd4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	330c      	adds	r3, #12
 8002d5c:	7812      	ldrb	r2, [r2, #0]
 8002d5e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d78:	e02c      	b.n	8002dd4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d113      	bne.n	8002db0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	330c      	adds	r3, #12
 8002d92:	7812      	ldrb	r2, [r2, #0]
 8002d94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	3b01      	subs	r3, #1
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	86da      	strh	r2, [r3, #54]	; 0x36
 8002dae:	e011      	b.n	8002dd4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002db0:	f7fe fe66 	bl	8001a80 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d803      	bhi.n	8002dc8 <HAL_SPI_Transmit+0x1f4>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc6:	d102      	bne.n	8002dce <HAL_SPI_Transmit+0x1fa>
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d102      	bne.n	8002dd4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002dd2:	e026      	b.n	8002e22 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1cd      	bne.n	8002d7a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	6839      	ldr	r1, [r7, #0]
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 fba4 	bl	8003530 <SPI_EndRxTxTransaction>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d002      	beq.n	8002df4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2220      	movs	r2, #32
 8002df2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10a      	bne.n	8002e12 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	613b      	str	r3, [r7, #16]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	613b      	str	r3, [r7, #16]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d002      	beq.n	8002e20 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	77fb      	strb	r3, [r7, #31]
 8002e1e:	e000      	b.n	8002e22 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002e20:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e32:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3720      	adds	r7, #32
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af02      	add	r7, sp, #8
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e58:	d112      	bne.n	8002e80 <HAL_SPI_Receive+0x44>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10e      	bne.n	8002e80 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2204      	movs	r2, #4
 8002e66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e6a:	88fa      	ldrh	r2, [r7, #6]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	4613      	mov	r3, r2
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	68b9      	ldr	r1, [r7, #8]
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 f8e9 	bl	800304e <HAL_SPI_TransmitReceive>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	e0e2      	b.n	8003046 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_SPI_Receive+0x52>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e0db      	b.n	8003046 <HAL_SPI_Receive+0x20a>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e96:	f7fe fdf3 	bl	8001a80 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d002      	beq.n	8002eae <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002eac:	e0c2      	b.n	8003034 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d002      	beq.n	8002eba <HAL_SPI_Receive+0x7e>
 8002eb4:	88fb      	ldrh	r3, [r7, #6]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d102      	bne.n	8002ec0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ebe:	e0b9      	b.n	8003034 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2204      	movs	r2, #4
 8002ec4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	88fa      	ldrh	r2, [r7, #6]
 8002ed8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	88fa      	ldrh	r2, [r7, #6]
 8002ede:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f06:	d107      	bne.n	8002f18 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f16:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f22:	2b40      	cmp	r3, #64	; 0x40
 8002f24:	d007      	beq.n	8002f36 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f34:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d162      	bne.n	8003004 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f3e:	e02e      	b.n	8002f9e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d115      	bne.n	8002f7a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f103 020c 	add.w	r2, r3, #12
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5a:	7812      	ldrb	r2, [r2, #0]
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f64:	1c5a      	adds	r2, r3, #1
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f78:	e011      	b.n	8002f9e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f7a:	f7fe fd81 	bl	8001a80 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d803      	bhi.n	8002f92 <HAL_SPI_Receive+0x156>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f90:	d102      	bne.n	8002f98 <HAL_SPI_Receive+0x15c>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d102      	bne.n	8002f9e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002f9c:	e04a      	b.n	8003034 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1cb      	bne.n	8002f40 <HAL_SPI_Receive+0x104>
 8002fa8:	e031      	b.n	800300e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d113      	bne.n	8002fe0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc2:	b292      	uxth	r2, r2
 8002fc4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fca:	1c9a      	adds	r2, r3, #2
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fde:	e011      	b.n	8003004 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fe0:	f7fe fd4e 	bl	8001a80 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d803      	bhi.n	8002ff8 <HAL_SPI_Receive+0x1bc>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff6:	d102      	bne.n	8002ffe <HAL_SPI_Receive+0x1c2>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d102      	bne.n	8003004 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003002:	e017      	b.n	8003034 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003008:	b29b      	uxth	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1cd      	bne.n	8002faa <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	6839      	ldr	r1, [r7, #0]
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 fa27 	bl	8003466 <SPI_EndRxTransaction>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d002      	beq.n	8003024 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2220      	movs	r2, #32
 8003022:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003028:	2b00      	cmp	r3, #0
 800302a:	d002      	beq.n	8003032 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	75fb      	strb	r3, [r7, #23]
 8003030:	e000      	b.n	8003034 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003032:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003044:	7dfb      	ldrb	r3, [r7, #23]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b08c      	sub	sp, #48	; 0x30
 8003052:	af00      	add	r7, sp, #0
 8003054:	60f8      	str	r0, [r7, #12]
 8003056:	60b9      	str	r1, [r7, #8]
 8003058:	607a      	str	r2, [r7, #4]
 800305a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800305c:	2301      	movs	r3, #1
 800305e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_SPI_TransmitReceive+0x26>
 8003070:	2302      	movs	r3, #2
 8003072:	e18a      	b.n	800338a <HAL_SPI_TransmitReceive+0x33c>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800307c:	f7fe fd00 	bl	8001a80 <HAL_GetTick>
 8003080:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003088:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003092:	887b      	ldrh	r3, [r7, #2]
 8003094:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003096:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800309a:	2b01      	cmp	r3, #1
 800309c:	d00f      	beq.n	80030be <HAL_SPI_TransmitReceive+0x70>
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030a4:	d107      	bne.n	80030b6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d103      	bne.n	80030b6 <HAL_SPI_TransmitReceive+0x68>
 80030ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d003      	beq.n	80030be <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80030b6:	2302      	movs	r3, #2
 80030b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030bc:	e15b      	b.n	8003376 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <HAL_SPI_TransmitReceive+0x82>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <HAL_SPI_TransmitReceive+0x82>
 80030ca:	887b      	ldrh	r3, [r7, #2]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d103      	bne.n	80030d8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030d6:	e14e      	b.n	8003376 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d003      	beq.n	80030ec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2205      	movs	r2, #5
 80030e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	887a      	ldrh	r2, [r7, #2]
 80030fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	887a      	ldrh	r2, [r7, #2]
 8003102:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	887a      	ldrh	r2, [r7, #2]
 800310e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	887a      	ldrh	r2, [r7, #2]
 8003114:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312c:	2b40      	cmp	r3, #64	; 0x40
 800312e:	d007      	beq.n	8003140 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800313e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003148:	d178      	bne.n	800323c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <HAL_SPI_TransmitReceive+0x10a>
 8003152:	8b7b      	ldrh	r3, [r7, #26]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d166      	bne.n	8003226 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	881a      	ldrh	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	1c9a      	adds	r2, r3, #2
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800317c:	e053      	b.n	8003226 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b02      	cmp	r3, #2
 800318a:	d11b      	bne.n	80031c4 <HAL_SPI_TransmitReceive+0x176>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d016      	beq.n	80031c4 <HAL_SPI_TransmitReceive+0x176>
 8003196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003198:	2b01      	cmp	r3, #1
 800319a:	d113      	bne.n	80031c4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a0:	881a      	ldrh	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ac:	1c9a      	adds	r2, r3, #2
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d119      	bne.n	8003206 <HAL_SPI_TransmitReceive+0x1b8>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d014      	beq.n	8003206 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e6:	b292      	uxth	r2, r2
 80031e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ee:	1c9a      	adds	r2, r3, #2
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003202:	2301      	movs	r3, #1
 8003204:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003206:	f7fe fc3b 	bl	8001a80 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003212:	429a      	cmp	r2, r3
 8003214:	d807      	bhi.n	8003226 <HAL_SPI_TransmitReceive+0x1d8>
 8003216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321c:	d003      	beq.n	8003226 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003224:	e0a7      	b.n	8003376 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800322a:	b29b      	uxth	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1a6      	bne.n	800317e <HAL_SPI_TransmitReceive+0x130>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003234:	b29b      	uxth	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1a1      	bne.n	800317e <HAL_SPI_TransmitReceive+0x130>
 800323a:	e07c      	b.n	8003336 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d002      	beq.n	800324a <HAL_SPI_TransmitReceive+0x1fc>
 8003244:	8b7b      	ldrh	r3, [r7, #26]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d16b      	bne.n	8003322 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	330c      	adds	r3, #12
 8003254:	7812      	ldrb	r2, [r2, #0]
 8003256:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003266:	b29b      	uxth	r3, r3
 8003268:	3b01      	subs	r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003270:	e057      	b.n	8003322 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b02      	cmp	r3, #2
 800327e:	d11c      	bne.n	80032ba <HAL_SPI_TransmitReceive+0x26c>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003284:	b29b      	uxth	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d017      	beq.n	80032ba <HAL_SPI_TransmitReceive+0x26c>
 800328a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328c:	2b01      	cmp	r3, #1
 800328e:	d114      	bne.n	80032ba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	330c      	adds	r3, #12
 800329a:	7812      	ldrb	r2, [r2, #0]
 800329c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d119      	bne.n	80032fc <HAL_SPI_TransmitReceive+0x2ae>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d014      	beq.n	80032fc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	3b01      	subs	r3, #1
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032f8:	2301      	movs	r3, #1
 80032fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80032fc:	f7fe fbc0 	bl	8001a80 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003308:	429a      	cmp	r2, r3
 800330a:	d803      	bhi.n	8003314 <HAL_SPI_TransmitReceive+0x2c6>
 800330c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003312:	d102      	bne.n	800331a <HAL_SPI_TransmitReceive+0x2cc>
 8003314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003316:	2b00      	cmp	r3, #0
 8003318:	d103      	bne.n	8003322 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003320:	e029      	b.n	8003376 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003326:	b29b      	uxth	r3, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1a2      	bne.n	8003272 <HAL_SPI_TransmitReceive+0x224>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d19d      	bne.n	8003272 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003338:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 f8f8 	bl	8003530 <SPI_EndRxTxTransaction>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d006      	beq.n	8003354 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2220      	movs	r2, #32
 8003350:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003352:	e010      	b.n	8003376 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10b      	bne.n	8003374 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	e000      	b.n	8003376 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003374:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003386:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800338a:	4618      	mov	r0, r3
 800338c:	3730      	adds	r7, #48	; 0x30
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b084      	sub	sp, #16
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	603b      	str	r3, [r7, #0]
 800339e:	4613      	mov	r3, r2
 80033a0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033a2:	e04c      	b.n	800343e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033aa:	d048      	beq.n	800343e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80033ac:	f7fe fb68 	bl	8001a80 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d902      	bls.n	80033c2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d13d      	bne.n	800343e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033da:	d111      	bne.n	8003400 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033e4:	d004      	beq.n	80033f0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ee:	d107      	bne.n	8003400 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003404:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003408:	d10f      	bne.n	800342a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003428:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e00f      	b.n	800345e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4013      	ands	r3, r2
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	429a      	cmp	r2, r3
 800344c:	bf0c      	ite	eq
 800344e:	2301      	moveq	r3, #1
 8003450:	2300      	movne	r3, #0
 8003452:	b2db      	uxtb	r3, r3
 8003454:	461a      	mov	r2, r3
 8003456:	79fb      	ldrb	r3, [r7, #7]
 8003458:	429a      	cmp	r2, r3
 800345a:	d1a3      	bne.n	80033a4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b086      	sub	sp, #24
 800346a:	af02      	add	r7, sp, #8
 800346c:	60f8      	str	r0, [r7, #12]
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800347a:	d111      	bne.n	80034a0 <SPI_EndRxTransaction+0x3a>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003484:	d004      	beq.n	8003490 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800348e:	d107      	bne.n	80034a0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800349e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034a8:	d12a      	bne.n	8003500 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b2:	d012      	beq.n	80034da <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2200      	movs	r2, #0
 80034bc:	2180      	movs	r1, #128	; 0x80
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f7ff ff67 	bl	8003392 <SPI_WaitFlagStateUntilTimeout>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d02d      	beq.n	8003526 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ce:	f043 0220 	orr.w	r2, r3, #32
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e026      	b.n	8003528 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	2200      	movs	r2, #0
 80034e2:	2101      	movs	r1, #1
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f7ff ff54 	bl	8003392 <SPI_WaitFlagStateUntilTimeout>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d01a      	beq.n	8003526 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f4:	f043 0220 	orr.w	r2, r3, #32
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e013      	b.n	8003528 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	2200      	movs	r2, #0
 8003508:	2101      	movs	r1, #1
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f7ff ff41 	bl	8003392 <SPI_WaitFlagStateUntilTimeout>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d007      	beq.n	8003526 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351a:	f043 0220 	orr.w	r2, r3, #32
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e000      	b.n	8003528 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b088      	sub	sp, #32
 8003534:	af02      	add	r7, sp, #8
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800353c:	4b1b      	ldr	r3, [pc, #108]	; (80035ac <SPI_EndRxTxTransaction+0x7c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a1b      	ldr	r2, [pc, #108]	; (80035b0 <SPI_EndRxTxTransaction+0x80>)
 8003542:	fba2 2303 	umull	r2, r3, r2, r3
 8003546:	0d5b      	lsrs	r3, r3, #21
 8003548:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800354c:	fb02 f303 	mul.w	r3, r2, r3
 8003550:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800355a:	d112      	bne.n	8003582 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	2200      	movs	r2, #0
 8003564:	2180      	movs	r1, #128	; 0x80
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f7ff ff13 	bl	8003392 <SPI_WaitFlagStateUntilTimeout>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d016      	beq.n	80035a0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003576:	f043 0220 	orr.w	r2, r3, #32
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e00f      	b.n	80035a2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00a      	beq.n	800359e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	3b01      	subs	r3, #1
 800358c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003598:	2b80      	cmp	r3, #128	; 0x80
 800359a:	d0f2      	beq.n	8003582 <SPI_EndRxTxTransaction+0x52>
 800359c:	e000      	b.n	80035a0 <SPI_EndRxTxTransaction+0x70>
        break;
 800359e:	bf00      	nop
  }

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3718      	adds	r7, #24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20000134 	.word	0x20000134
 80035b0:	165e9f81 	.word	0x165e9f81

080035b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e01d      	b.n	8003602 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d106      	bne.n	80035e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7fd fbee 	bl	8000dbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3304      	adds	r3, #4
 80035f0:	4619      	mov	r1, r3
 80035f2:	4610      	mov	r0, r2
 80035f4:	f000 fa4a 	bl	8003a8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800360a:	b480      	push	{r7}
 800360c:	b085      	sub	sp, #20
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68da      	ldr	r2, [r3, #12]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f042 0201 	orr.w	r2, r2, #1
 8003620:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2b06      	cmp	r3, #6
 8003632:	d007      	beq.n	8003644 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0201 	orr.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68da      	ldr	r2, [r3, #12]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0201 	bic.w	r2, r2, #1
 8003668:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6a1a      	ldr	r2, [r3, #32]
 8003670:	f241 1311 	movw	r3, #4369	; 0x1111
 8003674:	4013      	ands	r3, r2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10f      	bne.n	800369a <HAL_TIM_Base_Stop_IT+0x48>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6a1a      	ldr	r2, [r3, #32]
 8003680:	f240 4344 	movw	r3, #1092	; 0x444
 8003684:	4013      	ands	r3, r2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d107      	bne.n	800369a <HAL_TIM_Base_Stop_IT+0x48>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0201 	bic.w	r2, r2, #1
 8003698:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d122      	bne.n	8003704 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d11b      	bne.n	8003704 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f06f 0202 	mvn.w	r2, #2
 80036d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	f003 0303 	and.w	r3, r3, #3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f9af 	bl	8003a4e <HAL_TIM_IC_CaptureCallback>
 80036f0:	e005      	b.n	80036fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f9a1 	bl	8003a3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f9b2 	bl	8003a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f003 0304 	and.w	r3, r3, #4
 800370e:	2b04      	cmp	r3, #4
 8003710:	d122      	bne.n	8003758 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b04      	cmp	r3, #4
 800371e:	d11b      	bne.n	8003758 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0204 	mvn.w	r2, #4
 8003728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2202      	movs	r2, #2
 800372e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f985 	bl	8003a4e <HAL_TIM_IC_CaptureCallback>
 8003744:	e005      	b.n	8003752 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f977 	bl	8003a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f988 	bl	8003a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b08      	cmp	r3, #8
 8003764:	d122      	bne.n	80037ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f003 0308 	and.w	r3, r3, #8
 8003770:	2b08      	cmp	r3, #8
 8003772:	d11b      	bne.n	80037ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f06f 0208 	mvn.w	r2, #8
 800377c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2204      	movs	r2, #4
 8003782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f95b 	bl	8003a4e <HAL_TIM_IC_CaptureCallback>
 8003798:	e005      	b.n	80037a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f94d 	bl	8003a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f95e 	bl	8003a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	f003 0310 	and.w	r3, r3, #16
 80037b6:	2b10      	cmp	r3, #16
 80037b8:	d122      	bne.n	8003800 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f003 0310 	and.w	r3, r3, #16
 80037c4:	2b10      	cmp	r3, #16
 80037c6:	d11b      	bne.n	8003800 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f06f 0210 	mvn.w	r2, #16
 80037d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2208      	movs	r2, #8
 80037d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f931 	bl	8003a4e <HAL_TIM_IC_CaptureCallback>
 80037ec:	e005      	b.n	80037fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f923 	bl	8003a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f934 	bl	8003a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b01      	cmp	r3, #1
 800380c:	d10e      	bne.n	800382c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b01      	cmp	r3, #1
 800381a:	d107      	bne.n	800382c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f06f 0201 	mvn.w	r2, #1
 8003824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f8fd 	bl	8003a26 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003836:	2b80      	cmp	r3, #128	; 0x80
 8003838:	d10e      	bne.n	8003858 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003844:	2b80      	cmp	r3, #128	; 0x80
 8003846:	d107      	bne.n	8003858 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 fada 	bl	8003e0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003862:	2b40      	cmp	r3, #64	; 0x40
 8003864:	d10e      	bne.n	8003884 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003870:	2b40      	cmp	r3, #64	; 0x40
 8003872:	d107      	bne.n	8003884 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800387c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f8f9 	bl	8003a76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f003 0320 	and.w	r3, r3, #32
 800388e:	2b20      	cmp	r3, #32
 8003890:	d10e      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f003 0320 	and.w	r3, r3, #32
 800389c:	2b20      	cmp	r3, #32
 800389e:	d107      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0220 	mvn.w	r2, #32
 80038a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 faa4 	bl	8003df8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038b0:	bf00      	nop
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d101      	bne.n	80038d0 <HAL_TIM_ConfigClockSource+0x18>
 80038cc:	2302      	movs	r3, #2
 80038ce:	e0a6      	b.n	8003a1e <HAL_TIM_ConfigClockSource+0x166>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b40      	cmp	r3, #64	; 0x40
 8003906:	d067      	beq.n	80039d8 <HAL_TIM_ConfigClockSource+0x120>
 8003908:	2b40      	cmp	r3, #64	; 0x40
 800390a:	d80b      	bhi.n	8003924 <HAL_TIM_ConfigClockSource+0x6c>
 800390c:	2b10      	cmp	r3, #16
 800390e:	d073      	beq.n	80039f8 <HAL_TIM_ConfigClockSource+0x140>
 8003910:	2b10      	cmp	r3, #16
 8003912:	d802      	bhi.n	800391a <HAL_TIM_ConfigClockSource+0x62>
 8003914:	2b00      	cmp	r3, #0
 8003916:	d06f      	beq.n	80039f8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003918:	e078      	b.n	8003a0c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800391a:	2b20      	cmp	r3, #32
 800391c:	d06c      	beq.n	80039f8 <HAL_TIM_ConfigClockSource+0x140>
 800391e:	2b30      	cmp	r3, #48	; 0x30
 8003920:	d06a      	beq.n	80039f8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003922:	e073      	b.n	8003a0c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003924:	2b70      	cmp	r3, #112	; 0x70
 8003926:	d00d      	beq.n	8003944 <HAL_TIM_ConfigClockSource+0x8c>
 8003928:	2b70      	cmp	r3, #112	; 0x70
 800392a:	d804      	bhi.n	8003936 <HAL_TIM_ConfigClockSource+0x7e>
 800392c:	2b50      	cmp	r3, #80	; 0x50
 800392e:	d033      	beq.n	8003998 <HAL_TIM_ConfigClockSource+0xe0>
 8003930:	2b60      	cmp	r3, #96	; 0x60
 8003932:	d041      	beq.n	80039b8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003934:	e06a      	b.n	8003a0c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800393a:	d066      	beq.n	8003a0a <HAL_TIM_ConfigClockSource+0x152>
 800393c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003940:	d017      	beq.n	8003972 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003942:	e063      	b.n	8003a0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6818      	ldr	r0, [r3, #0]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	6899      	ldr	r1, [r3, #8]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	f000 f9b4 	bl	8003cc0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003966:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	609a      	str	r2, [r3, #8]
      break;
 8003970:	e04c      	b.n	8003a0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	6899      	ldr	r1, [r3, #8]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f000 f99d 	bl	8003cc0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003994:	609a      	str	r2, [r3, #8]
      break;
 8003996:	e039      	b.n	8003a0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6818      	ldr	r0, [r3, #0]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	6859      	ldr	r1, [r3, #4]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	461a      	mov	r2, r3
 80039a6:	f000 f911 	bl	8003bcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2150      	movs	r1, #80	; 0x50
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 f96a 	bl	8003c8a <TIM_ITRx_SetConfig>
      break;
 80039b6:	e029      	b.n	8003a0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6818      	ldr	r0, [r3, #0]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	6859      	ldr	r1, [r3, #4]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	461a      	mov	r2, r3
 80039c6:	f000 f930 	bl	8003c2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2160      	movs	r1, #96	; 0x60
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 f95a 	bl	8003c8a <TIM_ITRx_SetConfig>
      break;
 80039d6:	e019      	b.n	8003a0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6818      	ldr	r0, [r3, #0]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	6859      	ldr	r1, [r3, #4]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	461a      	mov	r2, r3
 80039e6:	f000 f8f1 	bl	8003bcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2140      	movs	r1, #64	; 0x40
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 f94a 	bl	8003c8a <TIM_ITRx_SetConfig>
      break;
 80039f6:	e009      	b.n	8003a0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4619      	mov	r1, r3
 8003a02:	4610      	mov	r0, r2
 8003a04:	f000 f941 	bl	8003c8a <TIM_ITRx_SetConfig>
      break;
 8003a08:	e000      	b.n	8003a0c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003a0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
	...

08003a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a40      	ldr	r2, [pc, #256]	; (8003ba0 <TIM_Base_SetConfig+0x114>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d013      	beq.n	8003acc <TIM_Base_SetConfig+0x40>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aaa:	d00f      	beq.n	8003acc <TIM_Base_SetConfig+0x40>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a3d      	ldr	r2, [pc, #244]	; (8003ba4 <TIM_Base_SetConfig+0x118>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d00b      	beq.n	8003acc <TIM_Base_SetConfig+0x40>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a3c      	ldr	r2, [pc, #240]	; (8003ba8 <TIM_Base_SetConfig+0x11c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d007      	beq.n	8003acc <TIM_Base_SetConfig+0x40>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a3b      	ldr	r2, [pc, #236]	; (8003bac <TIM_Base_SetConfig+0x120>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d003      	beq.n	8003acc <TIM_Base_SetConfig+0x40>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a3a      	ldr	r2, [pc, #232]	; (8003bb0 <TIM_Base_SetConfig+0x124>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d108      	bne.n	8003ade <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a2f      	ldr	r2, [pc, #188]	; (8003ba0 <TIM_Base_SetConfig+0x114>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d02b      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aec:	d027      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a2c      	ldr	r2, [pc, #176]	; (8003ba4 <TIM_Base_SetConfig+0x118>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d023      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a2b      	ldr	r2, [pc, #172]	; (8003ba8 <TIM_Base_SetConfig+0x11c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d01f      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a2a      	ldr	r2, [pc, #168]	; (8003bac <TIM_Base_SetConfig+0x120>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d01b      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a29      	ldr	r2, [pc, #164]	; (8003bb0 <TIM_Base_SetConfig+0x124>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d017      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a28      	ldr	r2, [pc, #160]	; (8003bb4 <TIM_Base_SetConfig+0x128>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d013      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a27      	ldr	r2, [pc, #156]	; (8003bb8 <TIM_Base_SetConfig+0x12c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00f      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a26      	ldr	r2, [pc, #152]	; (8003bbc <TIM_Base_SetConfig+0x130>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00b      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a25      	ldr	r2, [pc, #148]	; (8003bc0 <TIM_Base_SetConfig+0x134>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d007      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a24      	ldr	r2, [pc, #144]	; (8003bc4 <TIM_Base_SetConfig+0x138>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d003      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a23      	ldr	r2, [pc, #140]	; (8003bc8 <TIM_Base_SetConfig+0x13c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d108      	bne.n	8003b50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a0a      	ldr	r2, [pc, #40]	; (8003ba0 <TIM_Base_SetConfig+0x114>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d003      	beq.n	8003b84 <TIM_Base_SetConfig+0xf8>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a0c      	ldr	r2, [pc, #48]	; (8003bb0 <TIM_Base_SetConfig+0x124>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d103      	bne.n	8003b8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	691a      	ldr	r2, [r3, #16]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	615a      	str	r2, [r3, #20]
}
 8003b92:	bf00      	nop
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	40010000 	.word	0x40010000
 8003ba4:	40000400 	.word	0x40000400
 8003ba8:	40000800 	.word	0x40000800
 8003bac:	40000c00 	.word	0x40000c00
 8003bb0:	40010400 	.word	0x40010400
 8003bb4:	40014000 	.word	0x40014000
 8003bb8:	40014400 	.word	0x40014400
 8003bbc:	40014800 	.word	0x40014800
 8003bc0:	40001800 	.word	0x40001800
 8003bc4:	40001c00 	.word	0x40001c00
 8003bc8:	40002000 	.word	0x40002000

08003bcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	f023 0201 	bic.w	r2, r3, #1
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	011b      	lsls	r3, r3, #4
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f023 030a 	bic.w	r3, r3, #10
 8003c08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	621a      	str	r2, [r3, #32]
}
 8003c1e:	bf00      	nop
 8003c20:	371c      	adds	r7, #28
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b087      	sub	sp, #28
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	60f8      	str	r0, [r7, #12]
 8003c32:	60b9      	str	r1, [r7, #8]
 8003c34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	f023 0210 	bic.w	r2, r3, #16
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	031b      	lsls	r3, r3, #12
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	621a      	str	r2, [r3, #32]
}
 8003c7e:	bf00      	nop
 8003c80:	371c      	adds	r7, #28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b085      	sub	sp, #20
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
 8003c92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f043 0307 	orr.w	r3, r3, #7
 8003cac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	609a      	str	r2, [r3, #8]
}
 8003cb4:	bf00      	nop
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
 8003ccc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	021a      	lsls	r2, r3, #8
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	609a      	str	r2, [r3, #8]
}
 8003cf4:	bf00      	nop
 8003cf6:	371c      	adds	r7, #28
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d14:	2302      	movs	r3, #2
 8003d16:	e05a      	b.n	8003dce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a21      	ldr	r2, [pc, #132]	; (8003ddc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d022      	beq.n	8003da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d64:	d01d      	beq.n	8003da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a1d      	ldr	r2, [pc, #116]	; (8003de0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d018      	beq.n	8003da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a1b      	ldr	r2, [pc, #108]	; (8003de4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d013      	beq.n	8003da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a1a      	ldr	r2, [pc, #104]	; (8003de8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d00e      	beq.n	8003da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a18      	ldr	r2, [pc, #96]	; (8003dec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d009      	beq.n	8003da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a17      	ldr	r2, [pc, #92]	; (8003df0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d004      	beq.n	8003da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a15      	ldr	r2, [pc, #84]	; (8003df4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d10c      	bne.n	8003dbc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003da8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	40010000 	.word	0x40010000
 8003de0:	40000400 	.word	0x40000400
 8003de4:	40000800 	.word	0x40000800
 8003de8:	40000c00 	.word	0x40000c00
 8003dec:	40010400 	.word	0x40010400
 8003df0:	40014000 	.word	0x40014000
 8003df4:	40001800 	.word	0x40001800

08003df8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e03f      	b.n	8003eb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d106      	bne.n	8003e4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7fd f856 	bl	8000ef8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2224      	movs	r2, #36	; 0x24
 8003e50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f829 	bl	8003ebc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695a      	ldr	r2, [r3, #20]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
	...

08003ebc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ec0:	b085      	sub	sp, #20
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003efe:	f023 030c 	bic.w	r3, r3, #12
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6812      	ldr	r2, [r2, #0]
 8003f06:	68f9      	ldr	r1, [r7, #12]
 8003f08:	430b      	orrs	r3, r1
 8003f0a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	699a      	ldr	r2, [r3, #24]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f2a:	f040 818b 	bne.w	8004244 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4ac1      	ldr	r2, [pc, #772]	; (8004238 <UART_SetConfig+0x37c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d005      	beq.n	8003f44 <UART_SetConfig+0x88>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4abf      	ldr	r2, [pc, #764]	; (800423c <UART_SetConfig+0x380>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	f040 80bd 	bne.w	80040be <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f44:	f7fe fdce 	bl	8002ae4 <HAL_RCC_GetPCLK2Freq>
 8003f48:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	461d      	mov	r5, r3
 8003f4e:	f04f 0600 	mov.w	r6, #0
 8003f52:	46a8      	mov	r8, r5
 8003f54:	46b1      	mov	r9, r6
 8003f56:	eb18 0308 	adds.w	r3, r8, r8
 8003f5a:	eb49 0409 	adc.w	r4, r9, r9
 8003f5e:	4698      	mov	r8, r3
 8003f60:	46a1      	mov	r9, r4
 8003f62:	eb18 0805 	adds.w	r8, r8, r5
 8003f66:	eb49 0906 	adc.w	r9, r9, r6
 8003f6a:	f04f 0100 	mov.w	r1, #0
 8003f6e:	f04f 0200 	mov.w	r2, #0
 8003f72:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f76:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f7a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f7e:	4688      	mov	r8, r1
 8003f80:	4691      	mov	r9, r2
 8003f82:	eb18 0005 	adds.w	r0, r8, r5
 8003f86:	eb49 0106 	adc.w	r1, r9, r6
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	461d      	mov	r5, r3
 8003f90:	f04f 0600 	mov.w	r6, #0
 8003f94:	196b      	adds	r3, r5, r5
 8003f96:	eb46 0406 	adc.w	r4, r6, r6
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	4623      	mov	r3, r4
 8003f9e:	f7fc f913 	bl	80001c8 <__aeabi_uldivmod>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	460c      	mov	r4, r1
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	4ba5      	ldr	r3, [pc, #660]	; (8004240 <UART_SetConfig+0x384>)
 8003faa:	fba3 2302 	umull	r2, r3, r3, r2
 8003fae:	095b      	lsrs	r3, r3, #5
 8003fb0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	461d      	mov	r5, r3
 8003fb8:	f04f 0600 	mov.w	r6, #0
 8003fbc:	46a9      	mov	r9, r5
 8003fbe:	46b2      	mov	sl, r6
 8003fc0:	eb19 0309 	adds.w	r3, r9, r9
 8003fc4:	eb4a 040a 	adc.w	r4, sl, sl
 8003fc8:	4699      	mov	r9, r3
 8003fca:	46a2      	mov	sl, r4
 8003fcc:	eb19 0905 	adds.w	r9, r9, r5
 8003fd0:	eb4a 0a06 	adc.w	sl, sl, r6
 8003fd4:	f04f 0100 	mov.w	r1, #0
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fe0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fe4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fe8:	4689      	mov	r9, r1
 8003fea:	4692      	mov	sl, r2
 8003fec:	eb19 0005 	adds.w	r0, r9, r5
 8003ff0:	eb4a 0106 	adc.w	r1, sl, r6
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	461d      	mov	r5, r3
 8003ffa:	f04f 0600 	mov.w	r6, #0
 8003ffe:	196b      	adds	r3, r5, r5
 8004000:	eb46 0406 	adc.w	r4, r6, r6
 8004004:	461a      	mov	r2, r3
 8004006:	4623      	mov	r3, r4
 8004008:	f7fc f8de 	bl	80001c8 <__aeabi_uldivmod>
 800400c:	4603      	mov	r3, r0
 800400e:	460c      	mov	r4, r1
 8004010:	461a      	mov	r2, r3
 8004012:	4b8b      	ldr	r3, [pc, #556]	; (8004240 <UART_SetConfig+0x384>)
 8004014:	fba3 1302 	umull	r1, r3, r3, r2
 8004018:	095b      	lsrs	r3, r3, #5
 800401a:	2164      	movs	r1, #100	; 0x64
 800401c:	fb01 f303 	mul.w	r3, r1, r3
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	3332      	adds	r3, #50	; 0x32
 8004026:	4a86      	ldr	r2, [pc, #536]	; (8004240 <UART_SetConfig+0x384>)
 8004028:	fba2 2303 	umull	r2, r3, r2, r3
 800402c:	095b      	lsrs	r3, r3, #5
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004034:	4498      	add	r8, r3
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	461d      	mov	r5, r3
 800403a:	f04f 0600 	mov.w	r6, #0
 800403e:	46a9      	mov	r9, r5
 8004040:	46b2      	mov	sl, r6
 8004042:	eb19 0309 	adds.w	r3, r9, r9
 8004046:	eb4a 040a 	adc.w	r4, sl, sl
 800404a:	4699      	mov	r9, r3
 800404c:	46a2      	mov	sl, r4
 800404e:	eb19 0905 	adds.w	r9, r9, r5
 8004052:	eb4a 0a06 	adc.w	sl, sl, r6
 8004056:	f04f 0100 	mov.w	r1, #0
 800405a:	f04f 0200 	mov.w	r2, #0
 800405e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004062:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004066:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800406a:	4689      	mov	r9, r1
 800406c:	4692      	mov	sl, r2
 800406e:	eb19 0005 	adds.w	r0, r9, r5
 8004072:	eb4a 0106 	adc.w	r1, sl, r6
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	461d      	mov	r5, r3
 800407c:	f04f 0600 	mov.w	r6, #0
 8004080:	196b      	adds	r3, r5, r5
 8004082:	eb46 0406 	adc.w	r4, r6, r6
 8004086:	461a      	mov	r2, r3
 8004088:	4623      	mov	r3, r4
 800408a:	f7fc f89d 	bl	80001c8 <__aeabi_uldivmod>
 800408e:	4603      	mov	r3, r0
 8004090:	460c      	mov	r4, r1
 8004092:	461a      	mov	r2, r3
 8004094:	4b6a      	ldr	r3, [pc, #424]	; (8004240 <UART_SetConfig+0x384>)
 8004096:	fba3 1302 	umull	r1, r3, r3, r2
 800409a:	095b      	lsrs	r3, r3, #5
 800409c:	2164      	movs	r1, #100	; 0x64
 800409e:	fb01 f303 	mul.w	r3, r1, r3
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	3332      	adds	r3, #50	; 0x32
 80040a8:	4a65      	ldr	r2, [pc, #404]	; (8004240 <UART_SetConfig+0x384>)
 80040aa:	fba2 2303 	umull	r2, r3, r2, r3
 80040ae:	095b      	lsrs	r3, r3, #5
 80040b0:	f003 0207 	and.w	r2, r3, #7
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4442      	add	r2, r8
 80040ba:	609a      	str	r2, [r3, #8]
 80040bc:	e26f      	b.n	800459e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040be:	f7fe fcfd 	bl	8002abc <HAL_RCC_GetPCLK1Freq>
 80040c2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	461d      	mov	r5, r3
 80040c8:	f04f 0600 	mov.w	r6, #0
 80040cc:	46a8      	mov	r8, r5
 80040ce:	46b1      	mov	r9, r6
 80040d0:	eb18 0308 	adds.w	r3, r8, r8
 80040d4:	eb49 0409 	adc.w	r4, r9, r9
 80040d8:	4698      	mov	r8, r3
 80040da:	46a1      	mov	r9, r4
 80040dc:	eb18 0805 	adds.w	r8, r8, r5
 80040e0:	eb49 0906 	adc.w	r9, r9, r6
 80040e4:	f04f 0100 	mov.w	r1, #0
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80040f0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040f4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040f8:	4688      	mov	r8, r1
 80040fa:	4691      	mov	r9, r2
 80040fc:	eb18 0005 	adds.w	r0, r8, r5
 8004100:	eb49 0106 	adc.w	r1, r9, r6
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	461d      	mov	r5, r3
 800410a:	f04f 0600 	mov.w	r6, #0
 800410e:	196b      	adds	r3, r5, r5
 8004110:	eb46 0406 	adc.w	r4, r6, r6
 8004114:	461a      	mov	r2, r3
 8004116:	4623      	mov	r3, r4
 8004118:	f7fc f856 	bl	80001c8 <__aeabi_uldivmod>
 800411c:	4603      	mov	r3, r0
 800411e:	460c      	mov	r4, r1
 8004120:	461a      	mov	r2, r3
 8004122:	4b47      	ldr	r3, [pc, #284]	; (8004240 <UART_SetConfig+0x384>)
 8004124:	fba3 2302 	umull	r2, r3, r3, r2
 8004128:	095b      	lsrs	r3, r3, #5
 800412a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	461d      	mov	r5, r3
 8004132:	f04f 0600 	mov.w	r6, #0
 8004136:	46a9      	mov	r9, r5
 8004138:	46b2      	mov	sl, r6
 800413a:	eb19 0309 	adds.w	r3, r9, r9
 800413e:	eb4a 040a 	adc.w	r4, sl, sl
 8004142:	4699      	mov	r9, r3
 8004144:	46a2      	mov	sl, r4
 8004146:	eb19 0905 	adds.w	r9, r9, r5
 800414a:	eb4a 0a06 	adc.w	sl, sl, r6
 800414e:	f04f 0100 	mov.w	r1, #0
 8004152:	f04f 0200 	mov.w	r2, #0
 8004156:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800415a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800415e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004162:	4689      	mov	r9, r1
 8004164:	4692      	mov	sl, r2
 8004166:	eb19 0005 	adds.w	r0, r9, r5
 800416a:	eb4a 0106 	adc.w	r1, sl, r6
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	461d      	mov	r5, r3
 8004174:	f04f 0600 	mov.w	r6, #0
 8004178:	196b      	adds	r3, r5, r5
 800417a:	eb46 0406 	adc.w	r4, r6, r6
 800417e:	461a      	mov	r2, r3
 8004180:	4623      	mov	r3, r4
 8004182:	f7fc f821 	bl	80001c8 <__aeabi_uldivmod>
 8004186:	4603      	mov	r3, r0
 8004188:	460c      	mov	r4, r1
 800418a:	461a      	mov	r2, r3
 800418c:	4b2c      	ldr	r3, [pc, #176]	; (8004240 <UART_SetConfig+0x384>)
 800418e:	fba3 1302 	umull	r1, r3, r3, r2
 8004192:	095b      	lsrs	r3, r3, #5
 8004194:	2164      	movs	r1, #100	; 0x64
 8004196:	fb01 f303 	mul.w	r3, r1, r3
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	3332      	adds	r3, #50	; 0x32
 80041a0:	4a27      	ldr	r2, [pc, #156]	; (8004240 <UART_SetConfig+0x384>)
 80041a2:	fba2 2303 	umull	r2, r3, r2, r3
 80041a6:	095b      	lsrs	r3, r3, #5
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041ae:	4498      	add	r8, r3
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	461d      	mov	r5, r3
 80041b4:	f04f 0600 	mov.w	r6, #0
 80041b8:	46a9      	mov	r9, r5
 80041ba:	46b2      	mov	sl, r6
 80041bc:	eb19 0309 	adds.w	r3, r9, r9
 80041c0:	eb4a 040a 	adc.w	r4, sl, sl
 80041c4:	4699      	mov	r9, r3
 80041c6:	46a2      	mov	sl, r4
 80041c8:	eb19 0905 	adds.w	r9, r9, r5
 80041cc:	eb4a 0a06 	adc.w	sl, sl, r6
 80041d0:	f04f 0100 	mov.w	r1, #0
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041e4:	4689      	mov	r9, r1
 80041e6:	4692      	mov	sl, r2
 80041e8:	eb19 0005 	adds.w	r0, r9, r5
 80041ec:	eb4a 0106 	adc.w	r1, sl, r6
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	461d      	mov	r5, r3
 80041f6:	f04f 0600 	mov.w	r6, #0
 80041fa:	196b      	adds	r3, r5, r5
 80041fc:	eb46 0406 	adc.w	r4, r6, r6
 8004200:	461a      	mov	r2, r3
 8004202:	4623      	mov	r3, r4
 8004204:	f7fb ffe0 	bl	80001c8 <__aeabi_uldivmod>
 8004208:	4603      	mov	r3, r0
 800420a:	460c      	mov	r4, r1
 800420c:	461a      	mov	r2, r3
 800420e:	4b0c      	ldr	r3, [pc, #48]	; (8004240 <UART_SetConfig+0x384>)
 8004210:	fba3 1302 	umull	r1, r3, r3, r2
 8004214:	095b      	lsrs	r3, r3, #5
 8004216:	2164      	movs	r1, #100	; 0x64
 8004218:	fb01 f303 	mul.w	r3, r1, r3
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	3332      	adds	r3, #50	; 0x32
 8004222:	4a07      	ldr	r2, [pc, #28]	; (8004240 <UART_SetConfig+0x384>)
 8004224:	fba2 2303 	umull	r2, r3, r2, r3
 8004228:	095b      	lsrs	r3, r3, #5
 800422a:	f003 0207 	and.w	r2, r3, #7
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4442      	add	r2, r8
 8004234:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004236:	e1b2      	b.n	800459e <UART_SetConfig+0x6e2>
 8004238:	40011000 	.word	0x40011000
 800423c:	40011400 	.word	0x40011400
 8004240:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4ad7      	ldr	r2, [pc, #860]	; (80045a8 <UART_SetConfig+0x6ec>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d005      	beq.n	800425a <UART_SetConfig+0x39e>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4ad6      	ldr	r2, [pc, #856]	; (80045ac <UART_SetConfig+0x6f0>)
 8004254:	4293      	cmp	r3, r2
 8004256:	f040 80d1 	bne.w	80043fc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800425a:	f7fe fc43 	bl	8002ae4 <HAL_RCC_GetPCLK2Freq>
 800425e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	469a      	mov	sl, r3
 8004264:	f04f 0b00 	mov.w	fp, #0
 8004268:	46d0      	mov	r8, sl
 800426a:	46d9      	mov	r9, fp
 800426c:	eb18 0308 	adds.w	r3, r8, r8
 8004270:	eb49 0409 	adc.w	r4, r9, r9
 8004274:	4698      	mov	r8, r3
 8004276:	46a1      	mov	r9, r4
 8004278:	eb18 080a 	adds.w	r8, r8, sl
 800427c:	eb49 090b 	adc.w	r9, r9, fp
 8004280:	f04f 0100 	mov.w	r1, #0
 8004284:	f04f 0200 	mov.w	r2, #0
 8004288:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800428c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004290:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004294:	4688      	mov	r8, r1
 8004296:	4691      	mov	r9, r2
 8004298:	eb1a 0508 	adds.w	r5, sl, r8
 800429c:	eb4b 0609 	adc.w	r6, fp, r9
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	4619      	mov	r1, r3
 80042a6:	f04f 0200 	mov.w	r2, #0
 80042aa:	f04f 0300 	mov.w	r3, #0
 80042ae:	f04f 0400 	mov.w	r4, #0
 80042b2:	0094      	lsls	r4, r2, #2
 80042b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042b8:	008b      	lsls	r3, r1, #2
 80042ba:	461a      	mov	r2, r3
 80042bc:	4623      	mov	r3, r4
 80042be:	4628      	mov	r0, r5
 80042c0:	4631      	mov	r1, r6
 80042c2:	f7fb ff81 	bl	80001c8 <__aeabi_uldivmod>
 80042c6:	4603      	mov	r3, r0
 80042c8:	460c      	mov	r4, r1
 80042ca:	461a      	mov	r2, r3
 80042cc:	4bb8      	ldr	r3, [pc, #736]	; (80045b0 <UART_SetConfig+0x6f4>)
 80042ce:	fba3 2302 	umull	r2, r3, r3, r2
 80042d2:	095b      	lsrs	r3, r3, #5
 80042d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	469b      	mov	fp, r3
 80042dc:	f04f 0c00 	mov.w	ip, #0
 80042e0:	46d9      	mov	r9, fp
 80042e2:	46e2      	mov	sl, ip
 80042e4:	eb19 0309 	adds.w	r3, r9, r9
 80042e8:	eb4a 040a 	adc.w	r4, sl, sl
 80042ec:	4699      	mov	r9, r3
 80042ee:	46a2      	mov	sl, r4
 80042f0:	eb19 090b 	adds.w	r9, r9, fp
 80042f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80042f8:	f04f 0100 	mov.w	r1, #0
 80042fc:	f04f 0200 	mov.w	r2, #0
 8004300:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004304:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004308:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800430c:	4689      	mov	r9, r1
 800430e:	4692      	mov	sl, r2
 8004310:	eb1b 0509 	adds.w	r5, fp, r9
 8004314:	eb4c 060a 	adc.w	r6, ip, sl
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	4619      	mov	r1, r3
 800431e:	f04f 0200 	mov.w	r2, #0
 8004322:	f04f 0300 	mov.w	r3, #0
 8004326:	f04f 0400 	mov.w	r4, #0
 800432a:	0094      	lsls	r4, r2, #2
 800432c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004330:	008b      	lsls	r3, r1, #2
 8004332:	461a      	mov	r2, r3
 8004334:	4623      	mov	r3, r4
 8004336:	4628      	mov	r0, r5
 8004338:	4631      	mov	r1, r6
 800433a:	f7fb ff45 	bl	80001c8 <__aeabi_uldivmod>
 800433e:	4603      	mov	r3, r0
 8004340:	460c      	mov	r4, r1
 8004342:	461a      	mov	r2, r3
 8004344:	4b9a      	ldr	r3, [pc, #616]	; (80045b0 <UART_SetConfig+0x6f4>)
 8004346:	fba3 1302 	umull	r1, r3, r3, r2
 800434a:	095b      	lsrs	r3, r3, #5
 800434c:	2164      	movs	r1, #100	; 0x64
 800434e:	fb01 f303 	mul.w	r3, r1, r3
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	3332      	adds	r3, #50	; 0x32
 8004358:	4a95      	ldr	r2, [pc, #596]	; (80045b0 <UART_SetConfig+0x6f4>)
 800435a:	fba2 2303 	umull	r2, r3, r2, r3
 800435e:	095b      	lsrs	r3, r3, #5
 8004360:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004364:	4498      	add	r8, r3
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	469b      	mov	fp, r3
 800436a:	f04f 0c00 	mov.w	ip, #0
 800436e:	46d9      	mov	r9, fp
 8004370:	46e2      	mov	sl, ip
 8004372:	eb19 0309 	adds.w	r3, r9, r9
 8004376:	eb4a 040a 	adc.w	r4, sl, sl
 800437a:	4699      	mov	r9, r3
 800437c:	46a2      	mov	sl, r4
 800437e:	eb19 090b 	adds.w	r9, r9, fp
 8004382:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004386:	f04f 0100 	mov.w	r1, #0
 800438a:	f04f 0200 	mov.w	r2, #0
 800438e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004392:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004396:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800439a:	4689      	mov	r9, r1
 800439c:	4692      	mov	sl, r2
 800439e:	eb1b 0509 	adds.w	r5, fp, r9
 80043a2:	eb4c 060a 	adc.w	r6, ip, sl
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	4619      	mov	r1, r3
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	f04f 0300 	mov.w	r3, #0
 80043b4:	f04f 0400 	mov.w	r4, #0
 80043b8:	0094      	lsls	r4, r2, #2
 80043ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043be:	008b      	lsls	r3, r1, #2
 80043c0:	461a      	mov	r2, r3
 80043c2:	4623      	mov	r3, r4
 80043c4:	4628      	mov	r0, r5
 80043c6:	4631      	mov	r1, r6
 80043c8:	f7fb fefe 	bl	80001c8 <__aeabi_uldivmod>
 80043cc:	4603      	mov	r3, r0
 80043ce:	460c      	mov	r4, r1
 80043d0:	461a      	mov	r2, r3
 80043d2:	4b77      	ldr	r3, [pc, #476]	; (80045b0 <UART_SetConfig+0x6f4>)
 80043d4:	fba3 1302 	umull	r1, r3, r3, r2
 80043d8:	095b      	lsrs	r3, r3, #5
 80043da:	2164      	movs	r1, #100	; 0x64
 80043dc:	fb01 f303 	mul.w	r3, r1, r3
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	3332      	adds	r3, #50	; 0x32
 80043e6:	4a72      	ldr	r2, [pc, #456]	; (80045b0 <UART_SetConfig+0x6f4>)
 80043e8:	fba2 2303 	umull	r2, r3, r2, r3
 80043ec:	095b      	lsrs	r3, r3, #5
 80043ee:	f003 020f 	and.w	r2, r3, #15
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4442      	add	r2, r8
 80043f8:	609a      	str	r2, [r3, #8]
 80043fa:	e0d0      	b.n	800459e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80043fc:	f7fe fb5e 	bl	8002abc <HAL_RCC_GetPCLK1Freq>
 8004400:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	469a      	mov	sl, r3
 8004406:	f04f 0b00 	mov.w	fp, #0
 800440a:	46d0      	mov	r8, sl
 800440c:	46d9      	mov	r9, fp
 800440e:	eb18 0308 	adds.w	r3, r8, r8
 8004412:	eb49 0409 	adc.w	r4, r9, r9
 8004416:	4698      	mov	r8, r3
 8004418:	46a1      	mov	r9, r4
 800441a:	eb18 080a 	adds.w	r8, r8, sl
 800441e:	eb49 090b 	adc.w	r9, r9, fp
 8004422:	f04f 0100 	mov.w	r1, #0
 8004426:	f04f 0200 	mov.w	r2, #0
 800442a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800442e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004432:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004436:	4688      	mov	r8, r1
 8004438:	4691      	mov	r9, r2
 800443a:	eb1a 0508 	adds.w	r5, sl, r8
 800443e:	eb4b 0609 	adc.w	r6, fp, r9
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	4619      	mov	r1, r3
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	f04f 0300 	mov.w	r3, #0
 8004450:	f04f 0400 	mov.w	r4, #0
 8004454:	0094      	lsls	r4, r2, #2
 8004456:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800445a:	008b      	lsls	r3, r1, #2
 800445c:	461a      	mov	r2, r3
 800445e:	4623      	mov	r3, r4
 8004460:	4628      	mov	r0, r5
 8004462:	4631      	mov	r1, r6
 8004464:	f7fb feb0 	bl	80001c8 <__aeabi_uldivmod>
 8004468:	4603      	mov	r3, r0
 800446a:	460c      	mov	r4, r1
 800446c:	461a      	mov	r2, r3
 800446e:	4b50      	ldr	r3, [pc, #320]	; (80045b0 <UART_SetConfig+0x6f4>)
 8004470:	fba3 2302 	umull	r2, r3, r3, r2
 8004474:	095b      	lsrs	r3, r3, #5
 8004476:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	469b      	mov	fp, r3
 800447e:	f04f 0c00 	mov.w	ip, #0
 8004482:	46d9      	mov	r9, fp
 8004484:	46e2      	mov	sl, ip
 8004486:	eb19 0309 	adds.w	r3, r9, r9
 800448a:	eb4a 040a 	adc.w	r4, sl, sl
 800448e:	4699      	mov	r9, r3
 8004490:	46a2      	mov	sl, r4
 8004492:	eb19 090b 	adds.w	r9, r9, fp
 8004496:	eb4a 0a0c 	adc.w	sl, sl, ip
 800449a:	f04f 0100 	mov.w	r1, #0
 800449e:	f04f 0200 	mov.w	r2, #0
 80044a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044ae:	4689      	mov	r9, r1
 80044b0:	4692      	mov	sl, r2
 80044b2:	eb1b 0509 	adds.w	r5, fp, r9
 80044b6:	eb4c 060a 	adc.w	r6, ip, sl
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	4619      	mov	r1, r3
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	f04f 0300 	mov.w	r3, #0
 80044c8:	f04f 0400 	mov.w	r4, #0
 80044cc:	0094      	lsls	r4, r2, #2
 80044ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044d2:	008b      	lsls	r3, r1, #2
 80044d4:	461a      	mov	r2, r3
 80044d6:	4623      	mov	r3, r4
 80044d8:	4628      	mov	r0, r5
 80044da:	4631      	mov	r1, r6
 80044dc:	f7fb fe74 	bl	80001c8 <__aeabi_uldivmod>
 80044e0:	4603      	mov	r3, r0
 80044e2:	460c      	mov	r4, r1
 80044e4:	461a      	mov	r2, r3
 80044e6:	4b32      	ldr	r3, [pc, #200]	; (80045b0 <UART_SetConfig+0x6f4>)
 80044e8:	fba3 1302 	umull	r1, r3, r3, r2
 80044ec:	095b      	lsrs	r3, r3, #5
 80044ee:	2164      	movs	r1, #100	; 0x64
 80044f0:	fb01 f303 	mul.w	r3, r1, r3
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	3332      	adds	r3, #50	; 0x32
 80044fa:	4a2d      	ldr	r2, [pc, #180]	; (80045b0 <UART_SetConfig+0x6f4>)
 80044fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004500:	095b      	lsrs	r3, r3, #5
 8004502:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004506:	4498      	add	r8, r3
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	469b      	mov	fp, r3
 800450c:	f04f 0c00 	mov.w	ip, #0
 8004510:	46d9      	mov	r9, fp
 8004512:	46e2      	mov	sl, ip
 8004514:	eb19 0309 	adds.w	r3, r9, r9
 8004518:	eb4a 040a 	adc.w	r4, sl, sl
 800451c:	4699      	mov	r9, r3
 800451e:	46a2      	mov	sl, r4
 8004520:	eb19 090b 	adds.w	r9, r9, fp
 8004524:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004528:	f04f 0100 	mov.w	r1, #0
 800452c:	f04f 0200 	mov.w	r2, #0
 8004530:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004534:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004538:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800453c:	4689      	mov	r9, r1
 800453e:	4692      	mov	sl, r2
 8004540:	eb1b 0509 	adds.w	r5, fp, r9
 8004544:	eb4c 060a 	adc.w	r6, ip, sl
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	4619      	mov	r1, r3
 800454e:	f04f 0200 	mov.w	r2, #0
 8004552:	f04f 0300 	mov.w	r3, #0
 8004556:	f04f 0400 	mov.w	r4, #0
 800455a:	0094      	lsls	r4, r2, #2
 800455c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004560:	008b      	lsls	r3, r1, #2
 8004562:	461a      	mov	r2, r3
 8004564:	4623      	mov	r3, r4
 8004566:	4628      	mov	r0, r5
 8004568:	4631      	mov	r1, r6
 800456a:	f7fb fe2d 	bl	80001c8 <__aeabi_uldivmod>
 800456e:	4603      	mov	r3, r0
 8004570:	460c      	mov	r4, r1
 8004572:	461a      	mov	r2, r3
 8004574:	4b0e      	ldr	r3, [pc, #56]	; (80045b0 <UART_SetConfig+0x6f4>)
 8004576:	fba3 1302 	umull	r1, r3, r3, r2
 800457a:	095b      	lsrs	r3, r3, #5
 800457c:	2164      	movs	r1, #100	; 0x64
 800457e:	fb01 f303 	mul.w	r3, r1, r3
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	011b      	lsls	r3, r3, #4
 8004586:	3332      	adds	r3, #50	; 0x32
 8004588:	4a09      	ldr	r2, [pc, #36]	; (80045b0 <UART_SetConfig+0x6f4>)
 800458a:	fba2 2303 	umull	r2, r3, r2, r3
 800458e:	095b      	lsrs	r3, r3, #5
 8004590:	f003 020f 	and.w	r2, r3, #15
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4442      	add	r2, r8
 800459a:	609a      	str	r2, [r3, #8]
}
 800459c:	e7ff      	b.n	800459e <UART_SetConfig+0x6e2>
 800459e:	bf00      	nop
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045a8:	40011000 	.word	0x40011000
 80045ac:	40011400 	.word	0x40011400
 80045b0:	51eb851f 	.word	0x51eb851f

080045b4 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80045bc:	4b22      	ldr	r3, [pc, #136]	; (8004648 <WIZCHIP_READ+0x94>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	4798      	blx	r3
   WIZCHIP.CS._select();
 80045c2:	4b21      	ldr	r3, [pc, #132]	; (8004648 <WIZCHIP_READ+0x94>)
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80045c8:	4b1f      	ldr	r3, [pc, #124]	; (8004648 <WIZCHIP_READ+0x94>)
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <WIZCHIP_READ+0x24>
 80045d0:	4b1d      	ldr	r3, [pc, #116]	; (8004648 <WIZCHIP_READ+0x94>)
 80045d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d114      	bne.n	8004602 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80045d8:	4b1b      	ldr	r3, [pc, #108]	; (8004648 <WIZCHIP_READ+0x94>)
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	0c12      	lsrs	r2, r2, #16
 80045e0:	b2d2      	uxtb	r2, r2
 80045e2:	4610      	mov	r0, r2
 80045e4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80045e6:	4b18      	ldr	r3, [pc, #96]	; (8004648 <WIZCHIP_READ+0x94>)
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	0a12      	lsrs	r2, r2, #8
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	4610      	mov	r0, r2
 80045f2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80045f4:	4b14      	ldr	r3, [pc, #80]	; (8004648 <WIZCHIP_READ+0x94>)
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	4610      	mov	r0, r2
 80045fe:	4798      	blx	r3
 8004600:	e011      	b.n	8004626 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	0c1b      	lsrs	r3, r3, #16
 8004606:	b2db      	uxtb	r3, r3
 8004608:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	0a1b      	lsrs	r3, r3, #8
 800460e:	b2db      	uxtb	r3, r3
 8004610:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	b2db      	uxtb	r3, r3
 8004616:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004618:	4b0b      	ldr	r3, [pc, #44]	; (8004648 <WIZCHIP_READ+0x94>)
 800461a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461c:	f107 020c 	add.w	r2, r7, #12
 8004620:	2103      	movs	r1, #3
 8004622:	4610      	mov	r0, r2
 8004624:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8004626:	4b08      	ldr	r3, [pc, #32]	; (8004648 <WIZCHIP_READ+0x94>)
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	4798      	blx	r3
 800462c:	4603      	mov	r3, r0
 800462e:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8004630:	4b05      	ldr	r3, [pc, #20]	; (8004648 <WIZCHIP_READ+0x94>)
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004636:	4b04      	ldr	r3, [pc, #16]	; (8004648 <WIZCHIP_READ+0x94>)
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	4798      	blx	r3
   return ret;
 800463c:	7bfb      	ldrb	r3, [r7, #15]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	20000158 	.word	0x20000158

0800464c <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	460b      	mov	r3, r1
 8004656:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8004658:	4b22      	ldr	r3, [pc, #136]	; (80046e4 <WIZCHIP_WRITE+0x98>)
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800465e:	4b21      	ldr	r3, [pc, #132]	; (80046e4 <WIZCHIP_WRITE+0x98>)
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f043 0304 	orr.w	r3, r3, #4
 800466a:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800466c:	4b1d      	ldr	r3, [pc, #116]	; (80046e4 <WIZCHIP_WRITE+0x98>)
 800466e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004670:	2b00      	cmp	r3, #0
 8004672:	d119      	bne.n	80046a8 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004674:	4b1b      	ldr	r3, [pc, #108]	; (80046e4 <WIZCHIP_WRITE+0x98>)
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	0c12      	lsrs	r2, r2, #16
 800467c:	b2d2      	uxtb	r2, r2
 800467e:	4610      	mov	r0, r2
 8004680:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004682:	4b18      	ldr	r3, [pc, #96]	; (80046e4 <WIZCHIP_WRITE+0x98>)
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	0a12      	lsrs	r2, r2, #8
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	4610      	mov	r0, r2
 800468e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004690:	4b14      	ldr	r3, [pc, #80]	; (80046e4 <WIZCHIP_WRITE+0x98>)
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	b2d2      	uxtb	r2, r2
 8004698:	4610      	mov	r0, r2
 800469a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 800469c:	4b11      	ldr	r3, [pc, #68]	; (80046e4 <WIZCHIP_WRITE+0x98>)
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	78fa      	ldrb	r2, [r7, #3]
 80046a2:	4610      	mov	r0, r2
 80046a4:	4798      	blx	r3
 80046a6:	e013      	b.n	80046d0 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	0c1b      	lsrs	r3, r3, #16
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	0a1b      	lsrs	r3, r3, #8
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80046be:	78fb      	ldrb	r3, [r7, #3]
 80046c0:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80046c2:	4b08      	ldr	r3, [pc, #32]	; (80046e4 <WIZCHIP_WRITE+0x98>)
 80046c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c6:	f107 020c 	add.w	r2, r7, #12
 80046ca:	2104      	movs	r1, #4
 80046cc:	4610      	mov	r0, r2
 80046ce:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80046d0:	4b04      	ldr	r3, [pc, #16]	; (80046e4 <WIZCHIP_WRITE+0x98>)
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80046d6:	4b03      	ldr	r3, [pc, #12]	; (80046e4 <WIZCHIP_WRITE+0x98>)
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	4798      	blx	r3
}
 80046dc:	bf00      	nop
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	20000158 	.word	0x20000158

080046e8 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80046e8:	b590      	push	{r4, r7, lr}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	4613      	mov	r3, r2
 80046f4:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80046f6:	4b2b      	ldr	r3, [pc, #172]	; (80047a4 <WIZCHIP_READ_BUF+0xbc>)
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	4798      	blx	r3
   WIZCHIP.CS._select();
 80046fc:	4b29      	ldr	r3, [pc, #164]	; (80047a4 <WIZCHIP_READ_BUF+0xbc>)
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004702:	4b28      	ldr	r3, [pc, #160]	; (80047a4 <WIZCHIP_READ_BUF+0xbc>)
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <WIZCHIP_READ_BUF+0x2a>
 800470a:	4b26      	ldr	r3, [pc, #152]	; (80047a4 <WIZCHIP_READ_BUF+0xbc>)
 800470c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470e:	2b00      	cmp	r3, #0
 8004710:	d126      	bne.n	8004760 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004712:	4b24      	ldr	r3, [pc, #144]	; (80047a4 <WIZCHIP_READ_BUF+0xbc>)
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	0c12      	lsrs	r2, r2, #16
 800471a:	b2d2      	uxtb	r2, r2
 800471c:	4610      	mov	r0, r2
 800471e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004720:	4b20      	ldr	r3, [pc, #128]	; (80047a4 <WIZCHIP_READ_BUF+0xbc>)
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	0a12      	lsrs	r2, r2, #8
 8004728:	b2d2      	uxtb	r2, r2
 800472a:	4610      	mov	r0, r2
 800472c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800472e:	4b1d      	ldr	r3, [pc, #116]	; (80047a4 <WIZCHIP_READ_BUF+0xbc>)
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	b2d2      	uxtb	r2, r2
 8004736:	4610      	mov	r0, r2
 8004738:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800473a:	2300      	movs	r3, #0
 800473c:	82fb      	strh	r3, [r7, #22]
 800473e:	e00a      	b.n	8004756 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8004740:	4b18      	ldr	r3, [pc, #96]	; (80047a4 <WIZCHIP_READ_BUF+0xbc>)
 8004742:	69db      	ldr	r3, [r3, #28]
 8004744:	8afa      	ldrh	r2, [r7, #22]
 8004746:	68b9      	ldr	r1, [r7, #8]
 8004748:	188c      	adds	r4, r1, r2
 800474a:	4798      	blx	r3
 800474c:	4603      	mov	r3, r0
 800474e:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8004750:	8afb      	ldrh	r3, [r7, #22]
 8004752:	3301      	adds	r3, #1
 8004754:	82fb      	strh	r3, [r7, #22]
 8004756:	8afa      	ldrh	r2, [r7, #22]
 8004758:	88fb      	ldrh	r3, [r7, #6]
 800475a:	429a      	cmp	r2, r3
 800475c:	d3f0      	bcc.n	8004740 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800475e:	e017      	b.n	8004790 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	0c1b      	lsrs	r3, r3, #16
 8004764:	b2db      	uxtb	r3, r3
 8004766:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	0a1b      	lsrs	r3, r3, #8
 800476c:	b2db      	uxtb	r3, r3
 800476e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	b2db      	uxtb	r3, r3
 8004774:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004776:	4b0b      	ldr	r3, [pc, #44]	; (80047a4 <WIZCHIP_READ_BUF+0xbc>)
 8004778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477a:	f107 0210 	add.w	r2, r7, #16
 800477e:	2103      	movs	r1, #3
 8004780:	4610      	mov	r0, r2
 8004782:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8004784:	4b07      	ldr	r3, [pc, #28]	; (80047a4 <WIZCHIP_READ_BUF+0xbc>)
 8004786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004788:	88fa      	ldrh	r2, [r7, #6]
 800478a:	4611      	mov	r1, r2
 800478c:	68b8      	ldr	r0, [r7, #8]
 800478e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004790:	4b04      	ldr	r3, [pc, #16]	; (80047a4 <WIZCHIP_READ_BUF+0xbc>)
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004796:	4b03      	ldr	r3, [pc, #12]	; (80047a4 <WIZCHIP_READ_BUF+0xbc>)
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	4798      	blx	r3
}
 800479c:	bf00      	nop
 800479e:	371c      	adds	r7, #28
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd90      	pop	{r4, r7, pc}
 80047a4:	20000158 	.word	0x20000158

080047a8 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	4613      	mov	r3, r2
 80047b4:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80047b6:	4b2b      	ldr	r3, [pc, #172]	; (8004864 <WIZCHIP_WRITE_BUF+0xbc>)
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	4798      	blx	r3
   WIZCHIP.CS._select();
 80047bc:	4b29      	ldr	r3, [pc, #164]	; (8004864 <WIZCHIP_WRITE_BUF+0xbc>)
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f043 0304 	orr.w	r3, r3, #4
 80047c8:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80047ca:	4b26      	ldr	r3, [pc, #152]	; (8004864 <WIZCHIP_WRITE_BUF+0xbc>)
 80047cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d126      	bne.n	8004820 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80047d2:	4b24      	ldr	r3, [pc, #144]	; (8004864 <WIZCHIP_WRITE_BUF+0xbc>)
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	0c12      	lsrs	r2, r2, #16
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	4610      	mov	r0, r2
 80047de:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80047e0:	4b20      	ldr	r3, [pc, #128]	; (8004864 <WIZCHIP_WRITE_BUF+0xbc>)
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	0a12      	lsrs	r2, r2, #8
 80047e8:	b2d2      	uxtb	r2, r2
 80047ea:	4610      	mov	r0, r2
 80047ec:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80047ee:	4b1d      	ldr	r3, [pc, #116]	; (8004864 <WIZCHIP_WRITE_BUF+0xbc>)
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	b2d2      	uxtb	r2, r2
 80047f6:	4610      	mov	r0, r2
 80047f8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80047fa:	2300      	movs	r3, #0
 80047fc:	82fb      	strh	r3, [r7, #22]
 80047fe:	e00a      	b.n	8004816 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8004800:	4b18      	ldr	r3, [pc, #96]	; (8004864 <WIZCHIP_WRITE_BUF+0xbc>)
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	8afa      	ldrh	r2, [r7, #22]
 8004806:	68b9      	ldr	r1, [r7, #8]
 8004808:	440a      	add	r2, r1
 800480a:	7812      	ldrb	r2, [r2, #0]
 800480c:	4610      	mov	r0, r2
 800480e:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004810:	8afb      	ldrh	r3, [r7, #22]
 8004812:	3301      	adds	r3, #1
 8004814:	82fb      	strh	r3, [r7, #22]
 8004816:	8afa      	ldrh	r2, [r7, #22]
 8004818:	88fb      	ldrh	r3, [r7, #6]
 800481a:	429a      	cmp	r2, r3
 800481c:	d3f0      	bcc.n	8004800 <WIZCHIP_WRITE_BUF+0x58>
 800481e:	e017      	b.n	8004850 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	0c1b      	lsrs	r3, r3, #16
 8004824:	b2db      	uxtb	r3, r3
 8004826:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	0a1b      	lsrs	r3, r3, #8
 800482c:	b2db      	uxtb	r3, r3
 800482e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	b2db      	uxtb	r3, r3
 8004834:	74bb      	strb	r3, [r7, #18]
//		HAL_SPI_Transmit_DMA(&hspi1, spi_data, 3);
//		HAL_SPI_Transmit_DMA(&hspi1, pBuf, len );
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004836:	4b0b      	ldr	r3, [pc, #44]	; (8004864 <WIZCHIP_WRITE_BUF+0xbc>)
 8004838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483a:	f107 0210 	add.w	r2, r7, #16
 800483e:	2103      	movs	r1, #3
 8004840:	4610      	mov	r0, r2
 8004842:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8004844:	4b07      	ldr	r3, [pc, #28]	; (8004864 <WIZCHIP_WRITE_BUF+0xbc>)
 8004846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004848:	88fa      	ldrh	r2, [r7, #6]
 800484a:	4611      	mov	r1, r2
 800484c:	68b8      	ldr	r0, [r7, #8]
 800484e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004850:	4b04      	ldr	r3, [pc, #16]	; (8004864 <WIZCHIP_WRITE_BUF+0xbc>)
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004856:	4b03      	ldr	r3, [pc, #12]	; (8004864 <WIZCHIP_WRITE_BUF+0xbc>)
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	4798      	blx	r3
}
 800485c:	bf00      	nop
 800485e:	3718      	adds	r7, #24
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	20000158 	.word	0x20000158

08004868 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8004868:	b590      	push	{r4, r7, lr}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	4603      	mov	r3, r0
 8004870:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8004872:	2300      	movs	r3, #0
 8004874:	81fb      	strh	r3, [r7, #14]
 8004876:	2300      	movs	r3, #0
 8004878:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800487a:	79fb      	ldrb	r3, [r7, #7]
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	3301      	adds	r3, #1
 8004880:	00db      	lsls	r3, r3, #3
 8004882:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff fe94 	bl	80045b4 <WIZCHIP_READ>
 800488c:	4603      	mov	r3, r0
 800488e:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8004890:	89bb      	ldrh	r3, [r7, #12]
 8004892:	021b      	lsls	r3, r3, #8
 8004894:	b29c      	uxth	r4, r3
 8004896:	79fb      	ldrb	r3, [r7, #7]
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	3301      	adds	r3, #1
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7ff fe86 	bl	80045b4 <WIZCHIP_READ>
 80048a8:	4603      	mov	r3, r0
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	4423      	add	r3, r4
 80048ae:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80048b0:	89bb      	ldrh	r3, [r7, #12]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d01a      	beq.n	80048ec <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80048b6:	79fb      	ldrb	r3, [r7, #7]
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	3301      	adds	r3, #1
 80048bc:	00db      	lsls	r3, r3, #3
 80048be:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff fe76 	bl	80045b4 <WIZCHIP_READ>
 80048c8:	4603      	mov	r3, r0
 80048ca:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80048cc:	89fb      	ldrh	r3, [r7, #14]
 80048ce:	021b      	lsls	r3, r3, #8
 80048d0:	b29c      	uxth	r4, r3
 80048d2:	79fb      	ldrb	r3, [r7, #7]
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	3301      	adds	r3, #1
 80048d8:	00db      	lsls	r3, r3, #3
 80048da:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80048de:	4618      	mov	r0, r3
 80048e0:	f7ff fe68 	bl	80045b4 <WIZCHIP_READ>
 80048e4:	4603      	mov	r3, r0
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	4423      	add	r3, r4
 80048ea:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80048ec:	89fa      	ldrh	r2, [r7, #14]
 80048ee:	89bb      	ldrh	r3, [r7, #12]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d1c2      	bne.n	800487a <getSn_TX_FSR+0x12>
   return val;
 80048f4:	89fb      	ldrh	r3, [r7, #14]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd90      	pop	{r4, r7, pc}

080048fe <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80048fe:	b590      	push	{r4, r7, lr}
 8004900:	b085      	sub	sp, #20
 8004902:	af00      	add	r7, sp, #0
 8004904:	4603      	mov	r3, r0
 8004906:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8004908:	2300      	movs	r3, #0
 800490a:	81fb      	strh	r3, [r7, #14]
 800490c:	2300      	movs	r3, #0
 800490e:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8004910:	79fb      	ldrb	r3, [r7, #7]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	3301      	adds	r3, #1
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff fe49 	bl	80045b4 <WIZCHIP_READ>
 8004922:	4603      	mov	r3, r0
 8004924:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8004926:	89bb      	ldrh	r3, [r7, #12]
 8004928:	021b      	lsls	r3, r3, #8
 800492a:	b29c      	uxth	r4, r3
 800492c:	79fb      	ldrb	r3, [r7, #7]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	3301      	adds	r3, #1
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff fe3b 	bl	80045b4 <WIZCHIP_READ>
 800493e:	4603      	mov	r3, r0
 8004940:	b29b      	uxth	r3, r3
 8004942:	4423      	add	r3, r4
 8004944:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8004946:	89bb      	ldrh	r3, [r7, #12]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d01a      	beq.n	8004982 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 800494c:	79fb      	ldrb	r3, [r7, #7]
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	3301      	adds	r3, #1
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8004958:	4618      	mov	r0, r3
 800495a:	f7ff fe2b 	bl	80045b4 <WIZCHIP_READ>
 800495e:	4603      	mov	r3, r0
 8004960:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8004962:	89fb      	ldrh	r3, [r7, #14]
 8004964:	021b      	lsls	r3, r3, #8
 8004966:	b29c      	uxth	r4, r3
 8004968:	79fb      	ldrb	r3, [r7, #7]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	3301      	adds	r3, #1
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8004974:	4618      	mov	r0, r3
 8004976:	f7ff fe1d 	bl	80045b4 <WIZCHIP_READ>
 800497a:	4603      	mov	r3, r0
 800497c:	b29b      	uxth	r3, r3
 800497e:	4423      	add	r3, r4
 8004980:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8004982:	89fa      	ldrh	r2, [r7, #14]
 8004984:	89bb      	ldrh	r3, [r7, #12]
 8004986:	429a      	cmp	r2, r3
 8004988:	d1c2      	bne.n	8004910 <getSn_RX_RSR+0x12>
   return val;
 800498a:	89fb      	ldrh	r3, [r7, #14]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	bd90      	pop	{r4, r7, pc}

08004994 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8004994:	b590      	push	{r4, r7, lr}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	4603      	mov	r3, r0
 800499c:	6039      	str	r1, [r7, #0]
 800499e:	71fb      	strb	r3, [r7, #7]
 80049a0:	4613      	mov	r3, r2
 80049a2:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80049a4:	2300      	movs	r3, #0
 80049a6:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80049a8:	2300      	movs	r3, #0
 80049aa:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80049ac:	88bb      	ldrh	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d048      	beq.n	8004a44 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 80049b2:	79fb      	ldrb	r3, [r7, #7]
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	3301      	adds	r3, #1
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80049be:	4618      	mov	r0, r3
 80049c0:	f7ff fdf8 	bl	80045b4 <WIZCHIP_READ>
 80049c4:	4603      	mov	r3, r0
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	021b      	lsls	r3, r3, #8
 80049ca:	b29c      	uxth	r4, r3
 80049cc:	79fb      	ldrb	r3, [r7, #7]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	3301      	adds	r3, #1
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80049d8:	4618      	mov	r0, r3
 80049da:	f7ff fdeb 	bl	80045b4 <WIZCHIP_READ>
 80049de:	4603      	mov	r3, r0
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	4423      	add	r3, r4
 80049e4:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80049e6:	89fb      	ldrh	r3, [r7, #14]
 80049e8:	021b      	lsls	r3, r3, #8
 80049ea:	79fa      	ldrb	r2, [r7, #7]
 80049ec:	0092      	lsls	r2, r2, #2
 80049ee:	3202      	adds	r2, #2
 80049f0:	00d2      	lsls	r2, r2, #3
 80049f2:	4413      	add	r3, r2
 80049f4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80049f6:	88bb      	ldrh	r3, [r7, #4]
 80049f8:	461a      	mov	r2, r3
 80049fa:	6839      	ldr	r1, [r7, #0]
 80049fc:	68b8      	ldr	r0, [r7, #8]
 80049fe:	f7ff fed3 	bl	80047a8 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8004a02:	89fa      	ldrh	r2, [r7, #14]
 8004a04:	88bb      	ldrh	r3, [r7, #4]
 8004a06:	4413      	add	r3, r2
 8004a08:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8004a0a:	79fb      	ldrb	r3, [r7, #7]
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	3301      	adds	r3, #1
 8004a10:	00db      	lsls	r3, r3, #3
 8004a12:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004a16:	461a      	mov	r2, r3
 8004a18:	89fb      	ldrh	r3, [r7, #14]
 8004a1a:	0a1b      	lsrs	r3, r3, #8
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	4619      	mov	r1, r3
 8004a22:	4610      	mov	r0, r2
 8004a24:	f7ff fe12 	bl	800464c <WIZCHIP_WRITE>
 8004a28:	79fb      	ldrb	r3, [r7, #7]
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8004a34:	461a      	mov	r2, r3
 8004a36:	89fb      	ldrh	r3, [r7, #14]
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	4610      	mov	r0, r2
 8004a3e:	f7ff fe05 	bl	800464c <WIZCHIP_WRITE>
 8004a42:	e000      	b.n	8004a46 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8004a44:	bf00      	nop
}
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd90      	pop	{r4, r7, pc}

08004a4c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8004a4c:	b590      	push	{r4, r7, lr}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	4604      	mov	r4, r0
 8004a54:	4608      	mov	r0, r1
 8004a56:	4611      	mov	r1, r2
 8004a58:	461a      	mov	r2, r3
 8004a5a:	4623      	mov	r3, r4
 8004a5c:	71fb      	strb	r3, [r7, #7]
 8004a5e:	4603      	mov	r3, r0
 8004a60:	71bb      	strb	r3, [r7, #6]
 8004a62:	460b      	mov	r3, r1
 8004a64:	80bb      	strh	r3, [r7, #4]
 8004a66:	4613      	mov	r3, r2
 8004a68:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	2b08      	cmp	r3, #8
 8004a6e:	d902      	bls.n	8004a76 <socket+0x2a>
 8004a70:	f04f 33ff 	mov.w	r3, #4294967295
 8004a74:	e0f1      	b.n	8004c5a <socket+0x20e>
	switch(protocol)
 8004a76:	79bb      	ldrb	r3, [r7, #6]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d004      	beq.n	8004a86 <socket+0x3a>
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	db10      	blt.n	8004aa2 <socket+0x56>
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	dc0e      	bgt.n	8004aa2 <socket+0x56>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8004a84:	e010      	b.n	8004aa8 <socket+0x5c>
            getSIPR((uint8_t*)&taddr);
 8004a86:	f107 030c 	add.w	r3, r7, #12
 8004a8a:	2204      	movs	r2, #4
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004a92:	f7ff fe29 	bl	80046e8 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d105      	bne.n	8004aa8 <socket+0x5c>
 8004a9c:	f06f 0302 	mvn.w	r3, #2
 8004aa0:	e0db      	b.n	8004c5a <socket+0x20e>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8004aa2:	f06f 0304 	mvn.w	r3, #4
 8004aa6:	e0d8      	b.n	8004c5a <socket+0x20e>
         break;
 8004aa8:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8004aaa:	78fb      	ldrb	r3, [r7, #3]
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d002      	beq.n	8004aba <socket+0x6e>
 8004ab4:	f06f 0305 	mvn.w	r3, #5
 8004ab8:	e0cf      	b.n	8004c5a <socket+0x20e>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8004aba:	78fb      	ldrb	r3, [r7, #3]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d025      	beq.n	8004b0c <socket+0xc0>
	{
   	switch(protocol)
 8004ac0:	79bb      	ldrb	r3, [r7, #6]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d002      	beq.n	8004acc <socket+0x80>
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d008      	beq.n	8004adc <socket+0x90>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8004aca:	e024      	b.n	8004b16 <socket+0xca>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8004acc:	78fb      	ldrb	r3, [r7, #3]
 8004ace:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d11c      	bne.n	8004b10 <socket+0xc4>
 8004ad6:	f06f 0305 	mvn.w	r3, #5
 8004ada:	e0be      	b.n	8004c5a <socket+0x20e>
   	      if(flag & SF_IGMP_VER2)
 8004adc:	78fb      	ldrb	r3, [r7, #3]
 8004ade:	f003 0320 	and.w	r3, r3, #32
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d006      	beq.n	8004af4 <socket+0xa8>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8004ae6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	db02      	blt.n	8004af4 <socket+0xa8>
 8004aee:	f06f 0305 	mvn.w	r3, #5
 8004af2:	e0b2      	b.n	8004c5a <socket+0x20e>
      	      if(flag & SF_UNI_BLOCK)
 8004af4:	78fb      	ldrb	r3, [r7, #3]
 8004af6:	f003 0310 	and.w	r3, r3, #16
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00a      	beq.n	8004b14 <socket+0xc8>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8004afe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	db06      	blt.n	8004b14 <socket+0xc8>
 8004b06:	f06f 0305 	mvn.w	r3, #5
 8004b0a:	e0a6      	b.n	8004c5a <socket+0x20e>
   	}
   }
 8004b0c:	bf00      	nop
 8004b0e:	e002      	b.n	8004b16 <socket+0xca>
   	      break;
 8004b10:	bf00      	nop
 8004b12:	e000      	b.n	8004b16 <socket+0xca>
   	      break;
 8004b14:	bf00      	nop
	close(sn);
 8004b16:	79fb      	ldrb	r3, [r7, #7]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 f8ad 	bl	8004c78 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8004b1e:	79fb      	ldrb	r3, [r7, #7]
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	3301      	adds	r3, #1
 8004b24:	00db      	lsls	r3, r3, #3
 8004b26:	4618      	mov	r0, r3
 8004b28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b2c:	f023 030f 	bic.w	r3, r3, #15
 8004b30:	b25a      	sxtb	r2, r3
 8004b32:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	b25b      	sxtb	r3, r3
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	f7ff fd85 	bl	800464c <WIZCHIP_WRITE>
    #endif
	if(!port)
 8004b42:	88bb      	ldrh	r3, [r7, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d110      	bne.n	8004b6a <socket+0x11e>
	{
	   port = sock_any_port++;
 8004b48:	4b46      	ldr	r3, [pc, #280]	; (8004c64 <socket+0x218>)
 8004b4a:	881b      	ldrh	r3, [r3, #0]
 8004b4c:	1c5a      	adds	r2, r3, #1
 8004b4e:	b291      	uxth	r1, r2
 8004b50:	4a44      	ldr	r2, [pc, #272]	; (8004c64 <socket+0x218>)
 8004b52:	8011      	strh	r1, [r2, #0]
 8004b54:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8004b56:	4b43      	ldr	r3, [pc, #268]	; (8004c64 <socket+0x218>)
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d103      	bne.n	8004b6a <socket+0x11e>
 8004b62:	4b40      	ldr	r3, [pc, #256]	; (8004c64 <socket+0x218>)
 8004b64:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8004b68:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8004b6a:	79fb      	ldrb	r3, [r7, #7]
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	3301      	adds	r3, #1
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b76:	461a      	mov	r2, r3
 8004b78:	88bb      	ldrh	r3, [r7, #4]
 8004b7a:	0a1b      	lsrs	r3, r3, #8
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	4619      	mov	r1, r3
 8004b82:	4610      	mov	r0, r2
 8004b84:	f7ff fd62 	bl	800464c <WIZCHIP_WRITE>
 8004b88:	79fb      	ldrb	r3, [r7, #7]
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b94:	461a      	mov	r2, r3
 8004b96:	88bb      	ldrh	r3, [r7, #4]
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	4610      	mov	r0, r2
 8004b9e:	f7ff fd55 	bl	800464c <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8004ba2:	79fb      	ldrb	r3, [r7, #7]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004bae:	2101      	movs	r1, #1
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7ff fd4b 	bl	800464c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8004bb6:	bf00      	nop
 8004bb8:	79fb      	ldrb	r3, [r7, #7]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7ff fcf5 	bl	80045b4 <WIZCHIP_READ>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1f3      	bne.n	8004bb8 <socket+0x16c>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8004bd0:	79fb      	ldrb	r3, [r7, #7]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd8:	b21b      	sxth	r3, r3
 8004bda:	43db      	mvns	r3, r3
 8004bdc:	b21a      	sxth	r2, r3
 8004bde:	4b22      	ldr	r3, [pc, #136]	; (8004c68 <socket+0x21c>)
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	b21b      	sxth	r3, r3
 8004be4:	4013      	ands	r3, r2
 8004be6:	b21b      	sxth	r3, r3
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	4b1f      	ldr	r3, [pc, #124]	; (8004c68 <socket+0x21c>)
 8004bec:	801a      	strh	r2, [r3, #0]

	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);
 8004bee:	78fb      	ldrb	r3, [r7, #3]
 8004bf0:	f003 0201 	and.w	r2, r3, #1
 8004bf4:	79fb      	ldrb	r3, [r7, #7]
 8004bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfa:	b21a      	sxth	r2, r3
 8004bfc:	4b1a      	ldr	r3, [pc, #104]	; (8004c68 <socket+0x21c>)
 8004bfe:	881b      	ldrh	r3, [r3, #0]
 8004c00:	b21b      	sxth	r3, r3
 8004c02:	4313      	orrs	r3, r2
 8004c04:	b21b      	sxth	r3, r3
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	4b17      	ldr	r3, [pc, #92]	; (8004c68 <socket+0x21c>)
 8004c0a:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8004c0c:	79fb      	ldrb	r3, [r7, #7]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	fa02 f303 	lsl.w	r3, r2, r3
 8004c14:	b21b      	sxth	r3, r3
 8004c16:	43db      	mvns	r3, r3
 8004c18:	b21a      	sxth	r2, r3
 8004c1a:	4b14      	ldr	r3, [pc, #80]	; (8004c6c <socket+0x220>)
 8004c1c:	881b      	ldrh	r3, [r3, #0]
 8004c1e:	b21b      	sxth	r3, r3
 8004c20:	4013      	ands	r3, r2
 8004c22:	b21b      	sxth	r3, r3
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	4b11      	ldr	r3, [pc, #68]	; (8004c6c <socket+0x220>)
 8004c28:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8004c2a:	79fb      	ldrb	r3, [r7, #7]
 8004c2c:	4a10      	ldr	r2, [pc, #64]	; (8004c70 <socket+0x224>)
 8004c2e:	2100      	movs	r1, #0
 8004c30:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8004c34:	79fb      	ldrb	r3, [r7, #7]
 8004c36:	4a0f      	ldr	r2, [pc, #60]	; (8004c74 <socket+0x228>)
 8004c38:	2100      	movs	r1, #0
 8004c3a:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8004c3c:	bf00      	nop
 8004c3e:	79fb      	ldrb	r3, [r7, #7]
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	3301      	adds	r3, #1
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff fcb2 	bl	80045b4 <WIZCHIP_READ>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0f3      	beq.n	8004c3e <socket+0x1f2>
   return (int8_t)sn;
 8004c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd90      	pop	{r4, r7, pc}
 8004c62:	bf00      	nop
 8004c64:	20000156 	.word	0x20000156
 8004c68:	200002ac 	.word	0x200002ac
 8004c6c:	200002ae 	.word	0x200002ae
 8004c70:	200002b0 	.word	0x200002b0
 8004c74:	200002c0 	.word	0x200002c0

08004c78 <close>:

int8_t close(uint8_t sn)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	4603      	mov	r3, r0
 8004c80:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8004c82:	79fb      	ldrb	r3, [r7, #7]
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d902      	bls.n	8004c8e <close+0x16>
 8004c88:	f04f 33ff 	mov.w	r3, #4294967295
 8004c8c:	e055      	b.n	8004d3a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };
#endif
	setSn_CR(sn,Sn_CR_CLOSE);
 8004c8e:	79fb      	ldrb	r3, [r7, #7]
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	3301      	adds	r3, #1
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004c9a:	2110      	movs	r1, #16
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7ff fcd5 	bl	800464c <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8004ca2:	bf00      	nop
 8004ca4:	79fb      	ldrb	r3, [r7, #7]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	3301      	adds	r3, #1
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7ff fc7f 	bl	80045b4 <WIZCHIP_READ>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1f3      	bne.n	8004ca4 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8004cbc:	79fb      	ldrb	r3, [r7, #7]
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004cc8:	211f      	movs	r1, #31
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7ff fcbe 	bl	800464c <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8004cd0:	79fb      	ldrb	r3, [r7, #7]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd8:	b21b      	sxth	r3, r3
 8004cda:	43db      	mvns	r3, r3
 8004cdc:	b21a      	sxth	r2, r3
 8004cde:	4b19      	ldr	r3, [pc, #100]	; (8004d44 <close+0xcc>)
 8004ce0:	881b      	ldrh	r3, [r3, #0]
 8004ce2:	b21b      	sxth	r3, r3
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	b21b      	sxth	r3, r3
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	4b16      	ldr	r3, [pc, #88]	; (8004d44 <close+0xcc>)
 8004cec:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8004cee:	79fb      	ldrb	r3, [r7, #7]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf6:	b21b      	sxth	r3, r3
 8004cf8:	43db      	mvns	r3, r3
 8004cfa:	b21a      	sxth	r2, r3
 8004cfc:	4b12      	ldr	r3, [pc, #72]	; (8004d48 <close+0xd0>)
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	b21b      	sxth	r3, r3
 8004d02:	4013      	ands	r3, r2
 8004d04:	b21b      	sxth	r3, r3
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	4b0f      	ldr	r3, [pc, #60]	; (8004d48 <close+0xd0>)
 8004d0a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8004d0c:	79fb      	ldrb	r3, [r7, #7]
 8004d0e:	4a0f      	ldr	r2, [pc, #60]	; (8004d4c <close+0xd4>)
 8004d10:	2100      	movs	r1, #0
 8004d12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8004d16:	79fb      	ldrb	r3, [r7, #7]
 8004d18:	4a0d      	ldr	r2, [pc, #52]	; (8004d50 <close+0xd8>)
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8004d1e:	bf00      	nop
 8004d20:	79fb      	ldrb	r3, [r7, #7]
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	3301      	adds	r3, #1
 8004d26:	00db      	lsls	r3, r3, #3
 8004d28:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff fc41 	bl	80045b4 <WIZCHIP_READ>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1f3      	bne.n	8004d20 <close+0xa8>
	return SOCK_OK;
 8004d38:	2301      	movs	r3, #1
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3708      	adds	r7, #8
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	200002ac 	.word	0x200002ac
 8004d48:	200002ae 	.word	0x200002ae
 8004d4c:	200002b0 	.word	0x200002b0
 8004d50:	200002c0 	.word	0x200002c0

08004d54 <listen>:

int8_t listen(uint8_t sn)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8004d5e:	79fb      	ldrb	r3, [r7, #7]
 8004d60:	2b08      	cmp	r3, #8
 8004d62:	d902      	bls.n	8004d6a <listen+0x16>
 8004d64:	f04f 33ff 	mov.w	r3, #4294967295
 8004d68:	e049      	b.n	8004dfe <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004d6a:	79fb      	ldrb	r3, [r7, #7]
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	3301      	adds	r3, #1
 8004d70:	00db      	lsls	r3, r3, #3
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7ff fc1e 	bl	80045b4 <WIZCHIP_READ>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	f003 030f 	and.w	r3, r3, #15
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d002      	beq.n	8004d88 <listen+0x34>
 8004d82:	f06f 0304 	mvn.w	r3, #4
 8004d86:	e03a      	b.n	8004dfe <listen+0xaa>
	CHECK_SOCKINIT();
 8004d88:	79fb      	ldrb	r3, [r7, #7]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7ff fc0d 	bl	80045b4 <WIZCHIP_READ>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b13      	cmp	r3, #19
 8004d9e:	d002      	beq.n	8004da6 <listen+0x52>
 8004da0:	f06f 0302 	mvn.w	r3, #2
 8004da4:	e02b      	b.n	8004dfe <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8004da6:	79fb      	ldrb	r3, [r7, #7]
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	3301      	adds	r3, #1
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004db2:	2102      	movs	r1, #2
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7ff fc49 	bl	800464c <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8004dba:	bf00      	nop
 8004dbc:	79fb      	ldrb	r3, [r7, #7]
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7ff fbf3 	bl	80045b4 <WIZCHIP_READ>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1f3      	bne.n	8004dbc <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8004dd4:	e006      	b.n	8004de4 <listen+0x90>
   {
         close(sn);
 8004dd6:	79fb      	ldrb	r3, [r7, #7]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7ff ff4d 	bl	8004c78 <close>
         return SOCKERR_SOCKCLOSED;
 8004dde:	f06f 0303 	mvn.w	r3, #3
 8004de2:	e00c      	b.n	8004dfe <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8004de4:	79fb      	ldrb	r3, [r7, #7]
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	3301      	adds	r3, #1
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7ff fbdf 	bl	80045b4 <WIZCHIP_READ>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b14      	cmp	r3, #20
 8004dfa:	d1ec      	bne.n	8004dd6 <listen+0x82>
   }
   return SOCK_OK;
 8004dfc:	2301      	movs	r3, #1
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
	...

08004e08 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	4603      	mov	r3, r0
 8004e10:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8004e12:	79fb      	ldrb	r3, [r7, #7]
 8004e14:	2b08      	cmp	r3, #8
 8004e16:	d902      	bls.n	8004e1e <disconnect+0x16>
 8004e18:	f04f 33ff 	mov.w	r3, #4294967295
 8004e1c:	e062      	b.n	8004ee4 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004e1e:	79fb      	ldrb	r3, [r7, #7]
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	3301      	adds	r3, #1
 8004e24:	00db      	lsls	r3, r3, #3
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7ff fbc4 	bl	80045b4 <WIZCHIP_READ>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	f003 030f 	and.w	r3, r3, #15
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d002      	beq.n	8004e3c <disconnect+0x34>
 8004e36:	f06f 0304 	mvn.w	r3, #4
 8004e3a:	e053      	b.n	8004ee4 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8004e3c:	79fb      	ldrb	r3, [r7, #7]
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	3301      	adds	r3, #1
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004e48:	2108      	movs	r1, #8
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7ff fbfe 	bl	800464c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8004e50:	bf00      	nop
 8004e52:	79fb      	ldrb	r3, [r7, #7]
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	3301      	adds	r3, #1
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7ff fba8 	bl	80045b4 <WIZCHIP_READ>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1f3      	bne.n	8004e52 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8004e6a:	79fb      	ldrb	r3, [r7, #7]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e72:	b21b      	sxth	r3, r3
 8004e74:	43db      	mvns	r3, r3
 8004e76:	b21a      	sxth	r2, r3
 8004e78:	4b1c      	ldr	r3, [pc, #112]	; (8004eec <disconnect+0xe4>)
 8004e7a:	881b      	ldrh	r3, [r3, #0]
 8004e7c:	b21b      	sxth	r3, r3
 8004e7e:	4013      	ands	r3, r2
 8004e80:	b21b      	sxth	r3, r3
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	4b19      	ldr	r3, [pc, #100]	; (8004eec <disconnect+0xe4>)
 8004e86:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8004e88:	4b19      	ldr	r3, [pc, #100]	; (8004ef0 <disconnect+0xe8>)
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	79fb      	ldrb	r3, [r7, #7]
 8004e90:	fa42 f303 	asr.w	r3, r2, r3
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d016      	beq.n	8004eca <disconnect+0xc2>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	e021      	b.n	8004ee4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8004ea0:	79fb      	ldrb	r3, [r7, #7]
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7ff fb81 	bl	80045b4 <WIZCHIP_READ>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	f003 0308 	and.w	r3, r3, #8
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d006      	beq.n	8004eca <disconnect+0xc2>
	   {
	      close(sn);
 8004ebc:	79fb      	ldrb	r3, [r7, #7]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7ff feda 	bl	8004c78 <close>
	      return SOCKERR_TIMEOUT;
 8004ec4:	f06f 030c 	mvn.w	r3, #12
 8004ec8:	e00c      	b.n	8004ee4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8004eca:	79fb      	ldrb	r3, [r7, #7]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	3301      	adds	r3, #1
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7ff fb6c 	bl	80045b4 <WIZCHIP_READ>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1de      	bne.n	8004ea0 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8004ee2:	2301      	movs	r3, #1
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3708      	adds	r7, #8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	200002ae 	.word	0x200002ae
 8004ef0:	200002ac 	.word	0x200002ac

08004ef4 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	4603      	mov	r3, r0
 8004efc:	6039      	str	r1, [r7, #0]
 8004efe:	71fb      	strb	r3, [r7, #7]
 8004f00:	4613      	mov	r3, r2
 8004f02:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8004f04:	2300      	movs	r3, #0
 8004f06:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8004f0c:	79fb      	ldrb	r3, [r7, #7]
 8004f0e:	2b08      	cmp	r3, #8
 8004f10:	d902      	bls.n	8004f18 <send+0x24>
 8004f12:	f04f 33ff 	mov.w	r3, #4294967295
 8004f16:	e0de      	b.n	80050d6 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004f18:	79fb      	ldrb	r3, [r7, #7]
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7ff fb47 	bl	80045b4 <WIZCHIP_READ>
 8004f26:	4603      	mov	r3, r0
 8004f28:	f003 030f 	and.w	r3, r3, #15
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d002      	beq.n	8004f36 <send+0x42>
 8004f30:	f06f 0304 	mvn.w	r3, #4
 8004f34:	e0cf      	b.n	80050d6 <send+0x1e2>
   CHECK_SOCKDATA();
 8004f36:	88bb      	ldrh	r3, [r7, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d102      	bne.n	8004f42 <send+0x4e>
 8004f3c:	f06f 030d 	mvn.w	r3, #13
 8004f40:	e0c9      	b.n	80050d6 <send+0x1e2>

   tmp = getSn_SR(sn); //������ ��������� ������
 8004f42:	79fb      	ldrb	r3, [r7, #7]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	3301      	adds	r3, #1
 8004f48:	00db      	lsls	r3, r3, #3
 8004f4a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7ff fb30 	bl	80045b4 <WIZCHIP_READ>
 8004f54:	4603      	mov	r3, r0
 8004f56:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	2b17      	cmp	r3, #23
 8004f5c:	d005      	beq.n	8004f6a <send+0x76>
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
 8004f60:	2b1c      	cmp	r3, #28
 8004f62:	d002      	beq.n	8004f6a <send+0x76>
 8004f64:	f06f 0306 	mvn.w	r3, #6
 8004f68:	e0b5      	b.n	80050d6 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8004f6a:	4b5d      	ldr	r3, [pc, #372]	; (80050e0 <send+0x1ec>)
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	79fb      	ldrb	r3, [r7, #7]
 8004f72:	fa42 f303 	asr.w	r3, r2, r3
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d039      	beq.n	8004ff2 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8004f7e:	79fb      	ldrb	r3, [r7, #7]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	3301      	adds	r3, #1
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7ff fb12 	bl	80045b4 <WIZCHIP_READ>
 8004f90:	4603      	mov	r3, r0
 8004f92:	f003 031f 	and.w	r3, r3, #31
 8004f96:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8004f98:	7bfb      	ldrb	r3, [r7, #15]
 8004f9a:	f003 0310 	and.w	r3, r3, #16
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d019      	beq.n	8004fd6 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8004fa2:	79fb      	ldrb	r3, [r7, #7]
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	00db      	lsls	r3, r3, #3
 8004faa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004fae:	2110      	movs	r1, #16
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7ff fb4b 	bl	800464c <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);
 8004fb6:	79fb      	ldrb	r3, [r7, #7]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbe:	b21b      	sxth	r3, r3
 8004fc0:	43db      	mvns	r3, r3
 8004fc2:	b21a      	sxth	r2, r3
 8004fc4:	4b46      	ldr	r3, [pc, #280]	; (80050e0 <send+0x1ec>)
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	b21b      	sxth	r3, r3
 8004fca:	4013      	ands	r3, r2
 8004fcc:	b21b      	sxth	r3, r3
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	4b43      	ldr	r3, [pc, #268]	; (80050e0 <send+0x1ec>)
 8004fd2:	801a      	strh	r2, [r3, #0]
 8004fd4:	e00d      	b.n	8004ff2 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8004fd6:	7bfb      	ldrb	r3, [r7, #15]
 8004fd8:	f003 0308 	and.w	r3, r3, #8
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d006      	beq.n	8004fee <send+0xfa>
      {
         close(sn);
 8004fe0:	79fb      	ldrb	r3, [r7, #7]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7ff fe48 	bl	8004c78 <close>
         return SOCKERR_TIMEOUT;
 8004fe8:	f06f 030c 	mvn.w	r3, #12
 8004fec:	e073      	b.n	80050d6 <send+0x1e2>
      }
      else return SOCK_BUSY;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	e071      	b.n	80050d6 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8004ff2:	79fb      	ldrb	r3, [r7, #7]
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7ff fad8 	bl	80045b4 <WIZCHIP_READ>
 8005004:	4603      	mov	r3, r0
 8005006:	b29b      	uxth	r3, r3
 8005008:	029b      	lsls	r3, r3, #10
 800500a:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800500c:	88ba      	ldrh	r2, [r7, #4]
 800500e:	89bb      	ldrh	r3, [r7, #12]
 8005010:	429a      	cmp	r2, r3
 8005012:	d901      	bls.n	8005018 <send+0x124>
 8005014:	89bb      	ldrh	r3, [r7, #12]
 8005016:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8005018:	79fb      	ldrb	r3, [r7, #7]
 800501a:	4618      	mov	r0, r3
 800501c:	f7ff fc24 	bl	8004868 <getSn_TX_FSR>
 8005020:	4603      	mov	r3, r0
 8005022:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8005024:	79fb      	ldrb	r3, [r7, #7]
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	3301      	adds	r3, #1
 800502a:	00db      	lsls	r3, r3, #3
 800502c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005030:	4618      	mov	r0, r3
 8005032:	f7ff fabf 	bl	80045b4 <WIZCHIP_READ>
 8005036:	4603      	mov	r3, r0
 8005038:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800503a:	7bfb      	ldrb	r3, [r7, #15]
 800503c:	2b17      	cmp	r3, #23
 800503e:	d009      	beq.n	8005054 <send+0x160>
 8005040:	7bfb      	ldrb	r3, [r7, #15]
 8005042:	2b1c      	cmp	r3, #28
 8005044:	d006      	beq.n	8005054 <send+0x160>
      {
         close(sn);
 8005046:	79fb      	ldrb	r3, [r7, #7]
 8005048:	4618      	mov	r0, r3
 800504a:	f7ff fe15 	bl	8004c78 <close>
         return SOCKERR_SOCKSTATUS;
 800504e:	f06f 0306 	mvn.w	r3, #6
 8005052:	e040      	b.n	80050d6 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8005054:	4b23      	ldr	r3, [pc, #140]	; (80050e4 <send+0x1f0>)
 8005056:	881b      	ldrh	r3, [r3, #0]
 8005058:	461a      	mov	r2, r3
 800505a:	79fb      	ldrb	r3, [r7, #7]
 800505c:	fa42 f303 	asr.w	r3, r2, r3
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d005      	beq.n	8005074 <send+0x180>
 8005068:	88ba      	ldrh	r2, [r7, #4]
 800506a:	89bb      	ldrh	r3, [r7, #12]
 800506c:	429a      	cmp	r2, r3
 800506e:	d901      	bls.n	8005074 <send+0x180>
 8005070:	2300      	movs	r3, #0
 8005072:	e030      	b.n	80050d6 <send+0x1e2>
      if(len <= freesize) break;
 8005074:	88ba      	ldrh	r2, [r7, #4]
 8005076:	89bb      	ldrh	r3, [r7, #12]
 8005078:	429a      	cmp	r2, r3
 800507a:	d900      	bls.n	800507e <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 800507c:	e7cc      	b.n	8005018 <send+0x124>
      if(len <= freesize) break;
 800507e:	bf00      	nop
   }

   wiz_send_data(sn, buf, len);
 8005080:	88ba      	ldrh	r2, [r7, #4]
 8005082:	79fb      	ldrb	r3, [r7, #7]
 8005084:	6839      	ldr	r1, [r7, #0]
 8005086:	4618      	mov	r0, r3
 8005088:	f7ff fc84 	bl	8004994 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif

   setSn_CR(sn,Sn_CR_SEND);
 800508c:	79fb      	ldrb	r3, [r7, #7]
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	3301      	adds	r3, #1
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005098:	2120      	movs	r1, #32
 800509a:	4618      	mov	r0, r3
 800509c:	f7ff fad6 	bl	800464c <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80050a0:	bf00      	nop
 80050a2:	79fb      	ldrb	r3, [r7, #7]
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	3301      	adds	r3, #1
 80050a8:	00db      	lsls	r3, r3, #3
 80050aa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff fa80 	bl	80045b4 <WIZCHIP_READ>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1f3      	bne.n	80050a2 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 80050ba:	79fb      	ldrb	r3, [r7, #7]
 80050bc:	2201      	movs	r2, #1
 80050be:	fa02 f303 	lsl.w	r3, r2, r3
 80050c2:	b21a      	sxth	r2, r3
 80050c4:	4b06      	ldr	r3, [pc, #24]	; (80050e0 <send+0x1ec>)
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	b21b      	sxth	r3, r3
 80050ca:	4313      	orrs	r3, r2
 80050cc:	b21b      	sxth	r3, r3
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	4b03      	ldr	r3, [pc, #12]	; (80050e0 <send+0x1ec>)
 80050d2:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80050d4:	88bb      	ldrh	r3, [r7, #4]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	200002ae 	.word	0x200002ae
 80050e4:	200002ac 	.word	0x200002ac

080050e8 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	bf00      	nop
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80050f6:	b480      	push	{r7}
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	bf00      	nop
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
 8005108:	bf00      	nop
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8005112:	b480      	push	{r7}
 8005114:	af00      	add	r7, sp, #0
 8005116:	bf00      	nop
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	b2db      	uxtb	r3, r3
 800512e:	4618      	mov	r0, r3
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800513a:	b480      	push	{r7}
 800513c:	b083      	sub	sp, #12
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
 8005142:	460b      	mov	r3, r1
 8005144:	70fb      	strb	r3, [r7, #3]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	78fa      	ldrb	r2, [r7, #3]
 800514a:	701a      	strb	r2, [r3, #0]
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8005158:	b480      	push	{r7}
 800515a:	af00      	add	r7, sp, #0
 800515c:	2300      	movs	r3, #0
 800515e:	4618      	mov	r0, r3
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	4603      	mov	r3, r0
 8005170:	71fb      	strb	r3, [r7, #7]
 8005172:	bf00      	nop
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{};
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 800517e:	b480      	push	{r7}
 8005180:	b083      	sub	sp, #12
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
 8005186:	460b      	mov	r3, r1
 8005188:	807b      	strh	r3, [r7, #2]
 800518a:	bf00      	nop
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
 800519e:	460b      	mov	r3, r1
 80051a0:	807b      	strh	r3, [r7, #2]
 80051a2:	bf00      	nop
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
	...

080051b0 <reg_wizchip_cris_cbfunc>:

static uint8_t    _DNS_[4];      // DNS server ip address
static dhcp_mode  _DHCP_;        // DHCP mode

void reg_wizchip_cris_cbfunc(void(*cris_en)(void), void(*cris_ex)(void))
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
   if(!cris_en || !cris_ex)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d002      	beq.n	80051c6 <reg_wizchip_cris_cbfunc+0x16>
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d106      	bne.n	80051d4 <reg_wizchip_cris_cbfunc+0x24>
   {
      WIZCHIP.CRIS._enter = wizchip_cris_enter;
 80051c6:	4b09      	ldr	r3, [pc, #36]	; (80051ec <reg_wizchip_cris_cbfunc+0x3c>)
 80051c8:	4a09      	ldr	r2, [pc, #36]	; (80051f0 <reg_wizchip_cris_cbfunc+0x40>)
 80051ca:	60da      	str	r2, [r3, #12]
      WIZCHIP.CRIS._exit  = wizchip_cris_exit;
 80051cc:	4b07      	ldr	r3, [pc, #28]	; (80051ec <reg_wizchip_cris_cbfunc+0x3c>)
 80051ce:	4a09      	ldr	r2, [pc, #36]	; (80051f4 <reg_wizchip_cris_cbfunc+0x44>)
 80051d0:	611a      	str	r2, [r3, #16]
 80051d2:	e005      	b.n	80051e0 <reg_wizchip_cris_cbfunc+0x30>
   }
   else
   {
      WIZCHIP.CRIS._enter = cris_en;
 80051d4:	4a05      	ldr	r2, [pc, #20]	; (80051ec <reg_wizchip_cris_cbfunc+0x3c>)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	60d3      	str	r3, [r2, #12]
      WIZCHIP.CRIS._exit  = cris_ex;
 80051da:	4a04      	ldr	r2, [pc, #16]	; (80051ec <reg_wizchip_cris_cbfunc+0x3c>)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	6113      	str	r3, [r2, #16]
   }
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	20000158 	.word	0x20000158
 80051f0:	080050e9 	.word	0x080050e9
 80051f4:	080050f7 	.word	0x080050f7

080051f8 <reg_wizchip_cs_cbfunc>:

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d002      	beq.n	800520e <reg_wizchip_cs_cbfunc+0x16>
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d106      	bne.n	800521c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800520e:	4b09      	ldr	r3, [pc, #36]	; (8005234 <reg_wizchip_cs_cbfunc+0x3c>)
 8005210:	4a09      	ldr	r2, [pc, #36]	; (8005238 <reg_wizchip_cs_cbfunc+0x40>)
 8005212:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8005214:	4b07      	ldr	r3, [pc, #28]	; (8005234 <reg_wizchip_cs_cbfunc+0x3c>)
 8005216:	4a09      	ldr	r2, [pc, #36]	; (800523c <reg_wizchip_cs_cbfunc+0x44>)
 8005218:	619a      	str	r2, [r3, #24]
 800521a:	e005      	b.n	8005228 <reg_wizchip_cs_cbfunc+0x30>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 800521c:	4a05      	ldr	r2, [pc, #20]	; (8005234 <reg_wizchip_cs_cbfunc+0x3c>)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8005222:	4a04      	ldr	r2, [pc, #16]	; (8005234 <reg_wizchip_cs_cbfunc+0x3c>)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	6193      	str	r3, [r2, #24]
   }
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	20000158 	.word	0x20000158
 8005238:	08005105 	.word	0x08005105
 800523c:	08005113 	.word	0x08005113

08005240 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800524a:	bf00      	nop
 800524c:	4b0f      	ldr	r3, [pc, #60]	; (800528c <reg_wizchip_spi_cbfunc+0x4c>)
 800524e:	881b      	ldrh	r3, [r3, #0]
 8005250:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005254:	2b00      	cmp	r3, #0
 8005256:	d0f9      	beq.n	800524c <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d002      	beq.n	8005264 <reg_wizchip_spi_cbfunc+0x24>
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d106      	bne.n	8005272 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8005264:	4b09      	ldr	r3, [pc, #36]	; (800528c <reg_wizchip_spi_cbfunc+0x4c>)
 8005266:	4a0a      	ldr	r2, [pc, #40]	; (8005290 <reg_wizchip_spi_cbfunc+0x50>)
 8005268:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800526a:	4b08      	ldr	r3, [pc, #32]	; (800528c <reg_wizchip_spi_cbfunc+0x4c>)
 800526c:	4a09      	ldr	r2, [pc, #36]	; (8005294 <reg_wizchip_spi_cbfunc+0x54>)
 800526e:	621a      	str	r2, [r3, #32]
 8005270:	e005      	b.n	800527e <reg_wizchip_spi_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8005272:	4a06      	ldr	r2, [pc, #24]	; (800528c <reg_wizchip_spi_cbfunc+0x4c>)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8005278:	4a04      	ldr	r2, [pc, #16]	; (800528c <reg_wizchip_spi_cbfunc+0x4c>)
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	6213      	str	r3, [r2, #32]
   }
}
 800527e:	bf00      	nop
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	20000158 	.word	0x20000158
 8005290:	08005159 	.word	0x08005159
 8005294:	08005169 	.word	0x08005169

08005298 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80052a2:	bf00      	nop
 80052a4:	4b0f      	ldr	r3, [pc, #60]	; (80052e4 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80052a6:	881b      	ldrh	r3, [r3, #0]
 80052a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d0f9      	beq.n	80052a4 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d002      	beq.n	80052bc <reg_wizchip_spiburst_cbfunc+0x24>
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d106      	bne.n	80052ca <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 80052bc:	4b09      	ldr	r3, [pc, #36]	; (80052e4 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80052be:	4a0a      	ldr	r2, [pc, #40]	; (80052e8 <reg_wizchip_spiburst_cbfunc+0x50>)
 80052c0:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 80052c2:	4b08      	ldr	r3, [pc, #32]	; (80052e4 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80052c4:	4a09      	ldr	r2, [pc, #36]	; (80052ec <reg_wizchip_spiburst_cbfunc+0x54>)
 80052c6:	629a      	str	r2, [r3, #40]	; 0x28
 80052c8:	e005      	b.n	80052d6 <reg_wizchip_spiburst_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 80052ca:	4a06      	ldr	r2, [pc, #24]	; (80052e4 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 80052d0:	4a04      	ldr	r2, [pc, #16]	; (80052e4 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 80052d6:	bf00      	nop
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	20000158 	.word	0x20000158
 80052e8:	0800517f 	.word	0x0800517f
 80052ec:	08005197 	.word	0x08005197

080052f0 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 80052f0:	b590      	push	{r4, r7, lr}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	4603      	mov	r3, r0
 80052f8:	6039      	str	r1, [r7, #0]
 80052fa:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 80052fc:	2300      	movs	r3, #0
 80052fe:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8005300:	2300      	movs	r3, #0
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	2300      	movs	r3, #0
 8005306:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8005308:	79fb      	ldrb	r3, [r7, #7]
 800530a:	2b0f      	cmp	r3, #15
 800530c:	f200 80c2 	bhi.w	8005494 <ctlwizchip+0x1a4>
 8005310:	a201      	add	r2, pc, #4	; (adr r2, 8005318 <ctlwizchip+0x28>)
 8005312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005316:	bf00      	nop
 8005318:	08005359 	.word	0x08005359
 800531c:	0800535f 	.word	0x0800535f
 8005320:	0800538b 	.word	0x0800538b
 8005324:	0800537f 	.word	0x0800537f
 8005328:	08005399 	.word	0x08005399
 800532c:	080053a5 	.word	0x080053a5
 8005330:	080053b3 	.word	0x080053b3
 8005334:	080053d9 	.word	0x080053d9
 8005338:	080053ff 	.word	0x080053ff
 800533c:	08005439 	.word	0x08005439
 8005340:	0800543f 	.word	0x0800543f
 8005344:	08005447 	.word	0x08005447
 8005348:	0800549b 	.word	0x0800549b
 800534c:	0800544f 	.word	0x0800544f
 8005350:	0800545d 	.word	0x0800545d
 8005354:	08005479 	.word	0x08005479
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8005358:	f000 f8e6 	bl	8005528 <wizchip_sw_reset>
         break;
 800535c:	e09e      	b.n	800549c <ctlwizchip+0x1ac>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d004      	beq.n	800536e <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	3308      	adds	r3, #8
 800536c:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	4611      	mov	r1, r2
 8005374:	4618      	mov	r0, r3
 8005376:	f000 f923 	bl	80055c0 <wizchip_init>
 800537a:	4603      	mov	r3, r0
 800537c:	e08f      	b.n	800549e <ctlwizchip+0x1ae>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	881b      	ldrh	r3, [r3, #0]
 8005382:	4618      	mov	r0, r3
 8005384:	f000 f9a8 	bl	80056d8 <wizchip_clrinterrupt>
         break;
 8005388:	e088      	b.n	800549c <ctlwizchip+0x1ac>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 800538a:	f000 f9c3 	bl	8005714 <wizchip_getinterrupt>
 800538e:	4603      	mov	r3, r0
 8005390:	461a      	mov	r2, r3
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	801a      	strh	r2, [r3, #0]
         break;
 8005396:	e081      	b.n	800549c <ctlwizchip+0x1ac>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	881b      	ldrh	r3, [r3, #0]
 800539c:	4618      	mov	r0, r3
 800539e:	f000 f9de 	bl	800575e <wizchip_setinterruptmask>
         break;         
 80053a2:	e07b      	b.n	800549c <ctlwizchip+0x1ac>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 80053a4:	f000 f9f6 	bl	8005794 <wizchip_getinterruptmask>
 80053a8:	4603      	mov	r3, r0
 80053aa:	461a      	mov	r2, r3
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	801a      	strh	r2, [r3, #0]
         break;
 80053b0:	e074      	b.n	800549c <ctlwizchip+0x1ac>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	881b      	ldrh	r3, [r3, #0]
 80053b6:	0a1b      	lsrs	r3, r3, #8
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	4619      	mov	r1, r3
 80053be:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80053c2:	f7ff f943 	bl	800464c <WIZCHIP_WRITE>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	881b      	ldrh	r3, [r3, #0]
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	4619      	mov	r1, r3
 80053ce:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80053d2:	f7ff f93b 	bl	800464c <WIZCHIP_WRITE>
         break;
 80053d6:	e061      	b.n	800549c <ctlwizchip+0x1ac>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 80053d8:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80053dc:	f7ff f8ea 	bl	80045b4 <WIZCHIP_READ>
 80053e0:	4603      	mov	r3, r0
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	021b      	lsls	r3, r3, #8
 80053e6:	b29c      	uxth	r4, r3
 80053e8:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80053ec:	f7ff f8e2 	bl	80045b4 <WIZCHIP_READ>
 80053f0:	4603      	mov	r3, r0
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	4423      	add	r3, r4
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	801a      	strh	r2, [r3, #0]
         break;
 80053fc:	e04e      	b.n	800549c <ctlwizchip+0x1ac>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 80053fe:	4b2a      	ldr	r3, [pc, #168]	; (80054a8 <ctlwizchip+0x1b8>)
 8005400:	789a      	ldrb	r2, [r3, #2]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	3301      	adds	r3, #1
 800540a:	4a27      	ldr	r2, [pc, #156]	; (80054a8 <ctlwizchip+0x1b8>)
 800540c:	78d2      	ldrb	r2, [r2, #3]
 800540e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	3302      	adds	r3, #2
 8005414:	4a24      	ldr	r2, [pc, #144]	; (80054a8 <ctlwizchip+0x1b8>)
 8005416:	7912      	ldrb	r2, [r2, #4]
 8005418:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	3303      	adds	r3, #3
 800541e:	4a22      	ldr	r2, [pc, #136]	; (80054a8 <ctlwizchip+0x1b8>)
 8005420:	7952      	ldrb	r2, [r2, #5]
 8005422:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	3304      	adds	r3, #4
 8005428:	4a1f      	ldr	r2, [pc, #124]	; (80054a8 <ctlwizchip+0x1b8>)
 800542a:	7992      	ldrb	r2, [r2, #6]
 800542c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	3305      	adds	r3, #5
 8005432:	2200      	movs	r2, #0
 8005434:	701a      	strb	r2, [r3, #0]
         break;
 8005436:	e031      	b.n	800549c <ctlwizchip+0x1ac>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8005438:	f000 f9fe 	bl	8005838 <wizphy_reset>
         break;
 800543c:	e02e      	b.n	800549c <ctlwizchip+0x1ac>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 800543e:	6838      	ldr	r0, [r7, #0]
 8005440:	f000 fa21 	bl	8005886 <wizphy_setphyconf>
         break;
 8005444:	e02a      	b.n	800549c <ctlwizchip+0x1ac>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8005446:	6838      	ldr	r0, [r7, #0]
 8005448:	f000 fa5f 	bl	800590a <wizphy_getphyconf>
         break;
 800544c:	e026      	b.n	800549c <ctlwizchip+0x1ac>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	4618      	mov	r0, r3
 8005454:	f000 faa2 	bl	800599c <wizphy_setphypmode>
 8005458:	4603      	mov	r3, r0
 800545a:	e020      	b.n	800549e <ctlwizchip+0x1ae>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 800545c:	f000 f9d3 	bl	8005806 <wizphy_getphypmode>
 8005460:	4603      	mov	r3, r0
 8005462:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8005464:	7dfb      	ldrb	r3, [r7, #23]
 8005466:	2bff      	cmp	r3, #255	; 0xff
 8005468:	d102      	bne.n	8005470 <ctlwizchip+0x180>
 800546a:	f04f 33ff 	mov.w	r3, #4294967295
 800546e:	e016      	b.n	800549e <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	7dfa      	ldrb	r2, [r7, #23]
 8005474:	701a      	strb	r2, [r3, #0]
         break;
 8005476:	e011      	b.n	800549c <ctlwizchip+0x1ac>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8005478:	f000 f9af 	bl	80057da <wizphy_getphylink>
 800547c:	4603      	mov	r3, r0
 800547e:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8005480:	7dfb      	ldrb	r3, [r7, #23]
 8005482:	2bff      	cmp	r3, #255	; 0xff
 8005484:	d102      	bne.n	800548c <ctlwizchip+0x19c>
 8005486:	f04f 33ff 	mov.w	r3, #4294967295
 800548a:	e008      	b.n	800549e <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	7dfa      	ldrb	r2, [r7, #23]
 8005490:	701a      	strb	r2, [r3, #0]
         break;
 8005492:	e003      	b.n	800549c <ctlwizchip+0x1ac>
   #endif
      default:
         return -1;
 8005494:	f04f 33ff 	mov.w	r3, #4294967295
 8005498:	e001      	b.n	800549e <ctlwizchip+0x1ae>
         break;
 800549a:	bf00      	nop
   }
   return 0;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	371c      	adds	r7, #28
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd90      	pop	{r4, r7, pc}
 80054a6:	bf00      	nop
 80054a8:	20000158 	.word	0x20000158

080054ac <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	4603      	mov	r3, r0
 80054b4:	6039      	str	r1, [r7, #0]
 80054b6:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 80054b8:	79fb      	ldrb	r3, [r7, #7]
 80054ba:	2b05      	cmp	r3, #5
 80054bc:	d82c      	bhi.n	8005518 <ctlnetwork+0x6c>
 80054be:	a201      	add	r2, pc, #4	; (adr r2, 80054c4 <ctlnetwork+0x18>)
 80054c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c4:	080054dd 	.word	0x080054dd
 80054c8:	080054e5 	.word	0x080054e5
 80054cc:	080054ed 	.word	0x080054ed
 80054d0:	080054fb 	.word	0x080054fb
 80054d4:	08005509 	.word	0x08005509
 80054d8:	08005511 	.word	0x08005511
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 80054dc:	6838      	ldr	r0, [r7, #0]
 80054de:	f000 faa7 	bl	8005a30 <wizchip_setnetinfo>
         break;
 80054e2:	e01c      	b.n	800551e <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 80054e4:	6838      	ldr	r0, [r7, #0]
 80054e6:	f000 fae3 	bl	8005ab0 <wizchip_getnetinfo>
         break;
 80054ea:	e018      	b.n	800551e <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f000 fb1d 	bl	8005b30 <wizchip_setnetmode>
 80054f6:	4603      	mov	r3, r0
 80054f8:	e012      	b.n	8005520 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 80054fa:	f000 fb3b 	bl	8005b74 <wizchip_getnetmode>
 80054fe:	4603      	mov	r3, r0
 8005500:	461a      	mov	r2, r3
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	701a      	strb	r2, [r3, #0]
         break;
 8005506:	e00a      	b.n	800551e <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8005508:	6838      	ldr	r0, [r7, #0]
 800550a:	f000 fb3b 	bl	8005b84 <wizchip_settimeout>
         break;
 800550e:	e006      	b.n	800551e <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8005510:	6838      	ldr	r0, [r7, #0]
 8005512:	f000 fb58 	bl	8005bc6 <wizchip_gettimeout>
         break;
 8005516:	e002      	b.n	800551e <ctlnetwork+0x72>
      default:
         return -1;
 8005518:	f04f 33ff 	mov.w	r3, #4294967295
 800551c:	e000      	b.n	8005520 <ctlnetwork+0x74>
   }
   return 0;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3708      	adds	r7, #8
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800552e:	1d3b      	adds	r3, r7, #4
 8005530:	2206      	movs	r2, #6
 8005532:	4619      	mov	r1, r3
 8005534:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8005538:	f7ff f8d6 	bl	80046e8 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800553c:	f107 0314 	add.w	r3, r7, #20
 8005540:	2204      	movs	r2, #4
 8005542:	4619      	mov	r1, r3
 8005544:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005548:	f7ff f8ce 	bl	80046e8 <WIZCHIP_READ_BUF>
 800554c:	f107 0310 	add.w	r3, r7, #16
 8005550:	2204      	movs	r2, #4
 8005552:	4619      	mov	r1, r3
 8005554:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8005558:	f7ff f8c6 	bl	80046e8 <WIZCHIP_READ_BUF>
 800555c:	f107 030c 	add.w	r3, r7, #12
 8005560:	2204      	movs	r2, #4
 8005562:	4619      	mov	r1, r3
 8005564:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8005568:	f7ff f8be 	bl	80046e8 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 800556c:	2180      	movs	r1, #128	; 0x80
 800556e:	2000      	movs	r0, #0
 8005570:	f7ff f86c 	bl	800464c <WIZCHIP_WRITE>
   getMR(); // for delay
 8005574:	2000      	movs	r0, #0
 8005576:	f7ff f81d 	bl	80045b4 <WIZCHIP_READ>
//A2015051 : For indirect bus mode
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800557a:	1d3b      	adds	r3, r7, #4
 800557c:	2206      	movs	r2, #6
 800557e:	4619      	mov	r1, r3
 8005580:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8005584:	f7ff f910 	bl	80047a8 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8005588:	f107 0314 	add.w	r3, r7, #20
 800558c:	2204      	movs	r2, #4
 800558e:	4619      	mov	r1, r3
 8005590:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005594:	f7ff f908 	bl	80047a8 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8005598:	f107 0310 	add.w	r3, r7, #16
 800559c:	2204      	movs	r2, #4
 800559e:	4619      	mov	r1, r3
 80055a0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80055a4:	f7ff f900 	bl	80047a8 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80055a8:	f107 030c 	add.w	r3, r7, #12
 80055ac:	2204      	movs	r2, #4
 80055ae:	4619      	mov	r1, r3
 80055b0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80055b4:	f7ff f8f8 	bl	80047a8 <WIZCHIP_WRITE_BUF>
}
 80055b8:	bf00      	nop
 80055ba:	3718      	adds	r7, #24
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80055ca:	2300      	movs	r3, #0
 80055cc:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80055ce:	f7ff ffab 	bl	8005528 <wizchip_sw_reset>
   if(txsize)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d03b      	beq.n	8005650 <wizchip_init+0x90>
   {
      tmp = 0;
 80055d8:	2300      	movs	r3, #0
 80055da:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80055dc:	2300      	movs	r3, #0
 80055de:	73fb      	strb	r3, [r7, #15]
 80055e0:	e015      	b.n	800560e <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 80055e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	4413      	add	r3, r2
 80055ea:	781a      	ldrb	r2, [r3, #0]
 80055ec:	7bbb      	ldrb	r3, [r7, #14]
 80055ee:	4413      	add	r3, r2
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80055f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055f8:	2b10      	cmp	r3, #16
 80055fa:	dd02      	ble.n	8005602 <wizchip_init+0x42>
 80055fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005600:	e066      	b.n	80056d0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005606:	b2db      	uxtb	r3, r3
 8005608:	3301      	adds	r3, #1
 800560a:	b2db      	uxtb	r3, r3
 800560c:	73fb      	strb	r3, [r7, #15]
 800560e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005612:	2b07      	cmp	r3, #7
 8005614:	dde5      	ble.n	80055e2 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005616:	2300      	movs	r3, #0
 8005618:	73fb      	strb	r3, [r7, #15]
 800561a:	e015      	b.n	8005648 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 800561c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	3301      	adds	r3, #1
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800562a:	4618      	mov	r0, r3
 800562c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	4413      	add	r3, r2
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	4619      	mov	r1, r3
 8005638:	f7ff f808 	bl	800464c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800563c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005640:	b2db      	uxtb	r3, r3
 8005642:	3301      	adds	r3, #1
 8005644:	b2db      	uxtb	r3, r3
 8005646:	73fb      	strb	r3, [r7, #15]
 8005648:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800564c:	2b07      	cmp	r3, #7
 800564e:	dde5      	ble.n	800561c <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d03b      	beq.n	80056ce <wizchip_init+0x10e>
   {
      tmp = 0;
 8005656:	2300      	movs	r3, #0
 8005658:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800565a:	2300      	movs	r3, #0
 800565c:	73fb      	strb	r3, [r7, #15]
 800565e:	e015      	b.n	800568c <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8005660:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	4413      	add	r3, r2
 8005668:	781a      	ldrb	r2, [r3, #0]
 800566a:	7bbb      	ldrb	r3, [r7, #14]
 800566c:	4413      	add	r3, r2
 800566e:	b2db      	uxtb	r3, r3
 8005670:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8005672:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005676:	2b10      	cmp	r3, #16
 8005678:	dd02      	ble.n	8005680 <wizchip_init+0xc0>
 800567a:	f04f 33ff 	mov.w	r3, #4294967295
 800567e:	e027      	b.n	80056d0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005680:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005684:	b2db      	uxtb	r3, r3
 8005686:	3301      	adds	r3, #1
 8005688:	b2db      	uxtb	r3, r3
 800568a:	73fb      	strb	r3, [r7, #15]
 800568c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005690:	2b07      	cmp	r3, #7
 8005692:	dde5      	ble.n	8005660 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005694:	2300      	movs	r3, #0
 8005696:	73fb      	strb	r3, [r7, #15]
 8005698:	e015      	b.n	80056c6 <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800569a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	3301      	adds	r3, #1
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80056a8:	4618      	mov	r0, r3
 80056aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	4413      	add	r3, r2
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	4619      	mov	r1, r3
 80056b6:	f7fe ffc9 	bl	800464c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80056ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	3301      	adds	r3, #1
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	73fb      	strb	r3, [r7, #15]
 80056c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056ca:	2b07      	cmp	r3, #7
 80056cc:	dde5      	ble.n	800569a <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	4603      	mov	r3, r0
 80056e0:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 80056e2:	88fb      	ldrh	r3, [r7, #6]
 80056e4:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80056e6:	88fb      	ldrh	r3, [r7, #6]
 80056e8:	0a1b      	lsrs	r3, r3, #8
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 80056ee:	7bfb      	ldrb	r3, [r7, #15]
 80056f0:	f023 030f 	bic.w	r3, r3, #15
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	4619      	mov	r1, r3
 80056f8:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80056fc:	f7fe ffa6 	bl	800464c <WIZCHIP_WRITE>
   setSIR(sir);
 8005700:	7bbb      	ldrb	r3, [r7, #14]
 8005702:	4619      	mov	r1, r3
 8005704:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8005708:	f7fe ffa0 	bl	800464c <WIZCHIP_WRITE>
#endif   
}
 800570c:	bf00      	nop
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 800571a:	2300      	movs	r3, #0
 800571c:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 800571e:	2300      	movs	r3, #0
 8005720:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8005722:	2300      	movs	r3, #0
 8005724:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8005726:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 800572a:	f7fe ff43 	bl	80045b4 <WIZCHIP_READ>
 800572e:	4603      	mov	r3, r0
 8005730:	f023 030f 	bic.w	r3, r3, #15
 8005734:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8005736:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 800573a:	f7fe ff3b 	bl	80045b4 <WIZCHIP_READ>
 800573e:	4603      	mov	r3, r0
 8005740:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8005742:	79bb      	ldrb	r3, [r7, #6]
 8005744:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8005746:	88bb      	ldrh	r3, [r7, #4]
 8005748:	021b      	lsls	r3, r3, #8
 800574a:	b29a      	uxth	r2, r3
 800574c:	79fb      	ldrb	r3, [r7, #7]
 800574e:	b29b      	uxth	r3, r3
 8005750:	4413      	add	r3, r2
 8005752:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8005754:	88bb      	ldrh	r3, [r7, #4]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b084      	sub	sp, #16
 8005762:	af00      	add	r7, sp, #0
 8005764:	4603      	mov	r3, r0
 8005766:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8005768:	88fb      	ldrh	r3, [r7, #6]
 800576a:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 800576c:	88fb      	ldrh	r3, [r7, #6]
 800576e:	0a1b      	lsrs	r3, r3, #8
 8005770:	b29b      	uxth	r3, r3
 8005772:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8005774:	7bfb      	ldrb	r3, [r7, #15]
 8005776:	4619      	mov	r1, r3
 8005778:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800577c:	f7fe ff66 	bl	800464c <WIZCHIP_WRITE>
   setSIMR(simr);
 8005780:	7bbb      	ldrb	r3, [r7, #14]
 8005782:	4619      	mov	r1, r3
 8005784:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8005788:	f7fe ff60 	bl	800464c <WIZCHIP_WRITE>
#endif   
}
 800578c:	bf00      	nop
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 800579a:	2300      	movs	r3, #0
 800579c:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 800579e:	2300      	movs	r3, #0
 80057a0:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80057a2:	2300      	movs	r3, #0
 80057a4:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 80057a6:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80057aa:	f7fe ff03 	bl	80045b4 <WIZCHIP_READ>
 80057ae:	4603      	mov	r3, r0
 80057b0:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 80057b2:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80057b6:	f7fe fefd 	bl	80045b4 <WIZCHIP_READ>
 80057ba:	4603      	mov	r3, r0
 80057bc:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 80057be:	79bb      	ldrb	r3, [r7, #6]
 80057c0:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 80057c2:	88bb      	ldrh	r3, [r7, #4]
 80057c4:	021b      	lsls	r3, r3, #8
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	79fb      	ldrb	r3, [r7, #7]
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	4413      	add	r3, r2
 80057ce:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80057d0:	88bb      	ldrh	r3, [r7, #4]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b082      	sub	sp, #8
 80057de:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 80057e0:	2300      	movs	r3, #0
 80057e2:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 80057e4:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80057e8:	f7fe fee4 	bl	80045b4 <WIZCHIP_READ>
 80057ec:	4603      	mov	r3, r0
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d001      	beq.n	80057fa <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 80057f6:	2301      	movs	r3, #1
 80057f8:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 80057fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3708      	adds	r7, #8
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b082      	sub	sp, #8
 800580a:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 800580c:	2300      	movs	r3, #0
 800580e:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8005810:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8005814:	f7fe fece 	bl	80045b4 <WIZCHIP_READ>
 8005818:	4603      	mov	r3, r0
 800581a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800581e:	2b30      	cmp	r3, #48	; 0x30
 8005820:	d102      	bne.n	8005828 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8005822:	2301      	movs	r3, #1
 8005824:	71fb      	strb	r3, [r7, #7]
 8005826:	e001      	b.n	800582c <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8005828:	2300      	movs	r3, #0
 800582a:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 800582c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8005830:	4618      	mov	r0, r3
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 800583e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8005842:	f7fe feb7 	bl	80045b4 <WIZCHIP_READ>
 8005846:	4603      	mov	r3, r0
 8005848:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 800584a:	79fb      	ldrb	r3, [r7, #7]
 800584c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005850:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8005852:	79fb      	ldrb	r3, [r7, #7]
 8005854:	4619      	mov	r1, r3
 8005856:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800585a:	f7fe fef7 	bl	800464c <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 800585e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8005862:	f7fe fea7 	bl	80045b4 <WIZCHIP_READ>
 8005866:	4603      	mov	r3, r0
 8005868:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 800586a:	79fb      	ldrb	r3, [r7, #7]
 800586c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005870:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8005872:	79fb      	ldrb	r3, [r7, #7]
 8005874:	4619      	mov	r1, r3
 8005876:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800587a:	f7fe fee7 	bl	800464c <WIZCHIP_WRITE>
}
 800587e:	bf00      	nop
 8005880:	3708      	adds	r7, #8
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8005886:	b580      	push	{r7, lr}
 8005888:	b084      	sub	sp, #16
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800588e:	2300      	movs	r3, #0
 8005890:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d104      	bne.n	80058a4 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 800589a:	7bfb      	ldrb	r3, [r7, #15]
 800589c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058a0:	73fb      	strb	r3, [r7, #15]
 80058a2:	e003      	b.n	80058ac <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
 80058a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058aa:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	785b      	ldrb	r3, [r3, #1]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d104      	bne.n	80058be <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 80058b4:	7bfb      	ldrb	r3, [r7, #15]
 80058b6:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80058ba:	73fb      	strb	r3, [r7, #15]
 80058bc:	e019      	b.n	80058f2 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	78db      	ldrb	r3, [r3, #3]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d10d      	bne.n	80058e2 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	789b      	ldrb	r3, [r3, #2]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d104      	bne.n	80058d8 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 80058ce:	7bfb      	ldrb	r3, [r7, #15]
 80058d0:	f043 0318 	orr.w	r3, r3, #24
 80058d4:	73fb      	strb	r3, [r7, #15]
 80058d6:	e00c      	b.n	80058f2 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
 80058da:	f043 0308 	orr.w	r3, r3, #8
 80058de:	73fb      	strb	r3, [r7, #15]
 80058e0:	e007      	b.n	80058f2 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	789b      	ldrb	r3, [r3, #2]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d103      	bne.n	80058f2 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
 80058ec:	f043 0310 	orr.w	r3, r3, #16
 80058f0:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 80058f2:	7bfb      	ldrb	r3, [r7, #15]
 80058f4:	4619      	mov	r1, r3
 80058f6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80058fa:	f7fe fea7 	bl	800464c <WIZCHIP_WRITE>
   wizphy_reset();
 80058fe:	f7ff ff9b 	bl	8005838 <wizphy_reset>
}
 8005902:	bf00      	nop
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b084      	sub	sp, #16
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8005912:	2300      	movs	r3, #0
 8005914:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8005916:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800591a:	f7fe fe4b 	bl	80045b4 <WIZCHIP_READ>
 800591e:	4603      	mov	r3, r0
 8005920:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8005922:	7bfb      	ldrb	r3, [r7, #15]
 8005924:	119b      	asrs	r3, r3, #6
 8005926:	b2db      	uxtb	r3, r3
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	b2da      	uxtb	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8005932:	7bfb      	ldrb	r3, [r7, #15]
 8005934:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005938:	2b20      	cmp	r3, #32
 800593a:	d001      	beq.n	8005940 <wizphy_getphyconf+0x36>
 800593c:	2b38      	cmp	r3, #56	; 0x38
 800593e:	d103      	bne.n	8005948 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	705a      	strb	r2, [r3, #1]
         break;
 8005946:	e003      	b.n	8005950 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	705a      	strb	r2, [r3, #1]
         break;
 800594e:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8005950:	7bfb      	ldrb	r3, [r7, #15]
 8005952:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005956:	2b18      	cmp	r3, #24
 8005958:	d003      	beq.n	8005962 <wizphy_getphyconf+0x58>
 800595a:	2b20      	cmp	r3, #32
 800595c:	d001      	beq.n	8005962 <wizphy_getphyconf+0x58>
 800595e:	2b10      	cmp	r3, #16
 8005960:	d103      	bne.n	800596a <wizphy_getphyconf+0x60>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	709a      	strb	r2, [r3, #2]
         break;
 8005968:	e003      	b.n	8005972 <wizphy_getphyconf+0x68>
      default:
         phyconf->speed = PHY_SPEED_10;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	709a      	strb	r2, [r3, #2]
         break;
 8005970:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8005972:	7bfb      	ldrb	r3, [r7, #15]
 8005974:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005978:	2b18      	cmp	r3, #24
 800597a:	d003      	beq.n	8005984 <wizphy_getphyconf+0x7a>
 800597c:	2b20      	cmp	r3, #32
 800597e:	d001      	beq.n	8005984 <wizphy_getphyconf+0x7a>
 8005980:	2b08      	cmp	r3, #8
 8005982:	d103      	bne.n	800598c <wizphy_getphyconf+0x82>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	70da      	strb	r2, [r3, #3]
         break;
 800598a:	e003      	b.n	8005994 <wizphy_getphyconf+0x8a>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	70da      	strb	r2, [r3, #3]
         break;
 8005992:	bf00      	nop
   }
}
 8005994:	bf00      	nop
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	4603      	mov	r3, r0
 80059a4:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80059a6:	2300      	movs	r3, #0
 80059a8:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80059aa:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80059ae:	f7fe fe01 	bl	80045b4 <WIZCHIP_READ>
 80059b2:	4603      	mov	r3, r0
 80059b4:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80059b6:	7bfb      	ldrb	r3, [r7, #15]
 80059b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d102      	bne.n	80059c6 <wizphy_setphypmode+0x2a>
 80059c0:	f04f 33ff 	mov.w	r3, #4294967295
 80059c4:	e030      	b.n	8005a28 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 80059c6:	7bfb      	ldrb	r3, [r7, #15]
 80059c8:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80059cc:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80059ce:	79fb      	ldrb	r3, [r7, #7]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d104      	bne.n	80059de <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 80059d4:	7bfb      	ldrb	r3, [r7, #15]
 80059d6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80059da:	73fb      	strb	r3, [r7, #15]
 80059dc:	e003      	b.n	80059e6 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 80059de:	7bfb      	ldrb	r3, [r7, #15]
 80059e0:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80059e4:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 80059e6:	7bfb      	ldrb	r3, [r7, #15]
 80059e8:	4619      	mov	r1, r3
 80059ea:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80059ee:	f7fe fe2d 	bl	800464c <WIZCHIP_WRITE>
   wizphy_reset();
 80059f2:	f7ff ff21 	bl	8005838 <wizphy_reset>
   tmp = getPHYCFGR();
 80059f6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80059fa:	f7fe fddb 	bl	80045b4 <WIZCHIP_READ>
 80059fe:	4603      	mov	r3, r0
 8005a00:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8005a02:	79fb      	ldrb	r3, [r7, #7]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d106      	bne.n	8005a16 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8005a08:	7bfb      	ldrb	r3, [r7, #15]
 8005a0a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d008      	beq.n	8005a24 <wizphy_setphypmode+0x88>
 8005a12:	2300      	movs	r3, #0
 8005a14:	e008      	b.n	8005a28 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8005a16:	7bfb      	ldrb	r3, [r7, #15]
 8005a18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d001      	beq.n	8005a24 <wizphy_setphypmode+0x88>
 8005a20:	2300      	movs	r3, #0
 8005a22:	e001      	b.n	8005a28 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8005a24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2206      	movs	r2, #6
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8005a42:	f7fe feb1 	bl	80047a8 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	330e      	adds	r3, #14
 8005a4a:	2204      	movs	r2, #4
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005a52:	f7fe fea9 	bl	80047a8 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	330a      	adds	r3, #10
 8005a5a:	2204      	movs	r2, #4
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8005a62:	f7fe fea1 	bl	80047a8 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	3306      	adds	r3, #6
 8005a6a:	2204      	movs	r2, #4
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8005a72:	f7fe fe99 	bl	80047a8 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	7c9a      	ldrb	r2, [r3, #18]
 8005a7a:	4b0b      	ldr	r3, [pc, #44]	; (8005aa8 <wizchip_setnetinfo+0x78>)
 8005a7c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	7cda      	ldrb	r2, [r3, #19]
 8005a82:	4b09      	ldr	r3, [pc, #36]	; (8005aa8 <wizchip_setnetinfo+0x78>)
 8005a84:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	7d1a      	ldrb	r2, [r3, #20]
 8005a8a:	4b07      	ldr	r3, [pc, #28]	; (8005aa8 <wizchip_setnetinfo+0x78>)
 8005a8c:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	7d5a      	ldrb	r2, [r3, #21]
 8005a92:	4b05      	ldr	r3, [pc, #20]	; (8005aa8 <wizchip_setnetinfo+0x78>)
 8005a94:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	7d9a      	ldrb	r2, [r3, #22]
 8005a9a:	4b04      	ldr	r3, [pc, #16]	; (8005aac <wizchip_setnetinfo+0x7c>)
 8005a9c:	701a      	strb	r2, [r3, #0]
}
 8005a9e:	bf00      	nop
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	200002c8 	.word	0x200002c8
 8005aac:	200002cc 	.word	0x200002cc

08005ab0 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2206      	movs	r2, #6
 8005abc:	4619      	mov	r1, r3
 8005abe:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8005ac2:	f7fe fe11 	bl	80046e8 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	330e      	adds	r3, #14
 8005aca:	2204      	movs	r2, #4
 8005acc:	4619      	mov	r1, r3
 8005ace:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005ad2:	f7fe fe09 	bl	80046e8 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	330a      	adds	r3, #10
 8005ada:	2204      	movs	r2, #4
 8005adc:	4619      	mov	r1, r3
 8005ade:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8005ae2:	f7fe fe01 	bl	80046e8 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	3306      	adds	r3, #6
 8005aea:	2204      	movs	r2, #4
 8005aec:	4619      	mov	r1, r3
 8005aee:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8005af2:	f7fe fdf9 	bl	80046e8 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8005af6:	4b0c      	ldr	r3, [pc, #48]	; (8005b28 <wizchip_getnetinfo+0x78>)
 8005af8:	781a      	ldrb	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8005afe:	4b0a      	ldr	r3, [pc, #40]	; (8005b28 <wizchip_getnetinfo+0x78>)
 8005b00:	785a      	ldrb	r2, [r3, #1]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8005b06:	4b08      	ldr	r3, [pc, #32]	; (8005b28 <wizchip_getnetinfo+0x78>)
 8005b08:	789a      	ldrb	r2, [r3, #2]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8005b0e:	4b06      	ldr	r3, [pc, #24]	; (8005b28 <wizchip_getnetinfo+0x78>)
 8005b10:	78da      	ldrb	r2, [r3, #3]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8005b16:	4b05      	ldr	r3, [pc, #20]	; (8005b2c <wizchip_getnetinfo+0x7c>)
 8005b18:	781a      	ldrb	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	759a      	strb	r2, [r3, #22]
}
 8005b1e:	bf00      	nop
 8005b20:	3708      	adds	r7, #8
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	200002c8 	.word	0x200002c8
 8005b2c:	200002cc 	.word	0x200002cc

08005b30 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	4603      	mov	r3, r0
 8005b38:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8005b3e:	79fb      	ldrb	r3, [r7, #7]
 8005b40:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d002      	beq.n	8005b4e <wizchip_setnetmode+0x1e>
 8005b48:	f04f 33ff 	mov.w	r3, #4294967295
 8005b4c:	e00e      	b.n	8005b6c <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8005b4e:	2000      	movs	r0, #0
 8005b50:	f7fe fd30 	bl	80045b4 <WIZCHIP_READ>
 8005b54:	4603      	mov	r3, r0
 8005b56:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8005b58:	7bfa      	ldrb	r2, [r7, #15]
 8005b5a:	79fb      	ldrb	r3, [r7, #7]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8005b60:	7bfb      	ldrb	r3, [r7, #15]
 8005b62:	4619      	mov	r1, r3
 8005b64:	2000      	movs	r0, #0
 8005b66:	f7fe fd71 	bl	800464c <WIZCHIP_WRITE>
   return 0;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3710      	adds	r7, #16
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8005b78:	2000      	movs	r0, #0
 8005b7a:	f7fe fd1b 	bl	80045b4 <WIZCHIP_READ>
 8005b7e:	4603      	mov	r3, r0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	4619      	mov	r1, r3
 8005b92:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8005b96:	f7fe fd59 	bl	800464c <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	885b      	ldrh	r3, [r3, #2]
 8005b9e:	0a1b      	lsrs	r3, r3, #8
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8005baa:	f7fe fd4f 	bl	800464c <WIZCHIP_WRITE>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	885b      	ldrh	r3, [r3, #2]
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8005bba:	f7fe fd47 	bl	800464c <WIZCHIP_WRITE>
}
 8005bbe:	bf00      	nop
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8005bc6:	b590      	push	{r4, r7, lr}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8005bce:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8005bd2:	f7fe fcef 	bl	80045b4 <WIZCHIP_READ>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	461a      	mov	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8005bde:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8005be2:	f7fe fce7 	bl	80045b4 <WIZCHIP_READ>
 8005be6:	4603      	mov	r3, r0
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	021b      	lsls	r3, r3, #8
 8005bec:	b29c      	uxth	r4, r3
 8005bee:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8005bf2:	f7fe fcdf 	bl	80045b4 <WIZCHIP_READ>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	4423      	add	r3, r4
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	805a      	strh	r2, [r3, #2]
}
 8005c02:	bf00      	nop
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd90      	pop	{r4, r7, pc}
	...

08005c0c <__libc_init_array>:
 8005c0c:	b570      	push	{r4, r5, r6, lr}
 8005c0e:	4e0d      	ldr	r6, [pc, #52]	; (8005c44 <__libc_init_array+0x38>)
 8005c10:	4c0d      	ldr	r4, [pc, #52]	; (8005c48 <__libc_init_array+0x3c>)
 8005c12:	1ba4      	subs	r4, r4, r6
 8005c14:	10a4      	asrs	r4, r4, #2
 8005c16:	2500      	movs	r5, #0
 8005c18:	42a5      	cmp	r5, r4
 8005c1a:	d109      	bne.n	8005c30 <__libc_init_array+0x24>
 8005c1c:	4e0b      	ldr	r6, [pc, #44]	; (8005c4c <__libc_init_array+0x40>)
 8005c1e:	4c0c      	ldr	r4, [pc, #48]	; (8005c50 <__libc_init_array+0x44>)
 8005c20:	f000 f820 	bl	8005c64 <_init>
 8005c24:	1ba4      	subs	r4, r4, r6
 8005c26:	10a4      	asrs	r4, r4, #2
 8005c28:	2500      	movs	r5, #0
 8005c2a:	42a5      	cmp	r5, r4
 8005c2c:	d105      	bne.n	8005c3a <__libc_init_array+0x2e>
 8005c2e:	bd70      	pop	{r4, r5, r6, pc}
 8005c30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c34:	4798      	blx	r3
 8005c36:	3501      	adds	r5, #1
 8005c38:	e7ee      	b.n	8005c18 <__libc_init_array+0xc>
 8005c3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c3e:	4798      	blx	r3
 8005c40:	3501      	adds	r5, #1
 8005c42:	e7f2      	b.n	8005c2a <__libc_init_array+0x1e>
 8005c44:	08005c9c 	.word	0x08005c9c
 8005c48:	08005c9c 	.word	0x08005c9c
 8005c4c:	08005c9c 	.word	0x08005c9c
 8005c50:	08005ca0 	.word	0x08005ca0

08005c54 <memset>:
 8005c54:	4402      	add	r2, r0
 8005c56:	4603      	mov	r3, r0
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d100      	bne.n	8005c5e <memset+0xa>
 8005c5c:	4770      	bx	lr
 8005c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c62:	e7f9      	b.n	8005c58 <memset+0x4>

08005c64 <_init>:
 8005c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c66:	bf00      	nop
 8005c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c6a:	bc08      	pop	{r3}
 8005c6c:	469e      	mov	lr, r3
 8005c6e:	4770      	bx	lr

08005c70 <_fini>:
 8005c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c72:	bf00      	nop
 8005c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c76:	bc08      	pop	{r3}
 8005c78:	469e      	mov	lr, r3
 8005c7a:	4770      	bx	lr
