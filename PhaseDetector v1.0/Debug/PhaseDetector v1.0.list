
PhaseDetector v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ca8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002e30  08002e30  00012e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e40  08002e40  00020140  2**0
                  CONTENTS
  4 .ARM          00000008  08002e40  08002e40  00012e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e48  08002e48  00020140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e48  08002e48  00012e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e4c  08002e4c  00012e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000140  20000000  08002e50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  20000140  08002f90  00020140  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  08002f90  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a65f  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001692  00000000  00000000  0002a7cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b70  00000000  00000000  0002be68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ab8  00000000  00000000  0002c9d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e12c  00000000  00000000  0002d490  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007a99  00000000  00000000  0004b5bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ba5e5  00000000  00000000  00053055  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010d63a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ff4  00000000  00000000  0010d6b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000140 	.word	0x20000140
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002e18 	.word	0x08002e18

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000144 	.word	0x20000144
 80001c4:	08002e18 	.word	0x08002e18

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 ff66 	bl	800139c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f812 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 fa0c 	bl	80008f0 <MX_GPIO_Init>
  MX_SPI3_Init();
 80004d8:	f000 f878 	bl	80005cc <MX_SPI3_Init>
  MX_TIM9_Init();
 80004dc:	f000 f994 	bl	8000808 <MX_TIM9_Init>
  MX_TIM12_Init();
 80004e0:	f000 f9cc 	bl	800087c <MX_TIM12_Init>
  MX_TIM2_Init();
 80004e4:	f000 f8a8 	bl	8000638 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004e8:	f000 f8f2 	bl	80006d0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80004ec:	f000 f93e 	bl	800076c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  GPIO_Init();
 80004f0:	f000 fa34 	bl	800095c <GPIO_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <main+0x2c>
	...

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b094      	sub	sp, #80	; 0x50
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0320 	add.w	r3, r7, #32
 8000502:	2230      	movs	r2, #48	; 0x30
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f002 fc7e 	bl	8002e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	f107 030c 	add.w	r3, r7, #12
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800051c:	2300      	movs	r3, #0
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	4b28      	ldr	r3, [pc, #160]	; (80005c4 <SystemClock_Config+0xcc>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000524:	4a27      	ldr	r2, [pc, #156]	; (80005c4 <SystemClock_Config+0xcc>)
 8000526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052a:	6413      	str	r3, [r2, #64]	; 0x40
 800052c:	4b25      	ldr	r3, [pc, #148]	; (80005c4 <SystemClock_Config+0xcc>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000538:	2300      	movs	r3, #0
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	4b22      	ldr	r3, [pc, #136]	; (80005c8 <SystemClock_Config+0xd0>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a21      	ldr	r2, [pc, #132]	; (80005c8 <SystemClock_Config+0xd0>)
 8000542:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000546:	6013      	str	r3, [r2, #0]
 8000548:	4b1f      	ldr	r3, [pc, #124]	; (80005c8 <SystemClock_Config+0xd0>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000554:	2301      	movs	r3, #1
 8000556:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000558:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800055c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055e:	2302      	movs	r3, #2
 8000560:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000562:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000566:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000568:	2304      	movs	r3, #4
 800056a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800056c:	23a8      	movs	r3, #168	; 0xa8
 800056e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000570:	2302      	movs	r3, #2
 8000572:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000574:	2304      	movs	r3, #4
 8000576:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000578:	f107 0320 	add.w	r3, r7, #32
 800057c:	4618      	mov	r0, r3
 800057e:	f001 fb57 	bl	8001c30 <HAL_RCC_OscConfig>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000588:	f000 fb06 	bl	8000b98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058c:	230f      	movs	r3, #15
 800058e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000590:	2302      	movs	r3, #2
 8000592:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000598:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800059c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800059e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2105      	movs	r1, #5
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 fdb0 	bl	8002110 <HAL_RCC_ClockConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005b6:	f000 faef 	bl	8000b98 <Error_Handler>
  }
}
 80005ba:	bf00      	nop
 80005bc:	3750      	adds	r7, #80	; 0x50
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40023800 	.word	0x40023800
 80005c8:	40007000 	.word	0x40007000

080005cc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80005d0:	4b17      	ldr	r3, [pc, #92]	; (8000630 <MX_SPI3_Init+0x64>)
 80005d2:	4a18      	ldr	r2, [pc, #96]	; (8000634 <MX_SPI3_Init+0x68>)
 80005d4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80005d6:	4b16      	ldr	r3, [pc, #88]	; (8000630 <MX_SPI3_Init+0x64>)
 80005d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005dc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80005de:	4b14      	ldr	r3, [pc, #80]	; (8000630 <MX_SPI3_Init+0x64>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <MX_SPI3_Init+0x64>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_SPI3_Init+0x64>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <MX_SPI3_Init+0x64>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MX_SPI3_Init+0x64>)
 80005f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005fc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80005fe:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MX_SPI3_Init+0x64>)
 8000600:	2200      	movs	r2, #0
 8000602:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000604:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <MX_SPI3_Init+0x64>)
 8000606:	2200      	movs	r2, #0
 8000608:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <MX_SPI3_Init+0x64>)
 800060c:	2200      	movs	r2, #0
 800060e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000610:	4b07      	ldr	r3, [pc, #28]	; (8000630 <MX_SPI3_Init+0x64>)
 8000612:	2200      	movs	r2, #0
 8000614:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_SPI3_Init+0x64>)
 8000618:	220a      	movs	r2, #10
 800061a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800061c:	4804      	ldr	r0, [pc, #16]	; (8000630 <MX_SPI3_Init+0x64>)
 800061e:	f001 ff35 	bl	800248c <HAL_SPI_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000628:	f000 fab6 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	200002e8 	.word	0x200002e8
 8000634:	40003c00 	.word	0x40003c00

08000638 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800063e:	f107 0308 	add.w	r3, r7, #8
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800064c:	463b      	mov	r3, r7
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000654:	4b1d      	ldr	r3, [pc, #116]	; (80006cc <MX_TIM2_Init+0x94>)
 8000656:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800065a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 800065c:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <MX_TIM2_Init+0x94>)
 800065e:	2201      	movs	r2, #1
 8000660:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000662:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <MX_TIM2_Init+0x94>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000668:	4b18      	ldr	r3, [pc, #96]	; (80006cc <MX_TIM2_Init+0x94>)
 800066a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800066e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000670:	4b16      	ldr	r3, [pc, #88]	; (80006cc <MX_TIM2_Init+0x94>)
 8000672:	2200      	movs	r2, #0
 8000674:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000676:	4b15      	ldr	r3, [pc, #84]	; (80006cc <MX_TIM2_Init+0x94>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800067c:	4813      	ldr	r0, [pc, #76]	; (80006cc <MX_TIM2_Init+0x94>)
 800067e:	f001 ff69 	bl	8002554 <HAL_TIM_Base_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000688:	f000 fa86 	bl	8000b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800068c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000690:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000692:	f107 0308 	add.w	r3, r7, #8
 8000696:	4619      	mov	r1, r3
 8000698:	480c      	ldr	r0, [pc, #48]	; (80006cc <MX_TIM2_Init+0x94>)
 800069a:	f002 f8dd 	bl	8002858 <HAL_TIM_ConfigClockSource>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80006a4:	f000 fa78 	bl	8000b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a8:	2300      	movs	r3, #0
 80006aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_TIM2_Init+0x94>)
 80006b6:	f002 faf3 	bl	8002ca0 <HAL_TIMEx_MasterConfigSynchronization>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80006c0:	f000 fa6a 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	3718      	adds	r7, #24
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000380 	.word	0x20000380

080006d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006d6:	f107 0308 	add.w	r3, r7, #8
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e4:	463b      	mov	r3, r7
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006ec:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <MX_TIM3_Init+0x94>)
 80006ee:	4a1e      	ldr	r2, [pc, #120]	; (8000768 <MX_TIM3_Init+0x98>)
 80006f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80006f2:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <MX_TIM3_Init+0x94>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f8:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <MX_TIM3_Init+0x94>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80006fe:	4b19      	ldr	r3, [pc, #100]	; (8000764 <MX_TIM3_Init+0x94>)
 8000700:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000704:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000706:	4b17      	ldr	r3, [pc, #92]	; (8000764 <MX_TIM3_Init+0x94>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_TIM3_Init+0x94>)
 800070e:	2200      	movs	r2, #0
 8000710:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000712:	4814      	ldr	r0, [pc, #80]	; (8000764 <MX_TIM3_Init+0x94>)
 8000714:	f001 ff1e 	bl	8002554 <HAL_TIM_Base_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800071e:	f000 fa3b 	bl	8000b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000726:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000728:	f107 0308 	add.w	r3, r7, #8
 800072c:	4619      	mov	r1, r3
 800072e:	480d      	ldr	r0, [pc, #52]	; (8000764 <MX_TIM3_Init+0x94>)
 8000730:	f002 f892 	bl	8002858 <HAL_TIM_ConfigClockSource>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800073a:	f000 fa2d 	bl	8000b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800073e:	2300      	movs	r3, #0
 8000740:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000746:	463b      	mov	r3, r7
 8000748:	4619      	mov	r1, r3
 800074a:	4806      	ldr	r0, [pc, #24]	; (8000764 <MX_TIM3_Init+0x94>)
 800074c:	f002 faa8 	bl	8002ca0 <HAL_TIMEx_MasterConfigSynchronization>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000756:	f000 fa1f 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	3718      	adds	r7, #24
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200002a8 	.word	0x200002a8
 8000768:	40000400 	.word	0x40000400

0800076c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000780:	463b      	mov	r3, r7
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000788:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <MX_TIM4_Init+0x94>)
 800078a:	4a1e      	ldr	r2, [pc, #120]	; (8000804 <MX_TIM4_Init+0x98>)
 800078c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <MX_TIM4_Init+0x94>)
 8000790:	2201      	movs	r2, #1
 8000792:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000794:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <MX_TIM4_Init+0x94>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <MX_TIM4_Init+0x94>)
 800079c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007a0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a2:	4b17      	ldr	r3, [pc, #92]	; (8000800 <MX_TIM4_Init+0x94>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a8:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_TIM4_Init+0x94>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80007ae:	4814      	ldr	r0, [pc, #80]	; (8000800 <MX_TIM4_Init+0x94>)
 80007b0:	f001 fed0 	bl	8002554 <HAL_TIM_Base_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80007ba:	f000 f9ed 	bl	8000b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	4619      	mov	r1, r3
 80007ca:	480d      	ldr	r0, [pc, #52]	; (8000800 <MX_TIM4_Init+0x94>)
 80007cc:	f002 f844 	bl	8002858 <HAL_TIM_ConfigClockSource>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80007d6:	f000 f9df 	bl	8000b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007e2:	463b      	mov	r3, r7
 80007e4:	4619      	mov	r1, r3
 80007e6:	4806      	ldr	r0, [pc, #24]	; (8000800 <MX_TIM4_Init+0x94>)
 80007e8:	f002 fa5a 	bl	8002ca0 <HAL_TIMEx_MasterConfigSynchronization>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80007f2:	f000 f9d1 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	3718      	adds	r7, #24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000268 	.word	0x20000268
 8000804:	40000800 	.word	0x40000800

08000808 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800080e:	463b      	mov	r3, r7
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800081a:	4b16      	ldr	r3, [pc, #88]	; (8000874 <MX_TIM9_Init+0x6c>)
 800081c:	4a16      	ldr	r2, [pc, #88]	; (8000878 <MX_TIM9_Init+0x70>)
 800081e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_TIM9_Init+0x6c>)
 8000822:	2200      	movs	r2, #0
 8000824:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000826:	4b13      	ldr	r3, [pc, #76]	; (8000874 <MX_TIM9_Init+0x6c>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_TIM9_Init+0x6c>)
 800082e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000832:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_TIM9_Init+0x6c>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_TIM9_Init+0x6c>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <MX_TIM9_Init+0x6c>)
 8000842:	f001 fe87 	bl	8002554 <HAL_TIM_Base_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 800084c:	f000 f9a4 	bl	8000b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000854:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000856:	463b      	mov	r3, r7
 8000858:	4619      	mov	r1, r3
 800085a:	4806      	ldr	r0, [pc, #24]	; (8000874 <MX_TIM9_Init+0x6c>)
 800085c:	f001 fffc 	bl	8002858 <HAL_TIM_ConfigClockSource>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8000866:	f000 f997 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000340 	.word	0x20000340
 8000878:	40014000 	.word	0x40014000

0800087c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000882:	463b      	mov	r3, r7
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800088e:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <MX_TIM12_Init+0x6c>)
 8000890:	4a16      	ldr	r2, [pc, #88]	; (80008ec <MX_TIM12_Init+0x70>)
 8000892:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1;
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_TIM12_Init+0x6c>)
 8000896:	2201      	movs	r2, #1
 8000898:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <MX_TIM12_Init+0x6c>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_TIM12_Init+0x6c>)
 80008a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008a6:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_TIM12_Init+0x6c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_TIM12_Init+0x6c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80008b4:	480c      	ldr	r0, [pc, #48]	; (80008e8 <MX_TIM12_Init+0x6c>)
 80008b6:	f001 fe4d 	bl	8002554 <HAL_TIM_Base_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 80008c0:	f000 f96a 	bl	8000b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c8:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80008ca:	463b      	mov	r3, r7
 80008cc:	4619      	mov	r1, r3
 80008ce:	4806      	ldr	r0, [pc, #24]	; (80008e8 <MX_TIM12_Init+0x6c>)
 80008d0:	f001 ffc2 	bl	8002858 <HAL_TIM_ConfigClockSource>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 80008da:	f000 f95d 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200003c0 	.word	0x200003c0
 80008ec:	40001800 	.word	0x40001800

080008f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	4b17      	ldr	r3, [pc, #92]	; (8000958 <MX_GPIO_Init+0x68>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a16      	ldr	r2, [pc, #88]	; (8000958 <MX_GPIO_Init+0x68>)
 8000900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_GPIO_Init+0x68>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <MX_GPIO_Init+0x68>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a0f      	ldr	r2, [pc, #60]	; (8000958 <MX_GPIO_Init+0x68>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <MX_GPIO_Init+0x68>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_GPIO_Init+0x68>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a08      	ldr	r2, [pc, #32]	; (8000958 <MX_GPIO_Init+0x68>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_GPIO_Init+0x68>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

}
 800094a:	bf00      	nop
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800

0800095c <GPIO_Init>:

/* USER CODE BEGIN 4 */

static void GPIO_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	4b89      	ldr	r3, [pc, #548]	; (8000b8c <GPIO_Init+0x230>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a88      	ldr	r2, [pc, #544]	; (8000b8c <GPIO_Init+0x230>)
 800096c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b86      	ldr	r3, [pc, #536]	; (8000b8c <GPIO_Init+0x230>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	4b82      	ldr	r3, [pc, #520]	; (8000b8c <GPIO_Init+0x230>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a81      	ldr	r2, [pc, #516]	; (8000b8c <GPIO_Init+0x230>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b7f      	ldr	r3, [pc, #508]	; (8000b8c <GPIO_Init+0x230>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	4b7b      	ldr	r3, [pc, #492]	; (8000b8c <GPIO_Init+0x230>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a7a      	ldr	r2, [pc, #488]	; (8000b8c <GPIO_Init+0x230>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b78      	ldr	r3, [pc, #480]	; (8000b8c <GPIO_Init+0x230>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	4b74      	ldr	r3, [pc, #464]	; (8000b8c <GPIO_Init+0x230>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a73      	ldr	r2, [pc, #460]	; (8000b8c <GPIO_Init+0x230>)
 80009c0:	f043 0304 	orr.w	r3, r3, #4
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b71      	ldr	r3, [pc, #452]	; (8000b8c <GPIO_Init+0x230>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	4b6d      	ldr	r3, [pc, #436]	; (8000b8c <GPIO_Init+0x230>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a6c      	ldr	r2, [pc, #432]	; (8000b8c <GPIO_Init+0x230>)
 80009dc:	f043 0308 	orr.w	r3, r3, #8
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b6a      	ldr	r3, [pc, #424]	; (8000b8c <GPIO_Init+0x230>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0308 	and.w	r3, r3, #8
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2100      	movs	r1, #0
 80009f2:	2006      	movs	r0, #6
 80009f4:	f000 fe1f 	bl	8001636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009f8:	2006      	movs	r0, #6
 80009fa:	f000 fe38 	bl	800166e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2100      	movs	r1, #0
 8000a02:	2007      	movs	r0, #7
 8000a04:	f000 fe17 	bl	8001636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a08:	2007      	movs	r0, #7
 8000a0a:	f000 fe30 	bl	800166e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2100      	movs	r1, #0
 8000a12:	2008      	movs	r0, #8
 8000a14:	f000 fe0f 	bl	8001636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000a18:	2008      	movs	r0, #8
 8000a1a:	f000 fe28 	bl	800166e <HAL_NVIC_EnableIRQ>

   HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2100      	movs	r1, #0
 8000a22:	2009      	movs	r0, #9
 8000a24:	f000 fe07 	bl	8001636 <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000a28:	2009      	movs	r0, #9
 8000a2a:	f000 fe20 	bl	800166e <HAL_NVIC_EnableIRQ>

   for( int8_t i = 0; i < MIXER_PIN_COUNT; i++)	 GPIO_PIN_INIT(Bus_Mixer + i);
 8000a2e:	2300      	movs	r3, #0
 8000a30:	75fb      	strb	r3, [r7, #23]
 8000a32:	e033      	b.n	8000a9c <GPIO_Init+0x140>
 8000a34:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	00db      	lsls	r3, r3, #3
 8000a3c:	1a9b      	subs	r3, r3, r2
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	461a      	mov	r2, r3
 8000a42:	4b53      	ldr	r3, [pc, #332]	; (8000b90 <GPIO_Init+0x234>)
 8000a44:	4413      	add	r3, r2
 8000a46:	6818      	ldr	r0, [r3, #0]
 8000a48:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	00db      	lsls	r3, r3, #3
 8000a50:	1a9b      	subs	r3, r3, r2
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b4e      	ldr	r3, [pc, #312]	; (8000b90 <GPIO_Init+0x234>)
 8000a58:	4413      	add	r3, r2
 8000a5a:	889b      	ldrh	r3, [r3, #4]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	f000 ffbb 	bl	80019d8 <HAL_GPIO_DeInit>
 8000a62:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8000a66:	4613      	mov	r3, r2
 8000a68:	00db      	lsls	r3, r3, #3
 8000a6a:	1a9b      	subs	r3, r3, r2
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	461a      	mov	r2, r3
 8000a70:	4b47      	ldr	r3, [pc, #284]	; (8000b90 <GPIO_Init+0x234>)
 8000a72:	4413      	add	r3, r2
 8000a74:	6818      	ldr	r0, [r3, #0]
 8000a76:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	00db      	lsls	r3, r3, #3
 8000a7e:	1a9b      	subs	r3, r3, r2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	461a      	mov	r2, r3
 8000a84:	4b42      	ldr	r3, [pc, #264]	; (8000b90 <GPIO_Init+0x234>)
 8000a86:	4413      	add	r3, r2
 8000a88:	3308      	adds	r3, #8
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	f000 fe0a 	bl	80016a4 <HAL_GPIO_Init>
 8000a90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	3301      	adds	r3, #1
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	75fb      	strb	r3, [r7, #23]
 8000a9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000aa0:	2b07      	cmp	r3, #7
 8000aa2:	ddc7      	ble.n	8000a34 <GPIO_Init+0xd8>
   for( int8_t i = 0; i < WIZNET_PIN_COUNT; i++) GPIO_PIN_INIT(Bus_WizNet_SPI + i);
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	75bb      	strb	r3, [r7, #22]
 8000aa8:	e033      	b.n	8000b12 <GPIO_Init+0x1b6>
 8000aaa:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	1a9b      	subs	r3, r3, r2
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	4b36      	ldr	r3, [pc, #216]	; (8000b94 <GPIO_Init+0x238>)
 8000aba:	4413      	add	r3, r2
 8000abc:	6818      	ldr	r0, [r3, #0]
 8000abe:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	00db      	lsls	r3, r3, #3
 8000ac6:	1a9b      	subs	r3, r3, r2
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	461a      	mov	r2, r3
 8000acc:	4b31      	ldr	r3, [pc, #196]	; (8000b94 <GPIO_Init+0x238>)
 8000ace:	4413      	add	r3, r2
 8000ad0:	889b      	ldrh	r3, [r3, #4]
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	f000 ff80 	bl	80019d8 <HAL_GPIO_DeInit>
 8000ad8:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8000adc:	4613      	mov	r3, r2
 8000ade:	00db      	lsls	r3, r3, #3
 8000ae0:	1a9b      	subs	r3, r3, r2
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4b2b      	ldr	r3, [pc, #172]	; (8000b94 <GPIO_Init+0x238>)
 8000ae8:	4413      	add	r3, r2
 8000aea:	6818      	ldr	r0, [r3, #0]
 8000aec:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8000af0:	4613      	mov	r3, r2
 8000af2:	00db      	lsls	r3, r3, #3
 8000af4:	1a9b      	subs	r3, r3, r2
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b26      	ldr	r3, [pc, #152]	; (8000b94 <GPIO_Init+0x238>)
 8000afc:	4413      	add	r3, r2
 8000afe:	3308      	adds	r3, #8
 8000b00:	4619      	mov	r1, r3
 8000b02:	f000 fdcf 	bl	80016a4 <HAL_GPIO_Init>
 8000b06:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	75bb      	strb	r3, [r7, #22]
 8000b12:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000b16:	2b02      	cmp	r3, #2
 8000b18:	ddc7      	ble.n	8000aaa <GPIO_Init+0x14e>
   GPIO_PIN_SET(Bus_Mixer + PRUPX);
 8000b1a:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <GPIO_Init+0x234>)
 8000b1c:	6818      	ldr	r0, [r3, #0]
 8000b1e:	4b1c      	ldr	r3, [pc, #112]	; (8000b90 <GPIO_Init+0x234>)
 8000b20:	8899      	ldrh	r1, [r3, #4]
 8000b22:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <GPIO_Init+0x234>)
 8000b24:	799b      	ldrb	r3, [r3, #6]
 8000b26:	f083 0301 	eor.w	r3, r3, #1
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	f001 f84d 	bl	8001bcc <HAL_GPIO_WritePin>
   GPIO_PIN_SET(Bus_Mixer + PRUPY);
 8000b32:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <GPIO_Init+0x234>)
 8000b34:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000b36:	4b16      	ldr	r3, [pc, #88]	; (8000b90 <GPIO_Init+0x234>)
 8000b38:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <GPIO_Init+0x234>)
 8000b3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000b40:	f083 0301 	eor.w	r3, r3, #1
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	461a      	mov	r2, r3
 8000b48:	f001 f840 	bl	8001bcc <HAL_GPIO_WritePin>
   GPIO_PIN_SET(Bus_Mixer + PRUPZ);
 8000b4c:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <GPIO_Init+0x234>)
 8000b4e:	69d8      	ldr	r0, [r3, #28]
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <GPIO_Init+0x234>)
 8000b52:	8c19      	ldrh	r1, [r3, #32]
 8000b54:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <GPIO_Init+0x234>)
 8000b56:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000b5a:	f083 0301 	eor.w	r3, r3, #1
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	461a      	mov	r2, r3
 8000b62:	f001 f833 	bl	8001bcc <HAL_GPIO_WritePin>
   GPIO_PIN_SET(Bus_Mixer + PRUPA);
 8000b66:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <GPIO_Init+0x234>)
 8000b68:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <GPIO_Init+0x234>)
 8000b6c:	f8b3 1058 	ldrh.w	r1, [r3, #88]	; 0x58
 8000b70:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <GPIO_Init+0x234>)
 8000b72:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8000b76:	f083 0301 	eor.w	r3, r3, #1
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	f001 f825 	bl	8001bcc <HAL_GPIO_WritePin>
}
 8000b82:	bf00      	nop
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	20000054 	.word	0x20000054
 8000b94:	20000000 	.word	0x20000000

08000b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
	...

08000ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	4a0f      	ldr	r2, [pc, #60]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	603b      	str	r3, [r7, #0]
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800

08000bf8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a19      	ldr	r2, [pc, #100]	; (8000c7c <HAL_SPI_MspInit+0x84>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d12c      	bne.n	8000c74 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	4a17      	ldr	r2, [pc, #92]	; (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c28:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a10      	ldr	r2, [pc, #64]	; (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c40:	f043 0304 	orr.w	r3, r3, #4
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0304 	and.w	r3, r3, #4
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000c52:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c60:	2303      	movs	r3, #3
 8000c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c64:	2306      	movs	r3, #6
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4805      	ldr	r0, [pc, #20]	; (8000c84 <HAL_SPI_MspInit+0x8c>)
 8000c70:	f000 fd18 	bl	80016a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c74:	bf00      	nop
 8000c76:	3728      	adds	r7, #40	; 0x28
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40003c00 	.word	0x40003c00
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020800 	.word	0x40020800

08000c88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c98:	d116      	bne.n	8000cc8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
 8000c9e:	4b44      	ldr	r3, [pc, #272]	; (8000db0 <HAL_TIM_Base_MspInit+0x128>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	4a43      	ldr	r2, [pc, #268]	; (8000db0 <HAL_TIM_Base_MspInit+0x128>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8000caa:	4b41      	ldr	r3, [pc, #260]	; (8000db0 <HAL_TIM_Base_MspInit+0x128>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	61fb      	str	r3, [r7, #28]
 8000cb4:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	201c      	movs	r0, #28
 8000cbc:	f000 fcbb 	bl	8001636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cc0:	201c      	movs	r0, #28
 8000cc2:	f000 fcd4 	bl	800166e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8000cc6:	e06e      	b.n	8000da6 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM3)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a39      	ldr	r2, [pc, #228]	; (8000db4 <HAL_TIM_Base_MspInit+0x12c>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d116      	bne.n	8000d00 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]
 8000cd6:	4b36      	ldr	r3, [pc, #216]	; (8000db0 <HAL_TIM_Base_MspInit+0x128>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	4a35      	ldr	r2, [pc, #212]	; (8000db0 <HAL_TIM_Base_MspInit+0x128>)
 8000cdc:	f043 0302 	orr.w	r3, r3, #2
 8000ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce2:	4b33      	ldr	r3, [pc, #204]	; (8000db0 <HAL_TIM_Base_MspInit+0x128>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	61bb      	str	r3, [r7, #24]
 8000cec:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	201d      	movs	r0, #29
 8000cf4:	f000 fc9f 	bl	8001636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000cf8:	201d      	movs	r0, #29
 8000cfa:	f000 fcb8 	bl	800166e <HAL_NVIC_EnableIRQ>
}
 8000cfe:	e052      	b.n	8000da6 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a2c      	ldr	r2, [pc, #176]	; (8000db8 <HAL_TIM_Base_MspInit+0x130>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d116      	bne.n	8000d38 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	4b28      	ldr	r3, [pc, #160]	; (8000db0 <HAL_TIM_Base_MspInit+0x128>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	4a27      	ldr	r2, [pc, #156]	; (8000db0 <HAL_TIM_Base_MspInit+0x128>)
 8000d14:	f043 0304 	orr.w	r3, r3, #4
 8000d18:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1a:	4b25      	ldr	r3, [pc, #148]	; (8000db0 <HAL_TIM_Base_MspInit+0x128>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	f003 0304 	and.w	r3, r3, #4
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2100      	movs	r1, #0
 8000d2a:	201e      	movs	r0, #30
 8000d2c:	f000 fc83 	bl	8001636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d30:	201e      	movs	r0, #30
 8000d32:	f000 fc9c 	bl	800166e <HAL_NVIC_EnableIRQ>
}
 8000d36:	e036      	b.n	8000da6 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM9)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a1f      	ldr	r2, [pc, #124]	; (8000dbc <HAL_TIM_Base_MspInit+0x134>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d116      	bne.n	8000d70 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <HAL_TIM_Base_MspInit+0x128>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	4a19      	ldr	r2, [pc, #100]	; (8000db0 <HAL_TIM_Base_MspInit+0x128>)
 8000d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d50:	6453      	str	r3, [r2, #68]	; 0x44
 8000d52:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <HAL_TIM_Base_MspInit+0x128>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2100      	movs	r1, #0
 8000d62:	2018      	movs	r0, #24
 8000d64:	f000 fc67 	bl	8001636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000d68:	2018      	movs	r0, #24
 8000d6a:	f000 fc80 	bl	800166e <HAL_NVIC_EnableIRQ>
}
 8000d6e:	e01a      	b.n	8000da6 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM12)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a12      	ldr	r2, [pc, #72]	; (8000dc0 <HAL_TIM_Base_MspInit+0x138>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d115      	bne.n	8000da6 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <HAL_TIM_Base_MspInit+0x128>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	4a0b      	ldr	r2, [pc, #44]	; (8000db0 <HAL_TIM_Base_MspInit+0x128>)
 8000d84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d88:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <HAL_TIM_Base_MspInit+0x128>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	202b      	movs	r0, #43	; 0x2b
 8000d9c:	f000 fc4b 	bl	8001636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8000da0:	202b      	movs	r0, #43	; 0x2b
 8000da2:	f000 fc64 	bl	800166e <HAL_NVIC_EnableIRQ>
}
 8000da6:	bf00      	nop
 8000da8:	3720      	adds	r7, #32
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40000400 	.word	0x40000400
 8000db8:	40000800 	.word	0x40000800
 8000dbc:	40014000 	.word	0x40014000
 8000dc0:	40001800 	.word	0x40001800

08000dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <HardFault_Handler+0x4>

08000dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <MemManage_Handler+0x4>

08000dde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <BusFault_Handler+0x4>

08000de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <UsageFault_Handler+0x4>

08000dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e18:	f000 fb12 	bl	8001440 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000e24:	4806      	ldr	r0, [pc, #24]	; (8000e40 <TIM1_BRK_TIM9_IRQHandler+0x20>)
 8000e26:	f001 fc0f 	bl	8002648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */
  Error = 0x01; //разница фаз не найдена
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <TIM1_BRK_TIM9_IRQHandler+0x24>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	701a      	strb	r2, [r3, #0]
  RefreshTIM(&htim9);
 8000e30:	4803      	ldr	r0, [pc, #12]	; (8000e40 <TIM1_BRK_TIM9_IRQHandler+0x20>)
 8000e32:	f000 fa25 	bl	8001280 <RefreshTIM>
  Count = 0;
 8000e36:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <TIM1_BRK_TIM9_IRQHandler+0x28>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
  //RefreshTIM(&htim12);
  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000340 	.word	0x20000340
 8000e44:	2000015c 	.word	0x2000015c
 8000e48:	2000015d 	.word	0x2000015d

08000e4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e50:	4802      	ldr	r0, [pc, #8]	; (8000e5c <TIM2_IRQHandler+0x10>)
 8000e52:	f001 fbf9 	bl	8002648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000380 	.word	0x20000380

08000e60 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e64:	4802      	ldr	r0, [pc, #8]	; (8000e70 <TIM3_IRQHandler+0x10>)
 8000e66:	f001 fbef 	bl	8002648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200002a8 	.word	0x200002a8

08000e74 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e78:	4802      	ldr	r0, [pc, #8]	; (8000e84 <TIM4_IRQHandler+0x10>)
 8000e7a:	f001 fbe5 	bl	8002648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000268 	.word	0x20000268

08000e88 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8000e8c:	4806      	ldr	r0, [pc, #24]	; (8000ea8 <TIM8_BRK_TIM12_IRQHandler+0x20>)
 8000e8e:	f001 fbdb 	bl	8002648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */
  Error = 0x02; //Период больше 1500мкс
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <TIM8_BRK_TIM12_IRQHandler+0x24>)
 8000e94:	2202      	movs	r2, #2
 8000e96:	701a      	strb	r2, [r3, #0]
  RefreshTIM(&htim12);
 8000e98:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <TIM8_BRK_TIM12_IRQHandler+0x20>)
 8000e9a:	f000 f9f1 	bl	8001280 <RefreshTIM>
  Count = 0;
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <TIM8_BRK_TIM12_IRQHandler+0x28>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	200003c0 	.word	0x200003c0
 8000eac:	2000015c 	.word	0x2000015c
 8000eb0:	2000015d 	.word	0x2000015d

08000eb4 <EXTI0_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f000 fea1 	bl	8001c00 <HAL_GPIO_EXTI_IRQHandler>

}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000ec6:	2002      	movs	r0, #2
 8000ec8:	f000 fe9a 	bl	8001c00 <HAL_GPIO_EXTI_IRQHandler>

}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000ed4:	2004      	movs	r0, #4
 8000ed6:	f000 fe93 	bl	8001c00 <HAL_GPIO_EXTI_IRQHandler>

}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}

08000ede <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000ee2:	2008      	movs	r0, #8
 8000ee4:	f000 fe8c 	bl	8001c00 <HAL_GPIO_EXTI_IRQHandler>

}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	80fb      	strh	r3, [r7, #6]
	}
	RefreshTIM(&htim12);
	HAL_TIM_Base_Start_IT(&htim12);
}*/

	dPhase = 0;
 8000ef6:	4b98      	ldr	r3, [pc, #608]	; (8001158 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	801a      	strh	r2, [r3, #0]
	switch (Count)
 8000efc:	4b97      	ldr	r3, [pc, #604]	; (800115c <HAL_GPIO_EXTI_Callback+0x270>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d002      	beq.n	8000f0a <HAL_GPIO_EXTI_Callback+0x1e>
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	d00d      	beq.n	8000f24 <HAL_GPIO_EXTI_Callback+0x38>
 8000f08:	e01a      	b.n	8000f40 <HAL_GPIO_EXTI_Callback+0x54>
	{
		case 0:
			RefreshTIM(&htim9);
 8000f0a:	4895      	ldr	r0, [pc, #596]	; (8001160 <HAL_GPIO_EXTI_Callback+0x274>)
 8000f0c:	f000 f9b8 	bl	8001280 <RefreshTIM>
			HAL_TIM_Base_Start_IT(&htim9);
 8000f10:	4893      	ldr	r0, [pc, #588]	; (8001160 <HAL_GPIO_EXTI_Callback+0x274>)
 8000f12:	f001 fb4a 	bl	80025aa <HAL_TIM_Base_Start_IT>
			Count++;
 8000f16:	4b91      	ldr	r3, [pc, #580]	; (800115c <HAL_GPIO_EXTI_Callback+0x270>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4b8f      	ldr	r3, [pc, #572]	; (800115c <HAL_GPIO_EXTI_Callback+0x270>)
 8000f20:	701a      	strb	r2, [r3, #0]
			break;
 8000f22:	e019      	b.n	8000f58 <HAL_GPIO_EXTI_Callback+0x6c>

		case AXIS_COUNT-1:
			dPhase = TIM9 ->CNT;
 8000f24:	4b8f      	ldr	r3, [pc, #572]	; (8001164 <HAL_GPIO_EXTI_Callback+0x278>)
 8000f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	4b8b      	ldr	r3, [pc, #556]	; (8001158 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000f2c:	801a      	strh	r2, [r3, #0]
			RefreshTIM(&htim9);
 8000f2e:	488c      	ldr	r0, [pc, #560]	; (8001160 <HAL_GPIO_EXTI_Callback+0x274>)
 8000f30:	f000 f9a6 	bl	8001280 <RefreshTIM>
			Count = 0;
 8000f34:	4b89      	ldr	r3, [pc, #548]	; (800115c <HAL_GPIO_EXTI_Callback+0x270>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]
			PhaseRelativelyA();
 8000f3a:	f000 f9b7 	bl	80012ac <PhaseRelativelyA>
			break;
 8000f3e:	e00b      	b.n	8000f58 <HAL_GPIO_EXTI_Callback+0x6c>

		default:
			dPhase = TIM9 -> CNT;
 8000f40:	4b88      	ldr	r3, [pc, #544]	; (8001164 <HAL_GPIO_EXTI_Callback+0x278>)
 8000f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	4b84      	ldr	r3, [pc, #528]	; (8001158 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000f48:	801a      	strh	r2, [r3, #0]
			Count++;
 8000f4a:	4b84      	ldr	r3, [pc, #528]	; (800115c <HAL_GPIO_EXTI_Callback+0x270>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4b82      	ldr	r3, [pc, #520]	; (800115c <HAL_GPIO_EXTI_Callback+0x270>)
 8000f54:	701a      	strb	r2, [r3, #0]
			break;
 8000f56:	bf00      	nop
	}


	switch (GPIO_Pin)
 8000f58:	88fb      	ldrh	r3, [r7, #6]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	2b07      	cmp	r3, #7
 8000f5e:	f200 8174 	bhi.w	800124a <HAL_GPIO_EXTI_Callback+0x35e>
 8000f62:	a201      	add	r2, pc, #4	; (adr r2, 8000f68 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f68:	08001023 	.word	0x08001023
 8000f6c:	08000f89 	.word	0x08000f89
 8000f70:	0800124b 	.word	0x0800124b
 8000f74:	080010bf 	.word	0x080010bf
 8000f78:	0800124b 	.word	0x0800124b
 8000f7c:	0800124b 	.word	0x0800124b
 8000f80:	0800124b 	.word	0x0800124b
 8000f84:	080011b1 	.word	0x080011b1
	{

		case GPIO_PIN_1:
			HAL_TIM_Base_Stop_IT(&htim12);
 8000f88:	4877      	ldr	r0, [pc, #476]	; (8001168 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000f8a:	f001 fb32 	bl	80025f2 <HAL_TIM_Base_Stop_IT>
			Period = TIM12 ->CNT;
 8000f8e:	4b77      	ldr	r3, [pc, #476]	; (800116c <HAL_GPIO_EXTI_Callback+0x280>)
 8000f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	4b76      	ldr	r3, [pc, #472]	; (8001170 <HAL_GPIO_EXTI_Callback+0x284>)
 8000f96:	801a      	strh	r2, [r3, #0]
			PeriodAVG[iZ] = Period;
 8000f98:	4b76      	ldr	r3, [pc, #472]	; (8001174 <HAL_GPIO_EXTI_Callback+0x288>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b74      	ldr	r3, [pc, #464]	; (8001170 <HAL_GPIO_EXTI_Callback+0x284>)
 8000fa0:	8819      	ldrh	r1, [r3, #0]
 8000fa2:	4b75      	ldr	r3, [pc, #468]	; (8001178 <HAL_GPIO_EXTI_Callback+0x28c>)
 8000fa4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			iZ++;
 8000fa8:	4b72      	ldr	r3, [pc, #456]	; (8001174 <HAL_GPIO_EXTI_Callback+0x288>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	4b70      	ldr	r3, [pc, #448]	; (8001174 <HAL_GPIO_EXTI_Callback+0x288>)
 8000fb2:	701a      	strb	r2, [r3, #0]
			sumZ += Period;
 8000fb4:	4b6e      	ldr	r3, [pc, #440]	; (8001170 <HAL_GPIO_EXTI_Callback+0x284>)
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b70      	ldr	r3, [pc, #448]	; (800117c <HAL_GPIO_EXTI_Callback+0x290>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	4a6e      	ldr	r2, [pc, #440]	; (800117c <HAL_GPIO_EXTI_Callback+0x290>)
 8000fc2:	6013      	str	r3, [r2, #0]
			if(iZ == AVG){
 8000fc4:	4b6b      	ldr	r3, [pc, #428]	; (8001174 <HAL_GPIO_EXTI_Callback+0x288>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b64      	cmp	r3, #100	; 0x64
 8000fca:	d10e      	bne.n	8000fea <HAL_GPIO_EXTI_Callback+0xfe>
				PeriodZ = sumZ/AVG;
 8000fcc:	4b6b      	ldr	r3, [pc, #428]	; (800117c <HAL_GPIO_EXTI_Callback+0x290>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a6b      	ldr	r2, [pc, #428]	; (8001180 <HAL_GPIO_EXTI_Callback+0x294>)
 8000fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd6:	095b      	lsrs	r3, r3, #5
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	4b6a      	ldr	r3, [pc, #424]	; (8001184 <HAL_GPIO_EXTI_Callback+0x298>)
 8000fdc:	801a      	strh	r2, [r3, #0]
				iZ  = 0;
 8000fde:	4b65      	ldr	r3, [pc, #404]	; (8001174 <HAL_GPIO_EXTI_Callback+0x288>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]
				sumZ = 0;
 8000fe4:	4b65      	ldr	r3, [pc, #404]	; (800117c <HAL_GPIO_EXTI_Callback+0x290>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
			}
			RefreshTIM(&htim12);
 8000fea:	485f      	ldr	r0, [pc, #380]	; (8001168 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000fec:	f000 f948 	bl	8001280 <RefreshTIM>
			HAL_TIM_Base_Start_IT(&htim12);
 8000ff0:	485d      	ldr	r0, [pc, #372]	; (8001168 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000ff2:	f001 fada 	bl	80025aa <HAL_TIM_Base_Start_IT>
			if (Count == 0)
 8000ff6:	4b59      	ldr	r3, [pc, #356]	; (800115c <HAL_GPIO_EXTI_Callback+0x270>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d107      	bne.n	800100e <HAL_GPIO_EXTI_Callback+0x122>
			{
				Phase[0][Axis_Z] = 4;
 8000ffe:	4b62      	ldr	r3, [pc, #392]	; (8001188 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001000:	2204      	movs	r2, #4
 8001002:	809a      	strh	r2, [r3, #4]
				Phase[1][Axis_Z] = dPhase;
 8001004:	4b54      	ldr	r3, [pc, #336]	; (8001158 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001006:	881a      	ldrh	r2, [r3, #0]
 8001008:	4b5f      	ldr	r3, [pc, #380]	; (8001188 <HAL_GPIO_EXTI_Callback+0x29c>)
 800100a:	819a      	strh	r2, [r3, #12]
			else
			{
				Phase[0][Axis_Z] = Count;
				Phase[1][Axis_Z] = dPhase;
			}
			break;
 800100c:	e11e      	b.n	800124c <HAL_GPIO_EXTI_Callback+0x360>
				Phase[0][Axis_Z] = Count;
 800100e:	4b53      	ldr	r3, [pc, #332]	; (800115c <HAL_GPIO_EXTI_Callback+0x270>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	b29a      	uxth	r2, r3
 8001014:	4b5c      	ldr	r3, [pc, #368]	; (8001188 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001016:	809a      	strh	r2, [r3, #4]
				Phase[1][Axis_Z] = dPhase;
 8001018:	4b4f      	ldr	r3, [pc, #316]	; (8001158 <HAL_GPIO_EXTI_Callback+0x26c>)
 800101a:	881a      	ldrh	r2, [r3, #0]
 800101c:	4b5a      	ldr	r3, [pc, #360]	; (8001188 <HAL_GPIO_EXTI_Callback+0x29c>)
 800101e:	819a      	strh	r2, [r3, #12]
			break;
 8001020:	e114      	b.n	800124c <HAL_GPIO_EXTI_Callback+0x360>

		case GPIO_PIN_0:
			HAL_TIM_Base_Stop_IT(&htim2);
 8001022:	485a      	ldr	r0, [pc, #360]	; (800118c <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001024:	f001 fae5 	bl	80025f2 <HAL_TIM_Base_Stop_IT>
			Period = TIM2 ->CNT;
 8001028:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800102c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102e:	b29a      	uxth	r2, r3
 8001030:	4b4f      	ldr	r3, [pc, #316]	; (8001170 <HAL_GPIO_EXTI_Callback+0x284>)
 8001032:	801a      	strh	r2, [r3, #0]
			PeriodAVG[iY] = Period;
 8001034:	4b56      	ldr	r3, [pc, #344]	; (8001190 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	4b4d      	ldr	r3, [pc, #308]	; (8001170 <HAL_GPIO_EXTI_Callback+0x284>)
 800103c:	8819      	ldrh	r1, [r3, #0]
 800103e:	4b4e      	ldr	r3, [pc, #312]	; (8001178 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001040:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			iY++;
 8001044:	4b52      	ldr	r3, [pc, #328]	; (8001190 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	3301      	adds	r3, #1
 800104a:	b2da      	uxtb	r2, r3
 800104c:	4b50      	ldr	r3, [pc, #320]	; (8001190 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800104e:	701a      	strb	r2, [r3, #0]
			sumY += Period;
 8001050:	4b47      	ldr	r3, [pc, #284]	; (8001170 <HAL_GPIO_EXTI_Callback+0x284>)
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	4b4f      	ldr	r3, [pc, #316]	; (8001194 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4413      	add	r3, r2
 800105c:	4a4d      	ldr	r2, [pc, #308]	; (8001194 <HAL_GPIO_EXTI_Callback+0x2a8>)
 800105e:	6013      	str	r3, [r2, #0]
			if(iY == AVG){
 8001060:	4b4b      	ldr	r3, [pc, #300]	; (8001190 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b64      	cmp	r3, #100	; 0x64
 8001066:	d10e      	bne.n	8001086 <HAL_GPIO_EXTI_Callback+0x19a>
				PeriodY = sumY/AVG;
 8001068:	4b4a      	ldr	r3, [pc, #296]	; (8001194 <HAL_GPIO_EXTI_Callback+0x2a8>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a44      	ldr	r2, [pc, #272]	; (8001180 <HAL_GPIO_EXTI_Callback+0x294>)
 800106e:	fba2 2303 	umull	r2, r3, r2, r3
 8001072:	095b      	lsrs	r3, r3, #5
 8001074:	b29a      	uxth	r2, r3
 8001076:	4b48      	ldr	r3, [pc, #288]	; (8001198 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001078:	801a      	strh	r2, [r3, #0]
				iY  = 0;
 800107a:	4b45      	ldr	r3, [pc, #276]	; (8001190 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
				sumY = 0;
 8001080:	4b44      	ldr	r3, [pc, #272]	; (8001194 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
			}
			RefreshTIM(&htim2);
 8001086:	4841      	ldr	r0, [pc, #260]	; (800118c <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001088:	f000 f8fa 	bl	8001280 <RefreshTIM>
			HAL_TIM_Base_Start_IT(&htim2);
 800108c:	483f      	ldr	r0, [pc, #252]	; (800118c <HAL_GPIO_EXTI_Callback+0x2a0>)
 800108e:	f001 fa8c 	bl	80025aa <HAL_TIM_Base_Start_IT>
			if (Count == 0)
 8001092:	4b32      	ldr	r3, [pc, #200]	; (800115c <HAL_GPIO_EXTI_Callback+0x270>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d107      	bne.n	80010aa <HAL_GPIO_EXTI_Callback+0x1be>
			{
				Phase[0][Axis_Y] = 4;
 800109a:	4b3b      	ldr	r3, [pc, #236]	; (8001188 <HAL_GPIO_EXTI_Callback+0x29c>)
 800109c:	2204      	movs	r2, #4
 800109e:	805a      	strh	r2, [r3, #2]
				Phase[1][Axis_Y] = dPhase;
 80010a0:	4b2d      	ldr	r3, [pc, #180]	; (8001158 <HAL_GPIO_EXTI_Callback+0x26c>)
 80010a2:	881a      	ldrh	r2, [r3, #0]
 80010a4:	4b38      	ldr	r3, [pc, #224]	; (8001188 <HAL_GPIO_EXTI_Callback+0x29c>)
 80010a6:	815a      	strh	r2, [r3, #10]
			else
			{
				Phase[0][Axis_Y] = Count;
				Phase[1][Axis_Y] = dPhase;
			}
			break;
 80010a8:	e0d0      	b.n	800124c <HAL_GPIO_EXTI_Callback+0x360>
				Phase[0][Axis_Y] = Count;
 80010aa:	4b2c      	ldr	r3, [pc, #176]	; (800115c <HAL_GPIO_EXTI_Callback+0x270>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	4b35      	ldr	r3, [pc, #212]	; (8001188 <HAL_GPIO_EXTI_Callback+0x29c>)
 80010b2:	805a      	strh	r2, [r3, #2]
				Phase[1][Axis_Y] = dPhase;
 80010b4:	4b28      	ldr	r3, [pc, #160]	; (8001158 <HAL_GPIO_EXTI_Callback+0x26c>)
 80010b6:	881a      	ldrh	r2, [r3, #0]
 80010b8:	4b33      	ldr	r3, [pc, #204]	; (8001188 <HAL_GPIO_EXTI_Callback+0x29c>)
 80010ba:	815a      	strh	r2, [r3, #10]
			break;
 80010bc:	e0c6      	b.n	800124c <HAL_GPIO_EXTI_Callback+0x360>

		case GPIO_PIN_2:
			HAL_TIM_Base_Stop_IT(&htim3);
 80010be:	4837      	ldr	r0, [pc, #220]	; (800119c <HAL_GPIO_EXTI_Callback+0x2b0>)
 80010c0:	f001 fa97 	bl	80025f2 <HAL_TIM_Base_Stop_IT>
			Period = TIM3 ->CNT;
 80010c4:	4b36      	ldr	r3, [pc, #216]	; (80011a0 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80010c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	4b29      	ldr	r3, [pc, #164]	; (8001170 <HAL_GPIO_EXTI_Callback+0x284>)
 80010cc:	801a      	strh	r2, [r3, #0]
			PeriodAVG[iX] = Period;
 80010ce:	4b35      	ldr	r3, [pc, #212]	; (80011a4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	4b26      	ldr	r3, [pc, #152]	; (8001170 <HAL_GPIO_EXTI_Callback+0x284>)
 80010d6:	8819      	ldrh	r1, [r3, #0]
 80010d8:	4b27      	ldr	r3, [pc, #156]	; (8001178 <HAL_GPIO_EXTI_Callback+0x28c>)
 80010da:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			iX++;
 80010de:	4b31      	ldr	r3, [pc, #196]	; (80011a4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	3301      	adds	r3, #1
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4b2f      	ldr	r3, [pc, #188]	; (80011a4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80010e8:	701a      	strb	r2, [r3, #0]
			sumX += Period;
 80010ea:	4b21      	ldr	r3, [pc, #132]	; (8001170 <HAL_GPIO_EXTI_Callback+0x284>)
 80010ec:	881b      	ldrh	r3, [r3, #0]
 80010ee:	461a      	mov	r2, r3
 80010f0:	4b2d      	ldr	r3, [pc, #180]	; (80011a8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4413      	add	r3, r2
 80010f6:	4a2c      	ldr	r2, [pc, #176]	; (80011a8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80010f8:	6013      	str	r3, [r2, #0]
			if(iX == AVG){
 80010fa:	4b2a      	ldr	r3, [pc, #168]	; (80011a4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b64      	cmp	r3, #100	; 0x64
 8001100:	d10e      	bne.n	8001120 <HAL_GPIO_EXTI_Callback+0x234>
				PeriodX = sumX/AVG;
 8001102:	4b29      	ldr	r3, [pc, #164]	; (80011a8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a1e      	ldr	r2, [pc, #120]	; (8001180 <HAL_GPIO_EXTI_Callback+0x294>)
 8001108:	fba2 2303 	umull	r2, r3, r2, r3
 800110c:	095b      	lsrs	r3, r3, #5
 800110e:	b29a      	uxth	r2, r3
 8001110:	4b26      	ldr	r3, [pc, #152]	; (80011ac <HAL_GPIO_EXTI_Callback+0x2c0>)
 8001112:	801a      	strh	r2, [r3, #0]
				iX  = 0;
 8001114:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
				sumX = 0;
 800111a:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
			}
			RefreshTIM(&htim3);
 8001120:	481e      	ldr	r0, [pc, #120]	; (800119c <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001122:	f000 f8ad 	bl	8001280 <RefreshTIM>
			HAL_TIM_Base_Start_IT(&htim3);
 8001126:	481d      	ldr	r0, [pc, #116]	; (800119c <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001128:	f001 fa3f 	bl	80025aa <HAL_TIM_Base_Start_IT>
			if (Count == 0)
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <HAL_GPIO_EXTI_Callback+0x270>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d107      	bne.n	8001144 <HAL_GPIO_EXTI_Callback+0x258>
			{
				Phase[0][Axis_X] = 4;
 8001134:	4b14      	ldr	r3, [pc, #80]	; (8001188 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001136:	2204      	movs	r2, #4
 8001138:	801a      	strh	r2, [r3, #0]
				Phase[1][Axis_X] = dPhase;
 800113a:	4b07      	ldr	r3, [pc, #28]	; (8001158 <HAL_GPIO_EXTI_Callback+0x26c>)
 800113c:	881a      	ldrh	r2, [r3, #0]
 800113e:	4b12      	ldr	r3, [pc, #72]	; (8001188 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001140:	811a      	strh	r2, [r3, #8]
			else
			{
				Phase[0][Axis_X] = Count;
				Phase[1][Axis_X] = dPhase;
			};
			break;
 8001142:	e083      	b.n	800124c <HAL_GPIO_EXTI_Callback+0x360>
				Phase[0][Axis_X] = Count;
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <HAL_GPIO_EXTI_Callback+0x270>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	b29a      	uxth	r2, r3
 800114a:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <HAL_GPIO_EXTI_Callback+0x29c>)
 800114c:	801a      	strh	r2, [r3, #0]
				Phase[1][Axis_X] = dPhase;
 800114e:	4b02      	ldr	r3, [pc, #8]	; (8001158 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001150:	881a      	ldrh	r2, [r3, #0]
 8001152:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001154:	811a      	strh	r2, [r3, #8]
			break;
 8001156:	e079      	b.n	800124c <HAL_GPIO_EXTI_Callback+0x360>
 8001158:	20000160 	.word	0x20000160
 800115c:	2000015d 	.word	0x2000015d
 8001160:	20000340 	.word	0x20000340
 8001164:	40014000 	.word	0x40014000
 8001168:	200003c0 	.word	0x200003c0
 800116c:	40001800 	.word	0x40001800
 8001170:	2000015e 	.word	0x2000015e
 8001174:	2000022e 	.word	0x2000022e
 8001178:	20000164 	.word	0x20000164
 800117c:	20000238 	.word	0x20000238
 8001180:	51eb851f 	.word	0x51eb851f
 8001184:	20000244 	.word	0x20000244
 8001188:	20000248 	.word	0x20000248
 800118c:	20000380 	.word	0x20000380
 8001190:	2000022d 	.word	0x2000022d
 8001194:	20000234 	.word	0x20000234
 8001198:	20000242 	.word	0x20000242
 800119c:	200002a8 	.word	0x200002a8
 80011a0:	40000400 	.word	0x40000400
 80011a4:	2000022c 	.word	0x2000022c
 80011a8:	20000230 	.word	0x20000230
 80011ac:	20000240 	.word	0x20000240

		case GPIO_PIN_3:
			HAL_TIM_Base_Stop_IT(&htim4);
 80011b0:	4828      	ldr	r0, [pc, #160]	; (8001254 <HAL_GPIO_EXTI_Callback+0x368>)
 80011b2:	f001 fa1e 	bl	80025f2 <HAL_TIM_Base_Stop_IT>
			Period = TIM4 ->CNT;
 80011b6:	4b28      	ldr	r3, [pc, #160]	; (8001258 <HAL_GPIO_EXTI_Callback+0x36c>)
 80011b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	4b27      	ldr	r3, [pc, #156]	; (800125c <HAL_GPIO_EXTI_Callback+0x370>)
 80011be:	801a      	strh	r2, [r3, #0]
			PeriodAVG[iA] = Period;
 80011c0:	4b27      	ldr	r3, [pc, #156]	; (8001260 <HAL_GPIO_EXTI_Callback+0x374>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b25      	ldr	r3, [pc, #148]	; (800125c <HAL_GPIO_EXTI_Callback+0x370>)
 80011c8:	8819      	ldrh	r1, [r3, #0]
 80011ca:	4b26      	ldr	r3, [pc, #152]	; (8001264 <HAL_GPIO_EXTI_Callback+0x378>)
 80011cc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			iA++;
 80011d0:	4b23      	ldr	r3, [pc, #140]	; (8001260 <HAL_GPIO_EXTI_Callback+0x374>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	3301      	adds	r3, #1
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	4b21      	ldr	r3, [pc, #132]	; (8001260 <HAL_GPIO_EXTI_Callback+0x374>)
 80011da:	701a      	strb	r2, [r3, #0]
			sumA += Period;
 80011dc:	4b1f      	ldr	r3, [pc, #124]	; (800125c <HAL_GPIO_EXTI_Callback+0x370>)
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b21      	ldr	r3, [pc, #132]	; (8001268 <HAL_GPIO_EXTI_Callback+0x37c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4413      	add	r3, r2
 80011e8:	4a1f      	ldr	r2, [pc, #124]	; (8001268 <HAL_GPIO_EXTI_Callback+0x37c>)
 80011ea:	6013      	str	r3, [r2, #0]
			if(iA == AVG){
 80011ec:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <HAL_GPIO_EXTI_Callback+0x374>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b64      	cmp	r3, #100	; 0x64
 80011f2:	d10e      	bne.n	8001212 <HAL_GPIO_EXTI_Callback+0x326>
				PeriodA = sumA/AVG;
 80011f4:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <HAL_GPIO_EXTI_Callback+0x37c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a1c      	ldr	r2, [pc, #112]	; (800126c <HAL_GPIO_EXTI_Callback+0x380>)
 80011fa:	fba2 2303 	umull	r2, r3, r2, r3
 80011fe:	095b      	lsrs	r3, r3, #5
 8001200:	b29a      	uxth	r2, r3
 8001202:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <HAL_GPIO_EXTI_Callback+0x384>)
 8001204:	801a      	strh	r2, [r3, #0]
				iA  = 0;
 8001206:	4b16      	ldr	r3, [pc, #88]	; (8001260 <HAL_GPIO_EXTI_Callback+0x374>)
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
				sumA = 0;
 800120c:	4b16      	ldr	r3, [pc, #88]	; (8001268 <HAL_GPIO_EXTI_Callback+0x37c>)
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
			}
			RefreshTIM(&htim4);
 8001212:	4810      	ldr	r0, [pc, #64]	; (8001254 <HAL_GPIO_EXTI_Callback+0x368>)
 8001214:	f000 f834 	bl	8001280 <RefreshTIM>
			HAL_TIM_Base_Start_IT(&htim4);
 8001218:	480e      	ldr	r0, [pc, #56]	; (8001254 <HAL_GPIO_EXTI_Callback+0x368>)
 800121a:	f001 f9c6 	bl	80025aa <HAL_TIM_Base_Start_IT>
			if (Count == 0)
 800121e:	4b15      	ldr	r3, [pc, #84]	; (8001274 <HAL_GPIO_EXTI_Callback+0x388>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d107      	bne.n	8001236 <HAL_GPIO_EXTI_Callback+0x34a>
			{
				Phase[0][Axis_A] = 4;
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <HAL_GPIO_EXTI_Callback+0x38c>)
 8001228:	2204      	movs	r2, #4
 800122a:	80da      	strh	r2, [r3, #6]
				Phase[1][Axis_A] = dPhase;
 800122c:	4b13      	ldr	r3, [pc, #76]	; (800127c <HAL_GPIO_EXTI_Callback+0x390>)
 800122e:	881a      	ldrh	r2, [r3, #0]
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <HAL_GPIO_EXTI_Callback+0x38c>)
 8001232:	81da      	strh	r2, [r3, #14]
			else
			{
				Phase[0][Axis_A] = Count;
				Phase[1][Axis_A] = dPhase;
			};
			break;
 8001234:	e00a      	b.n	800124c <HAL_GPIO_EXTI_Callback+0x360>
				Phase[0][Axis_A] = Count;
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <HAL_GPIO_EXTI_Callback+0x388>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	b29a      	uxth	r2, r3
 800123c:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <HAL_GPIO_EXTI_Callback+0x38c>)
 800123e:	80da      	strh	r2, [r3, #6]
				Phase[1][Axis_A] = dPhase;
 8001240:	4b0e      	ldr	r3, [pc, #56]	; (800127c <HAL_GPIO_EXTI_Callback+0x390>)
 8001242:	881a      	ldrh	r2, [r3, #0]
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <HAL_GPIO_EXTI_Callback+0x38c>)
 8001246:	81da      	strh	r2, [r3, #14]
			break;
 8001248:	e000      	b.n	800124c <HAL_GPIO_EXTI_Callback+0x360>

		default:
			break;
 800124a:	bf00      	nop
	}
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000268 	.word	0x20000268
 8001258:	40000800 	.word	0x40000800
 800125c:	2000015e 	.word	0x2000015e
 8001260:	2000022f 	.word	0x2000022f
 8001264:	20000164 	.word	0x20000164
 8001268:	2000023c 	.word	0x2000023c
 800126c:	51eb851f 	.word	0x51eb851f
 8001270:	20000246 	.word	0x20000246
 8001274:	2000015d 	.word	0x2000015d
 8001278:	20000248 	.word	0x20000248
 800127c:	20000160 	.word	0x20000160

08001280 <RefreshTIM>:

int RefreshTIM(TIM_HandleTypeDef *htim){
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(htim);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f001 f9b2 	bl	80025f2 <HAL_TIM_Base_Stop_IT>
	htim->Instance->CNT = 0;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2200      	movs	r2, #0
 8001294:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_CLEAR_FLAG(htim,TIM_FLAG_UPDATE);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f06f 0201 	mvn.w	r2, #1
 800129e:	611a      	str	r2, [r3, #16]
	return 0;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <PhaseRelativelyA>:

void PhaseRelativelyA(void){
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
	for(uint8_t j = 0; j < AXIS_COUNT - 1; j++){
 80012b2:	2300      	movs	r3, #0
 80012b4:	71fb      	strb	r3, [r7, #7]
 80012b6:	e023      	b.n	8001300 <PhaseRelativelyA+0x54>
		if(Phase[0][Axis_A]>Phase[0][j]){
 80012b8:	4b16      	ldr	r3, [pc, #88]	; (8001314 <PhaseRelativelyA+0x68>)
 80012ba:	88da      	ldrh	r2, [r3, #6]
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	4915      	ldr	r1, [pc, #84]	; (8001314 <PhaseRelativelyA+0x68>)
 80012c0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d90e      	bls.n	80012e6 <PhaseRelativelyA+0x3a>
			PhaseRelatA[j]=Phase[1][j]-Phase[1][Axis_A];
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	4a12      	ldr	r2, [pc, #72]	; (8001314 <PhaseRelativelyA+0x68>)
 80012cc:	3304      	adds	r3, #4
 80012ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012d2:	4619      	mov	r1, r3
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <PhaseRelativelyA+0x68>)
 80012d6:	89db      	ldrh	r3, [r3, #14]
 80012d8:	461a      	mov	r2, r3
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	1a8a      	subs	r2, r1, r2
 80012de:	490e      	ldr	r1, [pc, #56]	; (8001318 <PhaseRelativelyA+0x6c>)
 80012e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80012e4:	e009      	b.n	80012fa <PhaseRelativelyA+0x4e>
		}
		else
		{
			PhaseRelatA[j]=Phase[1][j];
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <PhaseRelativelyA+0x68>)
 80012ea:	3304      	adds	r3, #4
 80012ec:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	4611      	mov	r1, r2
 80012f4:	4a08      	ldr	r2, [pc, #32]	; (8001318 <PhaseRelativelyA+0x6c>)
 80012f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(uint8_t j = 0; j < AXIS_COUNT - 1; j++){
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	3301      	adds	r3, #1
 80012fe:	71fb      	strb	r3, [r7, #7]
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	2b02      	cmp	r3, #2
 8001304:	d9d8      	bls.n	80012b8 <PhaseRelativelyA+0xc>
		}
	}
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20000248 	.word	0x20000248
 8001318:	20000258 	.word	0x20000258

0800131c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <SystemInit+0x28>)
 8001322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001326:	4a07      	ldr	r2, [pc, #28]	; (8001344 <SystemInit+0x28>)
 8001328:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800132c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001330:	4b04      	ldr	r3, [pc, #16]	; (8001344 <SystemInit+0x28>)
 8001332:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001336:	609a      	str	r2, [r3, #8]
#endif
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001348:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001380 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800134c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800134e:	e003      	b.n	8001358 <LoopCopyDataInit>

08001350 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001352:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001354:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001356:	3104      	adds	r1, #4

08001358 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001358:	480b      	ldr	r0, [pc, #44]	; (8001388 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800135c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800135e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001360:	d3f6      	bcc.n	8001350 <CopyDataInit>
  ldr  r2, =_sbss
 8001362:	4a0b      	ldr	r2, [pc, #44]	; (8001390 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001364:	e002      	b.n	800136c <LoopFillZerobss>

08001366 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001366:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001368:	f842 3b04 	str.w	r3, [r2], #4

0800136c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800136e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001370:	d3f9      	bcc.n	8001366 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001372:	f7ff ffd3 	bl	800131c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001376:	f001 fd23 	bl	8002dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800137a:	f7ff f8a5 	bl	80004c8 <main>
  bx  lr    
 800137e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001380:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001384:	08002e50 	.word	0x08002e50
  ldr  r0, =_sdata
 8001388:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800138c:	20000140 	.word	0x20000140
  ldr  r2, =_sbss
 8001390:	20000140 	.word	0x20000140
  ldr  r3, = _ebss
 8001394:	20000404 	.word	0x20000404

08001398 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001398:	e7fe      	b.n	8001398 <ADC_IRQHandler>
	...

0800139c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013a0:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <HAL_Init+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0d      	ldr	r2, [pc, #52]	; (80013dc <HAL_Init+0x40>)
 80013a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <HAL_Init+0x40>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <HAL_Init+0x40>)
 80013b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <HAL_Init+0x40>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a07      	ldr	r2, [pc, #28]	; (80013dc <HAL_Init+0x40>)
 80013be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c4:	2003      	movs	r0, #3
 80013c6:	f000 f92b 	bl	8001620 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ca:	2000      	movs	r0, #0
 80013cc:	f000 f808 	bl	80013e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d0:	f7ff fbea 	bl	8000ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40023c00 	.word	0x40023c00

080013e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <HAL_InitTick+0x54>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <HAL_InitTick+0x58>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	4619      	mov	r1, r3
 80013f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 f943 	bl	800168a <HAL_SYSTICK_Config>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e00e      	b.n	800142c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b0f      	cmp	r3, #15
 8001412:	d80a      	bhi.n	800142a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001414:	2200      	movs	r2, #0
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	f04f 30ff 	mov.w	r0, #4294967295
 800141c:	f000 f90b 	bl	8001636 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001420:	4a06      	ldr	r2, [pc, #24]	; (800143c <HAL_InitTick+0x5c>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001426:	2300      	movs	r3, #0
 8001428:	e000      	b.n	800142c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000134 	.word	0x20000134
 8001438:	2000013c 	.word	0x2000013c
 800143c:	20000138 	.word	0x20000138

08001440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_IncTick+0x20>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_IncTick+0x24>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4413      	add	r3, r2
 8001450:	4a04      	ldr	r2, [pc, #16]	; (8001464 <HAL_IncTick+0x24>)
 8001452:	6013      	str	r3, [r2, #0]
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	2000013c 	.word	0x2000013c
 8001464:	20000400 	.word	0x20000400

08001468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return uwTick;
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <HAL_GetTick+0x14>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	20000400 	.word	0x20000400

08001480 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800149c:	4013      	ands	r3, r2
 800149e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014b2:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <__NVIC_SetPriorityGrouping+0x44>)
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	60d3      	str	r3, [r2, #12]
}
 80014b8:	bf00      	nop
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <__NVIC_GetPriorityGrouping+0x18>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	0a1b      	lsrs	r3, r3, #8
 80014d2:	f003 0307 	and.w	r3, r3, #7
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	db0b      	blt.n	800150e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	f003 021f 	and.w	r2, r3, #31
 80014fc:	4907      	ldr	r1, [pc, #28]	; (800151c <__NVIC_EnableIRQ+0x38>)
 80014fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001502:	095b      	lsrs	r3, r3, #5
 8001504:	2001      	movs	r0, #1
 8001506:	fa00 f202 	lsl.w	r2, r0, r2
 800150a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000e100 	.word	0xe000e100

08001520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	6039      	str	r1, [r7, #0]
 800152a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	2b00      	cmp	r3, #0
 8001532:	db0a      	blt.n	800154a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	b2da      	uxtb	r2, r3
 8001538:	490c      	ldr	r1, [pc, #48]	; (800156c <__NVIC_SetPriority+0x4c>)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	0112      	lsls	r2, r2, #4
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	440b      	add	r3, r1
 8001544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001548:	e00a      	b.n	8001560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4908      	ldr	r1, [pc, #32]	; (8001570 <__NVIC_SetPriority+0x50>)
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	3b04      	subs	r3, #4
 8001558:	0112      	lsls	r2, r2, #4
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	440b      	add	r3, r1
 800155e:	761a      	strb	r2, [r3, #24]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000e100 	.word	0xe000e100
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001574:	b480      	push	{r7}
 8001576:	b089      	sub	sp, #36	; 0x24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f1c3 0307 	rsb	r3, r3, #7
 800158e:	2b04      	cmp	r3, #4
 8001590:	bf28      	it	cs
 8001592:	2304      	movcs	r3, #4
 8001594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3304      	adds	r3, #4
 800159a:	2b06      	cmp	r3, #6
 800159c:	d902      	bls.n	80015a4 <NVIC_EncodePriority+0x30>
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3b03      	subs	r3, #3
 80015a2:	e000      	b.n	80015a6 <NVIC_EncodePriority+0x32>
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43da      	mvns	r2, r3
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	401a      	ands	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	43d9      	mvns	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	4313      	orrs	r3, r2
         );
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3724      	adds	r7, #36	; 0x24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015ec:	d301      	bcc.n	80015f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00f      	b.n	8001612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <SysTick_Config+0x40>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015fa:	210f      	movs	r1, #15
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001600:	f7ff ff8e 	bl	8001520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <SysTick_Config+0x40>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160a:	4b04      	ldr	r3, [pc, #16]	; (800161c <SysTick_Config+0x40>)
 800160c:	2207      	movs	r2, #7
 800160e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	e000e010 	.word	0xe000e010

08001620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ff29 	bl	8001480 <__NVIC_SetPriorityGrouping>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001636:	b580      	push	{r7, lr}
 8001638:	b086      	sub	sp, #24
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
 8001642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001648:	f7ff ff3e 	bl	80014c8 <__NVIC_GetPriorityGrouping>
 800164c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	68b9      	ldr	r1, [r7, #8]
 8001652:	6978      	ldr	r0, [r7, #20]
 8001654:	f7ff ff8e 	bl	8001574 <NVIC_EncodePriority>
 8001658:	4602      	mov	r2, r0
 800165a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165e:	4611      	mov	r1, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff5d 	bl	8001520 <__NVIC_SetPriority>
}
 8001666:	bf00      	nop
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	4603      	mov	r3, r0
 8001676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff31 	bl	80014e4 <__NVIC_EnableIRQ>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ffa2 	bl	80015dc <SysTick_Config>
 8001698:	4603      	mov	r3, r0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b089      	sub	sp, #36	; 0x24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
 80016be:	e16b      	b.n	8001998 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016c0:	2201      	movs	r2, #1
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	697a      	ldr	r2, [r7, #20]
 80016d0:	4013      	ands	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	429a      	cmp	r2, r3
 80016da:	f040 815a 	bne.w	8001992 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d00b      	beq.n	80016fe <HAL_GPIO_Init+0x5a>
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d007      	beq.n	80016fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016f2:	2b11      	cmp	r3, #17
 80016f4:	d003      	beq.n	80016fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b12      	cmp	r3, #18
 80016fc:	d130      	bne.n	8001760 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	2203      	movs	r2, #3
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4013      	ands	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	68da      	ldr	r2, [r3, #12]
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4313      	orrs	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001734:	2201      	movs	r2, #1
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	091b      	lsrs	r3, r3, #4
 800174a:	f003 0201 	and.w	r2, r3, #1
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4313      	orrs	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	2203      	movs	r2, #3
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b02      	cmp	r3, #2
 8001796:	d003      	beq.n	80017a0 <HAL_GPIO_Init+0xfc>
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	2b12      	cmp	r3, #18
 800179e:	d123      	bne.n	80017e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	08da      	lsrs	r2, r3, #3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3208      	adds	r2, #8
 80017a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	220f      	movs	r2, #15
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4013      	ands	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	691a      	ldr	r2, [r3, #16]
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	08da      	lsrs	r2, r3, #3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3208      	adds	r2, #8
 80017e2:	69b9      	ldr	r1, [r7, #24]
 80017e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	2203      	movs	r2, #3
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 0203 	and.w	r2, r3, #3
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4313      	orrs	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	f000 80b4 	beq.w	8001992 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	4b5f      	ldr	r3, [pc, #380]	; (80019ac <HAL_GPIO_Init+0x308>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001832:	4a5e      	ldr	r2, [pc, #376]	; (80019ac <HAL_GPIO_Init+0x308>)
 8001834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001838:	6453      	str	r3, [r2, #68]	; 0x44
 800183a:	4b5c      	ldr	r3, [pc, #368]	; (80019ac <HAL_GPIO_Init+0x308>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001846:	4a5a      	ldr	r2, [pc, #360]	; (80019b0 <HAL_GPIO_Init+0x30c>)
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	089b      	lsrs	r3, r3, #2
 800184c:	3302      	adds	r3, #2
 800184e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f003 0303 	and.w	r3, r3, #3
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	220f      	movs	r2, #15
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4013      	ands	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a51      	ldr	r2, [pc, #324]	; (80019b4 <HAL_GPIO_Init+0x310>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d02b      	beq.n	80018ca <HAL_GPIO_Init+0x226>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a50      	ldr	r2, [pc, #320]	; (80019b8 <HAL_GPIO_Init+0x314>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d025      	beq.n	80018c6 <HAL_GPIO_Init+0x222>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a4f      	ldr	r2, [pc, #316]	; (80019bc <HAL_GPIO_Init+0x318>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d01f      	beq.n	80018c2 <HAL_GPIO_Init+0x21e>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a4e      	ldr	r2, [pc, #312]	; (80019c0 <HAL_GPIO_Init+0x31c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d019      	beq.n	80018be <HAL_GPIO_Init+0x21a>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a4d      	ldr	r2, [pc, #308]	; (80019c4 <HAL_GPIO_Init+0x320>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d013      	beq.n	80018ba <HAL_GPIO_Init+0x216>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a4c      	ldr	r2, [pc, #304]	; (80019c8 <HAL_GPIO_Init+0x324>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d00d      	beq.n	80018b6 <HAL_GPIO_Init+0x212>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a4b      	ldr	r2, [pc, #300]	; (80019cc <HAL_GPIO_Init+0x328>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d007      	beq.n	80018b2 <HAL_GPIO_Init+0x20e>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a4a      	ldr	r2, [pc, #296]	; (80019d0 <HAL_GPIO_Init+0x32c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d101      	bne.n	80018ae <HAL_GPIO_Init+0x20a>
 80018aa:	2307      	movs	r3, #7
 80018ac:	e00e      	b.n	80018cc <HAL_GPIO_Init+0x228>
 80018ae:	2308      	movs	r3, #8
 80018b0:	e00c      	b.n	80018cc <HAL_GPIO_Init+0x228>
 80018b2:	2306      	movs	r3, #6
 80018b4:	e00a      	b.n	80018cc <HAL_GPIO_Init+0x228>
 80018b6:	2305      	movs	r3, #5
 80018b8:	e008      	b.n	80018cc <HAL_GPIO_Init+0x228>
 80018ba:	2304      	movs	r3, #4
 80018bc:	e006      	b.n	80018cc <HAL_GPIO_Init+0x228>
 80018be:	2303      	movs	r3, #3
 80018c0:	e004      	b.n	80018cc <HAL_GPIO_Init+0x228>
 80018c2:	2302      	movs	r3, #2
 80018c4:	e002      	b.n	80018cc <HAL_GPIO_Init+0x228>
 80018c6:	2301      	movs	r3, #1
 80018c8:	e000      	b.n	80018cc <HAL_GPIO_Init+0x228>
 80018ca:	2300      	movs	r3, #0
 80018cc:	69fa      	ldr	r2, [r7, #28]
 80018ce:	f002 0203 	and.w	r2, r2, #3
 80018d2:	0092      	lsls	r2, r2, #2
 80018d4:	4093      	lsls	r3, r2
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018dc:	4934      	ldr	r1, [pc, #208]	; (80019b0 <HAL_GPIO_Init+0x30c>)
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	089b      	lsrs	r3, r3, #2
 80018e2:	3302      	adds	r3, #2
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018ea:	4b3a      	ldr	r3, [pc, #232]	; (80019d4 <HAL_GPIO_Init+0x330>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	43db      	mvns	r3, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4013      	ands	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800190e:	4a31      	ldr	r2, [pc, #196]	; (80019d4 <HAL_GPIO_Init+0x330>)
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001914:	4b2f      	ldr	r3, [pc, #188]	; (80019d4 <HAL_GPIO_Init+0x330>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001938:	4a26      	ldr	r2, [pc, #152]	; (80019d4 <HAL_GPIO_Init+0x330>)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800193e:	4b25      	ldr	r3, [pc, #148]	; (80019d4 <HAL_GPIO_Init+0x330>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	43db      	mvns	r3, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4013      	ands	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	4313      	orrs	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001962:	4a1c      	ldr	r2, [pc, #112]	; (80019d4 <HAL_GPIO_Init+0x330>)
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001968:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <HAL_GPIO_Init+0x330>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800198c:	4a11      	ldr	r2, [pc, #68]	; (80019d4 <HAL_GPIO_Init+0x330>)
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3301      	adds	r3, #1
 8001996:	61fb      	str	r3, [r7, #28]
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	2b0f      	cmp	r3, #15
 800199c:	f67f ae90 	bls.w	80016c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019a0:	bf00      	nop
 80019a2:	3724      	adds	r7, #36	; 0x24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40013800 	.word	0x40013800
 80019b4:	40020000 	.word	0x40020000
 80019b8:	40020400 	.word	0x40020400
 80019bc:	40020800 	.word	0x40020800
 80019c0:	40020c00 	.word	0x40020c00
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40021400 	.word	0x40021400
 80019cc:	40021800 	.word	0x40021800
 80019d0:	40021c00 	.word	0x40021c00
 80019d4:	40013c00 	.word	0x40013c00

080019d8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80019d8:	b480      	push	{r7}
 80019da:	b087      	sub	sp, #28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	e0cd      	b.n	8001b90 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019f4:	2201      	movs	r2, #1
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4013      	ands	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	f040 80bd 	bne.w	8001b8a <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001a10:	4a64      	ldr	r2, [pc, #400]	; (8001ba4 <HAL_GPIO_DeInit+0x1cc>)
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	089b      	lsrs	r3, r3, #2
 8001a16:	3302      	adds	r3, #2
 8001a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	220f      	movs	r2, #15
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	68ba      	ldr	r2, [r7, #8]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a5c      	ldr	r2, [pc, #368]	; (8001ba8 <HAL_GPIO_DeInit+0x1d0>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d02b      	beq.n	8001a92 <HAL_GPIO_DeInit+0xba>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a5b      	ldr	r2, [pc, #364]	; (8001bac <HAL_GPIO_DeInit+0x1d4>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d025      	beq.n	8001a8e <HAL_GPIO_DeInit+0xb6>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a5a      	ldr	r2, [pc, #360]	; (8001bb0 <HAL_GPIO_DeInit+0x1d8>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d01f      	beq.n	8001a8a <HAL_GPIO_DeInit+0xb2>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a59      	ldr	r2, [pc, #356]	; (8001bb4 <HAL_GPIO_DeInit+0x1dc>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d019      	beq.n	8001a86 <HAL_GPIO_DeInit+0xae>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a58      	ldr	r2, [pc, #352]	; (8001bb8 <HAL_GPIO_DeInit+0x1e0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d013      	beq.n	8001a82 <HAL_GPIO_DeInit+0xaa>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a57      	ldr	r2, [pc, #348]	; (8001bbc <HAL_GPIO_DeInit+0x1e4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d00d      	beq.n	8001a7e <HAL_GPIO_DeInit+0xa6>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a56      	ldr	r2, [pc, #344]	; (8001bc0 <HAL_GPIO_DeInit+0x1e8>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d007      	beq.n	8001a7a <HAL_GPIO_DeInit+0xa2>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a55      	ldr	r2, [pc, #340]	; (8001bc4 <HAL_GPIO_DeInit+0x1ec>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d101      	bne.n	8001a76 <HAL_GPIO_DeInit+0x9e>
 8001a72:	2307      	movs	r3, #7
 8001a74:	e00e      	b.n	8001a94 <HAL_GPIO_DeInit+0xbc>
 8001a76:	2308      	movs	r3, #8
 8001a78:	e00c      	b.n	8001a94 <HAL_GPIO_DeInit+0xbc>
 8001a7a:	2306      	movs	r3, #6
 8001a7c:	e00a      	b.n	8001a94 <HAL_GPIO_DeInit+0xbc>
 8001a7e:	2305      	movs	r3, #5
 8001a80:	e008      	b.n	8001a94 <HAL_GPIO_DeInit+0xbc>
 8001a82:	2304      	movs	r3, #4
 8001a84:	e006      	b.n	8001a94 <HAL_GPIO_DeInit+0xbc>
 8001a86:	2303      	movs	r3, #3
 8001a88:	e004      	b.n	8001a94 <HAL_GPIO_DeInit+0xbc>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e002      	b.n	8001a94 <HAL_GPIO_DeInit+0xbc>
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <HAL_GPIO_DeInit+0xbc>
 8001a92:	2300      	movs	r3, #0
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	f002 0203 	and.w	r2, r2, #3
 8001a9a:	0092      	lsls	r2, r2, #2
 8001a9c:	4093      	lsls	r3, r2
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d132      	bne.n	8001b0a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001aa4:	4b48      	ldr	r3, [pc, #288]	; (8001bc8 <HAL_GPIO_DeInit+0x1f0>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	4946      	ldr	r1, [pc, #280]	; (8001bc8 <HAL_GPIO_DeInit+0x1f0>)
 8001aae:	4013      	ands	r3, r2
 8001ab0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001ab2:	4b45      	ldr	r3, [pc, #276]	; (8001bc8 <HAL_GPIO_DeInit+0x1f0>)
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	4943      	ldr	r1, [pc, #268]	; (8001bc8 <HAL_GPIO_DeInit+0x1f0>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001ac0:	4b41      	ldr	r3, [pc, #260]	; (8001bc8 <HAL_GPIO_DeInit+0x1f0>)
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	493f      	ldr	r1, [pc, #252]	; (8001bc8 <HAL_GPIO_DeInit+0x1f0>)
 8001aca:	4013      	ands	r3, r2
 8001acc:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001ace:	4b3e      	ldr	r3, [pc, #248]	; (8001bc8 <HAL_GPIO_DeInit+0x1f0>)
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	493c      	ldr	r1, [pc, #240]	; (8001bc8 <HAL_GPIO_DeInit+0x1f0>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	220f      	movs	r2, #15
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001aec:	4a2d      	ldr	r2, [pc, #180]	; (8001ba4 <HAL_GPIO_DeInit+0x1cc>)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	089b      	lsrs	r3, r3, #2
 8001af2:	3302      	adds	r3, #2
 8001af4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	43da      	mvns	r2, r3
 8001afc:	4829      	ldr	r0, [pc, #164]	; (8001ba4 <HAL_GPIO_DeInit+0x1cc>)
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	089b      	lsrs	r3, r3, #2
 8001b02:	400a      	ands	r2, r1
 8001b04:	3302      	adds	r3, #2
 8001b06:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	2103      	movs	r1, #3
 8001b14:	fa01 f303 	lsl.w	r3, r1, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	08da      	lsrs	r2, r3, #3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3208      	adds	r2, #8
 8001b28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	220f      	movs	r2, #15
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	08d2      	lsrs	r2, r2, #3
 8001b40:	4019      	ands	r1, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	3208      	adds	r2, #8
 8001b46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68da      	ldr	r2, [r3, #12]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	2103      	movs	r1, #3
 8001b54:	fa01 f303 	lsl.w	r3, r1, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	401a      	ands	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	2101      	movs	r1, #1
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	401a      	ands	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	2103      	movs	r1, #3
 8001b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b82:	43db      	mvns	r3, r3
 8001b84:	401a      	ands	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	2b0f      	cmp	r3, #15
 8001b94:	f67f af2e 	bls.w	80019f4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001b98:	bf00      	nop
 8001b9a:	371c      	adds	r7, #28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	40013800 	.word	0x40013800
 8001ba8:	40020000 	.word	0x40020000
 8001bac:	40020400 	.word	0x40020400
 8001bb0:	40020800 	.word	0x40020800
 8001bb4:	40020c00 	.word	0x40020c00
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40021400 	.word	0x40021400
 8001bc0:	40021800 	.word	0x40021800
 8001bc4:	40021c00 	.word	0x40021c00
 8001bc8:	40013c00 	.word	0x40013c00

08001bcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	807b      	strh	r3, [r7, #2]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bdc:	787b      	ldrb	r3, [r7, #1]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001be2:	887a      	ldrh	r2, [r7, #2]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001be8:	e003      	b.n	8001bf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bea:	887b      	ldrh	r3, [r7, #2]
 8001bec:	041a      	lsls	r2, r3, #16
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	619a      	str	r2, [r3, #24]
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c0a:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c0c:	695a      	ldr	r2, [r3, #20]
 8001c0e:	88fb      	ldrh	r3, [r7, #6]
 8001c10:	4013      	ands	r3, r2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d006      	beq.n	8001c24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c16:	4a05      	ldr	r2, [pc, #20]	; (8001c2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c18:	88fb      	ldrh	r3, [r7, #6]
 8001c1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff f964 	bl	8000eec <HAL_GPIO_EXTI_Callback>
  }
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40013c00 	.word	0x40013c00

08001c30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e25b      	b.n	80020fa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d075      	beq.n	8001d3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c4e:	4ba3      	ldr	r3, [pc, #652]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 030c 	and.w	r3, r3, #12
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	d00c      	beq.n	8001c74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c5a:	4ba0      	ldr	r3, [pc, #640]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d112      	bne.n	8001c8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c66:	4b9d      	ldr	r3, [pc, #628]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c72:	d10b      	bne.n	8001c8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c74:	4b99      	ldr	r3, [pc, #612]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d05b      	beq.n	8001d38 <HAL_RCC_OscConfig+0x108>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d157      	bne.n	8001d38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e236      	b.n	80020fa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c94:	d106      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x74>
 8001c96:	4b91      	ldr	r3, [pc, #580]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a90      	ldr	r2, [pc, #576]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	e01d      	b.n	8001ce0 <HAL_RCC_OscConfig+0xb0>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cac:	d10c      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x98>
 8001cae:	4b8b      	ldr	r3, [pc, #556]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a8a      	ldr	r2, [pc, #552]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	4b88      	ldr	r3, [pc, #544]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a87      	ldr	r2, [pc, #540]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	e00b      	b.n	8001ce0 <HAL_RCC_OscConfig+0xb0>
 8001cc8:	4b84      	ldr	r3, [pc, #528]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a83      	ldr	r2, [pc, #524]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	4b81      	ldr	r3, [pc, #516]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a80      	ldr	r2, [pc, #512]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d013      	beq.n	8001d10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce8:	f7ff fbbe 	bl	8001468 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cf0:	f7ff fbba 	bl	8001468 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b64      	cmp	r3, #100	; 0x64
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e1fb      	b.n	80020fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d02:	4b76      	ldr	r3, [pc, #472]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0f0      	beq.n	8001cf0 <HAL_RCC_OscConfig+0xc0>
 8001d0e:	e014      	b.n	8001d3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d10:	f7ff fbaa 	bl	8001468 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d18:	f7ff fba6 	bl	8001468 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b64      	cmp	r3, #100	; 0x64
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e1e7      	b.n	80020fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d2a:	4b6c      	ldr	r3, [pc, #432]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0xe8>
 8001d36:	e000      	b.n	8001d3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d063      	beq.n	8001e0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d46:	4b65      	ldr	r3, [pc, #404]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 030c 	and.w	r3, r3, #12
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00b      	beq.n	8001d6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d52:	4b62      	ldr	r3, [pc, #392]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d11c      	bne.n	8001d98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d5e:	4b5f      	ldr	r3, [pc, #380]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d116      	bne.n	8001d98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6a:	4b5c      	ldr	r3, [pc, #368]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d005      	beq.n	8001d82 <HAL_RCC_OscConfig+0x152>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d001      	beq.n	8001d82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e1bb      	b.n	80020fa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d82:	4b56      	ldr	r3, [pc, #344]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	4952      	ldr	r1, [pc, #328]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d96:	e03a      	b.n	8001e0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d020      	beq.n	8001de2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001da0:	4b4f      	ldr	r3, [pc, #316]	; (8001ee0 <HAL_RCC_OscConfig+0x2b0>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da6:	f7ff fb5f 	bl	8001468 <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dae:	f7ff fb5b 	bl	8001468 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e19c      	b.n	80020fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc0:	4b46      	ldr	r3, [pc, #280]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0f0      	beq.n	8001dae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dcc:	4b43      	ldr	r3, [pc, #268]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	4940      	ldr	r1, [pc, #256]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	600b      	str	r3, [r1, #0]
 8001de0:	e015      	b.n	8001e0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001de2:	4b3f      	ldr	r3, [pc, #252]	; (8001ee0 <HAL_RCC_OscConfig+0x2b0>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de8:	f7ff fb3e 	bl	8001468 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001df0:	f7ff fb3a 	bl	8001468 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e17b      	b.n	80020fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e02:	4b36      	ldr	r3, [pc, #216]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d030      	beq.n	8001e7c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d016      	beq.n	8001e50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e22:	4b30      	ldr	r3, [pc, #192]	; (8001ee4 <HAL_RCC_OscConfig+0x2b4>)
 8001e24:	2201      	movs	r2, #1
 8001e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e28:	f7ff fb1e 	bl	8001468 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e30:	f7ff fb1a 	bl	8001468 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e15b      	b.n	80020fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e42:	4b26      	ldr	r3, [pc, #152]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0f0      	beq.n	8001e30 <HAL_RCC_OscConfig+0x200>
 8001e4e:	e015      	b.n	8001e7c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e50:	4b24      	ldr	r3, [pc, #144]	; (8001ee4 <HAL_RCC_OscConfig+0x2b4>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e56:	f7ff fb07 	bl	8001468 <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e5e:	f7ff fb03 	bl	8001468 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e144      	b.n	80020fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e70:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1f0      	bne.n	8001e5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 80a0 	beq.w	8001fca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e8e:	4b13      	ldr	r3, [pc, #76]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10f      	bne.n	8001eba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	4a0e      	ldr	r2, [pc, #56]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <HAL_RCC_OscConfig+0x2b8>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d121      	bne.n	8001f0a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ec6:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <HAL_RCC_OscConfig+0x2b8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a07      	ldr	r2, [pc, #28]	; (8001ee8 <HAL_RCC_OscConfig+0x2b8>)
 8001ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ed2:	f7ff fac9 	bl	8001468 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed8:	e011      	b.n	8001efe <HAL_RCC_OscConfig+0x2ce>
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	42470000 	.word	0x42470000
 8001ee4:	42470e80 	.word	0x42470e80
 8001ee8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eec:	f7ff fabc 	bl	8001468 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e0fd      	b.n	80020fa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efe:	4b81      	ldr	r3, [pc, #516]	; (8002104 <HAL_RCC_OscConfig+0x4d4>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d106      	bne.n	8001f20 <HAL_RCC_OscConfig+0x2f0>
 8001f12:	4b7d      	ldr	r3, [pc, #500]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 8001f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f16:	4a7c      	ldr	r2, [pc, #496]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f1e:	e01c      	b.n	8001f5a <HAL_RCC_OscConfig+0x32a>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	2b05      	cmp	r3, #5
 8001f26:	d10c      	bne.n	8001f42 <HAL_RCC_OscConfig+0x312>
 8001f28:	4b77      	ldr	r3, [pc, #476]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 8001f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2c:	4a76      	ldr	r2, [pc, #472]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 8001f2e:	f043 0304 	orr.w	r3, r3, #4
 8001f32:	6713      	str	r3, [r2, #112]	; 0x70
 8001f34:	4b74      	ldr	r3, [pc, #464]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 8001f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f38:	4a73      	ldr	r2, [pc, #460]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f40:	e00b      	b.n	8001f5a <HAL_RCC_OscConfig+0x32a>
 8001f42:	4b71      	ldr	r3, [pc, #452]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 8001f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f46:	4a70      	ldr	r2, [pc, #448]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 8001f48:	f023 0301 	bic.w	r3, r3, #1
 8001f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f4e:	4b6e      	ldr	r3, [pc, #440]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 8001f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f52:	4a6d      	ldr	r2, [pc, #436]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 8001f54:	f023 0304 	bic.w	r3, r3, #4
 8001f58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d015      	beq.n	8001f8e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f62:	f7ff fa81 	bl	8001468 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f68:	e00a      	b.n	8001f80 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f6a:	f7ff fa7d 	bl	8001468 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e0bc      	b.n	80020fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f80:	4b61      	ldr	r3, [pc, #388]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 8001f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0ee      	beq.n	8001f6a <HAL_RCC_OscConfig+0x33a>
 8001f8c:	e014      	b.n	8001fb8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8e:	f7ff fa6b 	bl	8001468 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f94:	e00a      	b.n	8001fac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f96:	f7ff fa67 	bl	8001468 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e0a6      	b.n	80020fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fac:	4b56      	ldr	r3, [pc, #344]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 8001fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1ee      	bne.n	8001f96 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fb8:	7dfb      	ldrb	r3, [r7, #23]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d105      	bne.n	8001fca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fbe:	4b52      	ldr	r3, [pc, #328]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	4a51      	ldr	r2, [pc, #324]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 8001fc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 8092 	beq.w	80020f8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fd4:	4b4c      	ldr	r3, [pc, #304]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 030c 	and.w	r3, r3, #12
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d05c      	beq.n	800209a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d141      	bne.n	800206c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe8:	4b48      	ldr	r3, [pc, #288]	; (800210c <HAL_RCC_OscConfig+0x4dc>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fee:	f7ff fa3b 	bl	8001468 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff6:	f7ff fa37 	bl	8001468 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e078      	b.n	80020fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002008:	4b3f      	ldr	r3, [pc, #252]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1f0      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69da      	ldr	r2, [r3, #28]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	431a      	orrs	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002022:	019b      	lsls	r3, r3, #6
 8002024:	431a      	orrs	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202a:	085b      	lsrs	r3, r3, #1
 800202c:	3b01      	subs	r3, #1
 800202e:	041b      	lsls	r3, r3, #16
 8002030:	431a      	orrs	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002036:	061b      	lsls	r3, r3, #24
 8002038:	4933      	ldr	r1, [pc, #204]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 800203a:	4313      	orrs	r3, r2
 800203c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800203e:	4b33      	ldr	r3, [pc, #204]	; (800210c <HAL_RCC_OscConfig+0x4dc>)
 8002040:	2201      	movs	r2, #1
 8002042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002044:	f7ff fa10 	bl	8001468 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800204c:	f7ff fa0c 	bl	8001468 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e04d      	b.n	80020fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205e:	4b2a      	ldr	r3, [pc, #168]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCC_OscConfig+0x41c>
 800206a:	e045      	b.n	80020f8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206c:	4b27      	ldr	r3, [pc, #156]	; (800210c <HAL_RCC_OscConfig+0x4dc>)
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002072:	f7ff f9f9 	bl	8001468 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800207a:	f7ff f9f5 	bl	8001468 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e036      	b.n	80020fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800208c:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1f0      	bne.n	800207a <HAL_RCC_OscConfig+0x44a>
 8002098:	e02e      	b.n	80020f8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d101      	bne.n	80020a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e029      	b.n	80020fa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020a6:	4b18      	ldr	r3, [pc, #96]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d11c      	bne.n	80020f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d115      	bne.n	80020f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020ce:	4013      	ands	r3, r2
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d10d      	bne.n	80020f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d106      	bne.n	80020f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d001      	beq.n	80020f8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e000      	b.n	80020fa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40007000 	.word	0x40007000
 8002108:	40023800 	.word	0x40023800
 800210c:	42470060 	.word	0x42470060

08002110 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e0cc      	b.n	80022be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002124:	4b68      	ldr	r3, [pc, #416]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 030f 	and.w	r3, r3, #15
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d90c      	bls.n	800214c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002132:	4b65      	ldr	r3, [pc, #404]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800213a:	4b63      	ldr	r3, [pc, #396]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d001      	beq.n	800214c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0b8      	b.n	80022be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d020      	beq.n	800219a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002164:	4b59      	ldr	r3, [pc, #356]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	4a58      	ldr	r2, [pc, #352]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800216e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800217c:	4b53      	ldr	r3, [pc, #332]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	4a52      	ldr	r2, [pc, #328]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 8002182:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002186:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002188:	4b50      	ldr	r3, [pc, #320]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	494d      	ldr	r1, [pc, #308]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 8002196:	4313      	orrs	r3, r2
 8002198:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d044      	beq.n	8002230 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d107      	bne.n	80021be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ae:	4b47      	ldr	r3, [pc, #284]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d119      	bne.n	80021ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e07f      	b.n	80022be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d003      	beq.n	80021ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d107      	bne.n	80021de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ce:	4b3f      	ldr	r3, [pc, #252]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d109      	bne.n	80021ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e06f      	b.n	80022be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021de:	4b3b      	ldr	r3, [pc, #236]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e067      	b.n	80022be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ee:	4b37      	ldr	r3, [pc, #220]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f023 0203 	bic.w	r2, r3, #3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	4934      	ldr	r1, [pc, #208]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002200:	f7ff f932 	bl	8001468 <HAL_GetTick>
 8002204:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002206:	e00a      	b.n	800221e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002208:	f7ff f92e 	bl	8001468 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f241 3288 	movw	r2, #5000	; 0x1388
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e04f      	b.n	80022be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221e:	4b2b      	ldr	r3, [pc, #172]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 020c 	and.w	r2, r3, #12
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	429a      	cmp	r2, r3
 800222e:	d1eb      	bne.n	8002208 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002230:	4b25      	ldr	r3, [pc, #148]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 030f 	and.w	r3, r3, #15
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d20c      	bcs.n	8002258 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223e:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002246:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d001      	beq.n	8002258 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e032      	b.n	80022be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d008      	beq.n	8002276 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002264:	4b19      	ldr	r3, [pc, #100]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	4916      	ldr	r1, [pc, #88]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	4313      	orrs	r3, r2
 8002274:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	2b00      	cmp	r3, #0
 8002280:	d009      	beq.n	8002296 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	490e      	ldr	r1, [pc, #56]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	4313      	orrs	r3, r2
 8002294:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002296:	f000 f821 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 800229a:	4601      	mov	r1, r0
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	4a0a      	ldr	r2, [pc, #40]	; (80022d0 <HAL_RCC_ClockConfig+0x1c0>)
 80022a8:	5cd3      	ldrb	r3, [r2, r3]
 80022aa:	fa21 f303 	lsr.w	r3, r1, r3
 80022ae:	4a09      	ldr	r2, [pc, #36]	; (80022d4 <HAL_RCC_ClockConfig+0x1c4>)
 80022b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <HAL_RCC_ClockConfig+0x1c8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff f892 	bl	80013e0 <HAL_InitTick>

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40023c00 	.word	0x40023c00
 80022cc:	40023800 	.word	0x40023800
 80022d0:	08002e30 	.word	0x08002e30
 80022d4:	20000134 	.word	0x20000134
 80022d8:	20000138 	.word	0x20000138

080022dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	607b      	str	r3, [r7, #4]
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	2300      	movs	r3, #0
 80022ec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022f2:	4b63      	ldr	r3, [pc, #396]	; (8002480 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	d007      	beq.n	800230e <HAL_RCC_GetSysClockFreq+0x32>
 80022fe:	2b08      	cmp	r3, #8
 8002300:	d008      	beq.n	8002314 <HAL_RCC_GetSysClockFreq+0x38>
 8002302:	2b00      	cmp	r3, #0
 8002304:	f040 80b4 	bne.w	8002470 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002308:	4b5e      	ldr	r3, [pc, #376]	; (8002484 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800230a:	60bb      	str	r3, [r7, #8]
       break;
 800230c:	e0b3      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800230e:	4b5e      	ldr	r3, [pc, #376]	; (8002488 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002310:	60bb      	str	r3, [r7, #8]
      break;
 8002312:	e0b0      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002314:	4b5a      	ldr	r3, [pc, #360]	; (8002480 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800231c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800231e:	4b58      	ldr	r3, [pc, #352]	; (8002480 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d04a      	beq.n	80023c0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800232a:	4b55      	ldr	r3, [pc, #340]	; (8002480 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	099b      	lsrs	r3, r3, #6
 8002330:	f04f 0400 	mov.w	r4, #0
 8002334:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002338:	f04f 0200 	mov.w	r2, #0
 800233c:	ea03 0501 	and.w	r5, r3, r1
 8002340:	ea04 0602 	and.w	r6, r4, r2
 8002344:	4629      	mov	r1, r5
 8002346:	4632      	mov	r2, r6
 8002348:	f04f 0300 	mov.w	r3, #0
 800234c:	f04f 0400 	mov.w	r4, #0
 8002350:	0154      	lsls	r4, r2, #5
 8002352:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002356:	014b      	lsls	r3, r1, #5
 8002358:	4619      	mov	r1, r3
 800235a:	4622      	mov	r2, r4
 800235c:	1b49      	subs	r1, r1, r5
 800235e:	eb62 0206 	sbc.w	r2, r2, r6
 8002362:	f04f 0300 	mov.w	r3, #0
 8002366:	f04f 0400 	mov.w	r4, #0
 800236a:	0194      	lsls	r4, r2, #6
 800236c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002370:	018b      	lsls	r3, r1, #6
 8002372:	1a5b      	subs	r3, r3, r1
 8002374:	eb64 0402 	sbc.w	r4, r4, r2
 8002378:	f04f 0100 	mov.w	r1, #0
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	00e2      	lsls	r2, r4, #3
 8002382:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002386:	00d9      	lsls	r1, r3, #3
 8002388:	460b      	mov	r3, r1
 800238a:	4614      	mov	r4, r2
 800238c:	195b      	adds	r3, r3, r5
 800238e:	eb44 0406 	adc.w	r4, r4, r6
 8002392:	f04f 0100 	mov.w	r1, #0
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	0262      	lsls	r2, r4, #9
 800239c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80023a0:	0259      	lsls	r1, r3, #9
 80023a2:	460b      	mov	r3, r1
 80023a4:	4614      	mov	r4, r2
 80023a6:	4618      	mov	r0, r3
 80023a8:	4621      	mov	r1, r4
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f04f 0400 	mov.w	r4, #0
 80023b0:	461a      	mov	r2, r3
 80023b2:	4623      	mov	r3, r4
 80023b4:	f7fd ff08 	bl	80001c8 <__aeabi_uldivmod>
 80023b8:	4603      	mov	r3, r0
 80023ba:	460c      	mov	r4, r1
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	e049      	b.n	8002454 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023c0:	4b2f      	ldr	r3, [pc, #188]	; (8002480 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	099b      	lsrs	r3, r3, #6
 80023c6:	f04f 0400 	mov.w	r4, #0
 80023ca:	f240 11ff 	movw	r1, #511	; 0x1ff
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	ea03 0501 	and.w	r5, r3, r1
 80023d6:	ea04 0602 	and.w	r6, r4, r2
 80023da:	4629      	mov	r1, r5
 80023dc:	4632      	mov	r2, r6
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	f04f 0400 	mov.w	r4, #0
 80023e6:	0154      	lsls	r4, r2, #5
 80023e8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023ec:	014b      	lsls	r3, r1, #5
 80023ee:	4619      	mov	r1, r3
 80023f0:	4622      	mov	r2, r4
 80023f2:	1b49      	subs	r1, r1, r5
 80023f4:	eb62 0206 	sbc.w	r2, r2, r6
 80023f8:	f04f 0300 	mov.w	r3, #0
 80023fc:	f04f 0400 	mov.w	r4, #0
 8002400:	0194      	lsls	r4, r2, #6
 8002402:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002406:	018b      	lsls	r3, r1, #6
 8002408:	1a5b      	subs	r3, r3, r1
 800240a:	eb64 0402 	sbc.w	r4, r4, r2
 800240e:	f04f 0100 	mov.w	r1, #0
 8002412:	f04f 0200 	mov.w	r2, #0
 8002416:	00e2      	lsls	r2, r4, #3
 8002418:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800241c:	00d9      	lsls	r1, r3, #3
 800241e:	460b      	mov	r3, r1
 8002420:	4614      	mov	r4, r2
 8002422:	195b      	adds	r3, r3, r5
 8002424:	eb44 0406 	adc.w	r4, r4, r6
 8002428:	f04f 0100 	mov.w	r1, #0
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	02a2      	lsls	r2, r4, #10
 8002432:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002436:	0299      	lsls	r1, r3, #10
 8002438:	460b      	mov	r3, r1
 800243a:	4614      	mov	r4, r2
 800243c:	4618      	mov	r0, r3
 800243e:	4621      	mov	r1, r4
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f04f 0400 	mov.w	r4, #0
 8002446:	461a      	mov	r2, r3
 8002448:	4623      	mov	r3, r4
 800244a:	f7fd febd 	bl	80001c8 <__aeabi_uldivmod>
 800244e:	4603      	mov	r3, r0
 8002450:	460c      	mov	r4, r1
 8002452:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002454:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	0c1b      	lsrs	r3, r3, #16
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	3301      	adds	r3, #1
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	fbb2 f3f3 	udiv	r3, r2, r3
 800246c:	60bb      	str	r3, [r7, #8]
      break;
 800246e:	e002      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002470:	4b04      	ldr	r3, [pc, #16]	; (8002484 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002472:	60bb      	str	r3, [r7, #8]
      break;
 8002474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002476:	68bb      	ldr	r3, [r7, #8]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002480:	40023800 	.word	0x40023800
 8002484:	00f42400 	.word	0x00f42400
 8002488:	007a1200 	.word	0x007a1200

0800248c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e056      	b.n	800254c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d106      	bne.n	80024be <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7fe fb9d 	bl	8000bf8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2202      	movs	r2, #2
 80024c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024d4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	431a      	orrs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	431a      	orrs	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	431a      	orrs	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	431a      	orrs	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	ea42 0103 	orr.w	r1, r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	0c1b      	lsrs	r3, r3, #16
 800251c:	f003 0104 	and.w	r1, r3, #4
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	430a      	orrs	r2, r1
 800252a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	69da      	ldr	r2, [r3, #28]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800253a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e01d      	b.n	80025a2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d106      	bne.n	8002580 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7fe fb84 	bl	8000c88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2202      	movs	r2, #2
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3304      	adds	r3, #4
 8002590:	4619      	mov	r1, r3
 8002592:	4610      	mov	r0, r2
 8002594:	f000 fa4a 	bl	8002a2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b085      	sub	sp, #20
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68da      	ldr	r2, [r3, #12]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f042 0201 	orr.w	r2, r2, #1
 80025c0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2b06      	cmp	r3, #6
 80025d2:	d007      	beq.n	80025e4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0201 	orr.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0201 	bic.w	r2, r2, #1
 8002608:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6a1a      	ldr	r2, [r3, #32]
 8002610:	f241 1311 	movw	r3, #4369	; 0x1111
 8002614:	4013      	ands	r3, r2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10f      	bne.n	800263a <HAL_TIM_Base_Stop_IT+0x48>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6a1a      	ldr	r2, [r3, #32]
 8002620:	f240 4344 	movw	r3, #1092	; 0x444
 8002624:	4013      	ands	r3, r2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d107      	bne.n	800263a <HAL_TIM_Base_Stop_IT+0x48>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0201 	bic.w	r2, r2, #1
 8002638:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b02      	cmp	r3, #2
 800265c:	d122      	bne.n	80026a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b02      	cmp	r3, #2
 800266a:	d11b      	bne.n	80026a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f06f 0202 	mvn.w	r2, #2
 8002674:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f9af 	bl	80029ee <HAL_TIM_IC_CaptureCallback>
 8002690:	e005      	b.n	800269e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f9a1 	bl	80029da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 f9b2 	bl	8002a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d122      	bne.n	80026f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b04      	cmp	r3, #4
 80026be:	d11b      	bne.n	80026f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f06f 0204 	mvn.w	r2, #4
 80026c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2202      	movs	r2, #2
 80026ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f985 	bl	80029ee <HAL_TIM_IC_CaptureCallback>
 80026e4:	e005      	b.n	80026f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f977 	bl	80029da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f988 	bl	8002a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f003 0308 	and.w	r3, r3, #8
 8002702:	2b08      	cmp	r3, #8
 8002704:	d122      	bne.n	800274c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f003 0308 	and.w	r3, r3, #8
 8002710:	2b08      	cmp	r3, #8
 8002712:	d11b      	bne.n	800274c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f06f 0208 	mvn.w	r2, #8
 800271c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2204      	movs	r2, #4
 8002722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f95b 	bl	80029ee <HAL_TIM_IC_CaptureCallback>
 8002738:	e005      	b.n	8002746 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f94d 	bl	80029da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 f95e 	bl	8002a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	2b10      	cmp	r3, #16
 8002758:	d122      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f003 0310 	and.w	r3, r3, #16
 8002764:	2b10      	cmp	r3, #16
 8002766:	d11b      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f06f 0210 	mvn.w	r2, #16
 8002770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2208      	movs	r2, #8
 8002776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f931 	bl	80029ee <HAL_TIM_IC_CaptureCallback>
 800278c:	e005      	b.n	800279a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f923 	bl	80029da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f934 	bl	8002a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d10e      	bne.n	80027cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d107      	bne.n	80027cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f06f 0201 	mvn.w	r2, #1
 80027c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f8fd 	bl	80029c6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d6:	2b80      	cmp	r3, #128	; 0x80
 80027d8:	d10e      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e4:	2b80      	cmp	r3, #128	; 0x80
 80027e6:	d107      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 fada 	bl	8002dac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002802:	2b40      	cmp	r3, #64	; 0x40
 8002804:	d10e      	bne.n	8002824 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002810:	2b40      	cmp	r3, #64	; 0x40
 8002812:	d107      	bne.n	8002824 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800281c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f8f9 	bl	8002a16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	f003 0320 	and.w	r3, r3, #32
 800282e:	2b20      	cmp	r3, #32
 8002830:	d10e      	bne.n	8002850 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f003 0320 	and.w	r3, r3, #32
 800283c:	2b20      	cmp	r3, #32
 800283e:	d107      	bne.n	8002850 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f06f 0220 	mvn.w	r2, #32
 8002848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 faa4 	bl	8002d98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002850:	bf00      	nop
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_TIM_ConfigClockSource+0x18>
 800286c:	2302      	movs	r3, #2
 800286e:	e0a6      	b.n	80029be <HAL_TIM_ConfigClockSource+0x166>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800288e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002896:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b40      	cmp	r3, #64	; 0x40
 80028a6:	d067      	beq.n	8002978 <HAL_TIM_ConfigClockSource+0x120>
 80028a8:	2b40      	cmp	r3, #64	; 0x40
 80028aa:	d80b      	bhi.n	80028c4 <HAL_TIM_ConfigClockSource+0x6c>
 80028ac:	2b10      	cmp	r3, #16
 80028ae:	d073      	beq.n	8002998 <HAL_TIM_ConfigClockSource+0x140>
 80028b0:	2b10      	cmp	r3, #16
 80028b2:	d802      	bhi.n	80028ba <HAL_TIM_ConfigClockSource+0x62>
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d06f      	beq.n	8002998 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80028b8:	e078      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80028ba:	2b20      	cmp	r3, #32
 80028bc:	d06c      	beq.n	8002998 <HAL_TIM_ConfigClockSource+0x140>
 80028be:	2b30      	cmp	r3, #48	; 0x30
 80028c0:	d06a      	beq.n	8002998 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80028c2:	e073      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80028c4:	2b70      	cmp	r3, #112	; 0x70
 80028c6:	d00d      	beq.n	80028e4 <HAL_TIM_ConfigClockSource+0x8c>
 80028c8:	2b70      	cmp	r3, #112	; 0x70
 80028ca:	d804      	bhi.n	80028d6 <HAL_TIM_ConfigClockSource+0x7e>
 80028cc:	2b50      	cmp	r3, #80	; 0x50
 80028ce:	d033      	beq.n	8002938 <HAL_TIM_ConfigClockSource+0xe0>
 80028d0:	2b60      	cmp	r3, #96	; 0x60
 80028d2:	d041      	beq.n	8002958 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80028d4:	e06a      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80028d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028da:	d066      	beq.n	80029aa <HAL_TIM_ConfigClockSource+0x152>
 80028dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028e0:	d017      	beq.n	8002912 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80028e2:	e063      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	6899      	ldr	r1, [r3, #8]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f000 f9b4 	bl	8002c60 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002906:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	609a      	str	r2, [r3, #8]
      break;
 8002910:	e04c      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6818      	ldr	r0, [r3, #0]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	6899      	ldr	r1, [r3, #8]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f000 f99d 	bl	8002c60 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002934:	609a      	str	r2, [r3, #8]
      break;
 8002936:	e039      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	6859      	ldr	r1, [r3, #4]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	461a      	mov	r2, r3
 8002946:	f000 f911 	bl	8002b6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2150      	movs	r1, #80	; 0x50
 8002950:	4618      	mov	r0, r3
 8002952:	f000 f96a 	bl	8002c2a <TIM_ITRx_SetConfig>
      break;
 8002956:	e029      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	6859      	ldr	r1, [r3, #4]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	461a      	mov	r2, r3
 8002966:	f000 f930 	bl	8002bca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2160      	movs	r1, #96	; 0x60
 8002970:	4618      	mov	r0, r3
 8002972:	f000 f95a 	bl	8002c2a <TIM_ITRx_SetConfig>
      break;
 8002976:	e019      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6818      	ldr	r0, [r3, #0]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	6859      	ldr	r1, [r3, #4]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	461a      	mov	r2, r3
 8002986:	f000 f8f1 	bl	8002b6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2140      	movs	r1, #64	; 0x40
 8002990:	4618      	mov	r0, r3
 8002992:	f000 f94a 	bl	8002c2a <TIM_ITRx_SetConfig>
      break;
 8002996:	e009      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4619      	mov	r1, r3
 80029a2:	4610      	mov	r0, r2
 80029a4:	f000 f941 	bl	8002c2a <TIM_ITRx_SetConfig>
      break;
 80029a8:	e000      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x154>
      break;
 80029aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
	...

08002a2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a40      	ldr	r2, [pc, #256]	; (8002b40 <TIM_Base_SetConfig+0x114>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d013      	beq.n	8002a6c <TIM_Base_SetConfig+0x40>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a4a:	d00f      	beq.n	8002a6c <TIM_Base_SetConfig+0x40>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a3d      	ldr	r2, [pc, #244]	; (8002b44 <TIM_Base_SetConfig+0x118>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d00b      	beq.n	8002a6c <TIM_Base_SetConfig+0x40>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a3c      	ldr	r2, [pc, #240]	; (8002b48 <TIM_Base_SetConfig+0x11c>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d007      	beq.n	8002a6c <TIM_Base_SetConfig+0x40>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a3b      	ldr	r2, [pc, #236]	; (8002b4c <TIM_Base_SetConfig+0x120>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d003      	beq.n	8002a6c <TIM_Base_SetConfig+0x40>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a3a      	ldr	r2, [pc, #232]	; (8002b50 <TIM_Base_SetConfig+0x124>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d108      	bne.n	8002a7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a2f      	ldr	r2, [pc, #188]	; (8002b40 <TIM_Base_SetConfig+0x114>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d02b      	beq.n	8002ade <TIM_Base_SetConfig+0xb2>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a8c:	d027      	beq.n	8002ade <TIM_Base_SetConfig+0xb2>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a2c      	ldr	r2, [pc, #176]	; (8002b44 <TIM_Base_SetConfig+0x118>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d023      	beq.n	8002ade <TIM_Base_SetConfig+0xb2>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a2b      	ldr	r2, [pc, #172]	; (8002b48 <TIM_Base_SetConfig+0x11c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d01f      	beq.n	8002ade <TIM_Base_SetConfig+0xb2>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a2a      	ldr	r2, [pc, #168]	; (8002b4c <TIM_Base_SetConfig+0x120>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d01b      	beq.n	8002ade <TIM_Base_SetConfig+0xb2>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a29      	ldr	r2, [pc, #164]	; (8002b50 <TIM_Base_SetConfig+0x124>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d017      	beq.n	8002ade <TIM_Base_SetConfig+0xb2>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a28      	ldr	r2, [pc, #160]	; (8002b54 <TIM_Base_SetConfig+0x128>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d013      	beq.n	8002ade <TIM_Base_SetConfig+0xb2>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a27      	ldr	r2, [pc, #156]	; (8002b58 <TIM_Base_SetConfig+0x12c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d00f      	beq.n	8002ade <TIM_Base_SetConfig+0xb2>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a26      	ldr	r2, [pc, #152]	; (8002b5c <TIM_Base_SetConfig+0x130>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d00b      	beq.n	8002ade <TIM_Base_SetConfig+0xb2>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a25      	ldr	r2, [pc, #148]	; (8002b60 <TIM_Base_SetConfig+0x134>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d007      	beq.n	8002ade <TIM_Base_SetConfig+0xb2>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a24      	ldr	r2, [pc, #144]	; (8002b64 <TIM_Base_SetConfig+0x138>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d003      	beq.n	8002ade <TIM_Base_SetConfig+0xb2>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a23      	ldr	r2, [pc, #140]	; (8002b68 <TIM_Base_SetConfig+0x13c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d108      	bne.n	8002af0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a0a      	ldr	r2, [pc, #40]	; (8002b40 <TIM_Base_SetConfig+0x114>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d003      	beq.n	8002b24 <TIM_Base_SetConfig+0xf8>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a0c      	ldr	r2, [pc, #48]	; (8002b50 <TIM_Base_SetConfig+0x124>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d103      	bne.n	8002b2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	615a      	str	r2, [r3, #20]
}
 8002b32:	bf00      	nop
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40010000 	.word	0x40010000
 8002b44:	40000400 	.word	0x40000400
 8002b48:	40000800 	.word	0x40000800
 8002b4c:	40000c00 	.word	0x40000c00
 8002b50:	40010400 	.word	0x40010400
 8002b54:	40014000 	.word	0x40014000
 8002b58:	40014400 	.word	0x40014400
 8002b5c:	40014800 	.word	0x40014800
 8002b60:	40001800 	.word	0x40001800
 8002b64:	40001c00 	.word	0x40001c00
 8002b68:	40002000 	.word	0x40002000

08002b6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b087      	sub	sp, #28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	f023 0201 	bic.w	r2, r3, #1
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f023 030a 	bic.w	r3, r3, #10
 8002ba8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	621a      	str	r2, [r3, #32]
}
 8002bbe:	bf00      	nop
 8002bc0:	371c      	adds	r7, #28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b087      	sub	sp, #28
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	60f8      	str	r0, [r7, #12]
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	f023 0210 	bic.w	r2, r3, #16
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bf4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	621a      	str	r2, [r3, #32]
}
 8002c1e:	bf00      	nop
 8002c20:	371c      	adds	r7, #28
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b085      	sub	sp, #20
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	f043 0307 	orr.w	r3, r3, #7
 8002c4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	609a      	str	r2, [r3, #8]
}
 8002c54:	bf00      	nop
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	021a      	lsls	r2, r3, #8
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	431a      	orrs	r2, r3
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	609a      	str	r2, [r3, #8]
}
 8002c94:	bf00      	nop
 8002c96:	371c      	adds	r7, #28
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e05a      	b.n	8002d6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a21      	ldr	r2, [pc, #132]	; (8002d7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d022      	beq.n	8002d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d04:	d01d      	beq.n	8002d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a1d      	ldr	r2, [pc, #116]	; (8002d80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d018      	beq.n	8002d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a1b      	ldr	r2, [pc, #108]	; (8002d84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d013      	beq.n	8002d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a1a      	ldr	r2, [pc, #104]	; (8002d88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d00e      	beq.n	8002d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a18      	ldr	r2, [pc, #96]	; (8002d8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d009      	beq.n	8002d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a17      	ldr	r2, [pc, #92]	; (8002d90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d004      	beq.n	8002d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a15      	ldr	r2, [pc, #84]	; (8002d94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d10c      	bne.n	8002d5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	40010000 	.word	0x40010000
 8002d80:	40000400 	.word	0x40000400
 8002d84:	40000800 	.word	0x40000800
 8002d88:	40000c00 	.word	0x40000c00
 8002d8c:	40010400 	.word	0x40010400
 8002d90:	40014000 	.word	0x40014000
 8002d94:	40001800 	.word	0x40001800

08002d98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <__libc_init_array>:
 8002dc0:	b570      	push	{r4, r5, r6, lr}
 8002dc2:	4e0d      	ldr	r6, [pc, #52]	; (8002df8 <__libc_init_array+0x38>)
 8002dc4:	4c0d      	ldr	r4, [pc, #52]	; (8002dfc <__libc_init_array+0x3c>)
 8002dc6:	1ba4      	subs	r4, r4, r6
 8002dc8:	10a4      	asrs	r4, r4, #2
 8002dca:	2500      	movs	r5, #0
 8002dcc:	42a5      	cmp	r5, r4
 8002dce:	d109      	bne.n	8002de4 <__libc_init_array+0x24>
 8002dd0:	4e0b      	ldr	r6, [pc, #44]	; (8002e00 <__libc_init_array+0x40>)
 8002dd2:	4c0c      	ldr	r4, [pc, #48]	; (8002e04 <__libc_init_array+0x44>)
 8002dd4:	f000 f820 	bl	8002e18 <_init>
 8002dd8:	1ba4      	subs	r4, r4, r6
 8002dda:	10a4      	asrs	r4, r4, #2
 8002ddc:	2500      	movs	r5, #0
 8002dde:	42a5      	cmp	r5, r4
 8002de0:	d105      	bne.n	8002dee <__libc_init_array+0x2e>
 8002de2:	bd70      	pop	{r4, r5, r6, pc}
 8002de4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002de8:	4798      	blx	r3
 8002dea:	3501      	adds	r5, #1
 8002dec:	e7ee      	b.n	8002dcc <__libc_init_array+0xc>
 8002dee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002df2:	4798      	blx	r3
 8002df4:	3501      	adds	r5, #1
 8002df6:	e7f2      	b.n	8002dde <__libc_init_array+0x1e>
 8002df8:	08002e48 	.word	0x08002e48
 8002dfc:	08002e48 	.word	0x08002e48
 8002e00:	08002e48 	.word	0x08002e48
 8002e04:	08002e4c 	.word	0x08002e4c

08002e08 <memset>:
 8002e08:	4402      	add	r2, r0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d100      	bne.n	8002e12 <memset+0xa>
 8002e10:	4770      	bx	lr
 8002e12:	f803 1b01 	strb.w	r1, [r3], #1
 8002e16:	e7f9      	b.n	8002e0c <memset+0x4>

08002e18 <_init>:
 8002e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e1a:	bf00      	nop
 8002e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e1e:	bc08      	pop	{r3}
 8002e20:	469e      	mov	lr, r3
 8002e22:	4770      	bx	lr

08002e24 <_fini>:
 8002e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e26:	bf00      	nop
 8002e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e2a:	bc08      	pop	{r3}
 8002e2c:	469e      	mov	lr, r3
 8002e2e:	4770      	bx	lr
