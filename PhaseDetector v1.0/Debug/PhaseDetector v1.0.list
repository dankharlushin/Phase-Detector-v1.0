
PhaseDetector v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006864  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080069f4  080069f4  000169f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a5c  08006a5c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08006a5c  08006a5c  00016a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a64  08006a64  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a64  08006a64  00016a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a68  08006a68  00016a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08006a6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  200001ec  08006c58  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000534  08006c58  00020534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000134f0  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000270c  00000000  00000000  0003370c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001000  00000000  00000000  00035e18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ee8  00000000  00000000  00036e18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020f13  00000000  00000000  00037d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c2b6  00000000  00000000  00058c13  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4523  00000000  00000000  00064ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001293ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004634  00000000  00000000  00129468  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080069dc 	.word	0x080069dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	080069dc 	.word	0x080069dc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f001 fab8 	bl	8001af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f820 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 fa44 	bl	8000a18 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000590:	f000 f886 	bl	80006a0 <MX_SPI3_Init>
  MX_TIM9_Init();
 8000594:	f000 f9a2 	bl	80008dc <MX_TIM9_Init>
  MX_TIM12_Init();
 8000598:	f000 f9da 	bl	8000950 <MX_TIM12_Init>
  MX_TIM2_Init();
 800059c:	f000 f8b6 	bl	800070c <MX_TIM2_Init>
  MX_TIM3_Init();
 80005a0:	f000 f900 	bl	80007a4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005a4:	f000 f94c 	bl	8000840 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80005a8:	f000 fa0c 	bl	80009c4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  GPIO_Init();
 80005ac:	f000 facc 	bl	8000b48 <GPIO_Init>
  WizchIP_main(&hspi3,SPI3_CS_GPIO_Port, SPI3_CS_Pin, &huart1);
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <main+0x40>)
 80005b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005b6:	4903      	ldr	r1, [pc, #12]	; (80005c4 <main+0x44>)
 80005b8:	4803      	ldr	r0, [pc, #12]	; (80005c8 <main+0x48>)
 80005ba:	f001 f839 	bl	8001630 <WizchIP_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005be:	e7fe      	b.n	80005be <main+0x3e>
 80005c0:	20000428 	.word	0x20000428
 80005c4:	40020000 	.word	0x40020000
 80005c8:	200003cc 	.word	0x200003cc

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	; 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	2230      	movs	r2, #48	; 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f005 fdd6 	bl	800618c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	4b28      	ldr	r3, [pc, #160]	; (8000698 <SystemClock_Config+0xcc>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	4a27      	ldr	r2, [pc, #156]	; (8000698 <SystemClock_Config+0xcc>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000600:	4b25      	ldr	r3, [pc, #148]	; (8000698 <SystemClock_Config+0xcc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b22      	ldr	r3, [pc, #136]	; (800069c <SystemClock_Config+0xd0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a21      	ldr	r2, [pc, #132]	; (800069c <SystemClock_Config+0xd0>)
 8000616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <SystemClock_Config+0xd0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000628:	2301      	movs	r3, #1
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800062c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000636:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800063a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000640:	23a8      	movs	r3, #168	; 0xa8
 8000642:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000644:	2302      	movs	r3, #2
 8000646:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000648:	2304      	movs	r3, #4
 800064a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 0320 	add.w	r3, r7, #32
 8000650:	4618      	mov	r0, r3
 8000652:	f001 fe9b 	bl	800238c <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800065c:	f000 fb92 	bl	8000d84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000660:	230f      	movs	r3, #15
 8000662:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000664:	2302      	movs	r3, #2
 8000666:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800066c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000670:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000676:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2105      	movs	r1, #5
 800067e:	4618      	mov	r0, r3
 8000680:	f002 f8f4 	bl	800286c <HAL_RCC_ClockConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800068a:	f000 fb7b 	bl	8000d84 <Error_Handler>
  }
}
 800068e:	bf00      	nop
 8000690:	3750      	adds	r7, #80	; 0x50
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80006a4:	4b17      	ldr	r3, [pc, #92]	; (8000704 <MX_SPI3_Init+0x64>)
 80006a6:	4a18      	ldr	r2, [pc, #96]	; (8000708 <MX_SPI3_Init+0x68>)
 80006a8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80006aa:	4b16      	ldr	r3, [pc, #88]	; (8000704 <MX_SPI3_Init+0x64>)
 80006ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006b0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80006b2:	4b14      	ldr	r3, [pc, #80]	; (8000704 <MX_SPI3_Init+0x64>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <MX_SPI3_Init+0x64>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_SPI3_Init+0x64>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_SPI3_Init+0x64>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_SPI3_Init+0x64>)
 80006cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006d2:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_SPI3_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <MX_SPI3_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_SPI3_Init+0x64>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <MX_SPI3_Init+0x64>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_SPI3_Init+0x64>)
 80006ec:	220a      	movs	r2, #10
 80006ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80006f0:	4804      	ldr	r0, [pc, #16]	; (8000704 <MX_SPI3_Init+0x64>)
 80006f2:	f002 faad 	bl	8002c50 <HAL_SPI_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80006fc:	f000 fb42 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	200003cc 	.word	0x200003cc
 8000708:	40003c00 	.word	0x40003c00

0800070c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000712:	f107 0308 	add.w	r3, r7, #8
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000720:	463b      	mov	r3, r7
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000728:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <MX_TIM2_Init+0x94>)
 800072a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800072e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000730:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <MX_TIM2_Init+0x94>)
 8000732:	2201      	movs	r2, #1
 8000734:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000736:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_TIM2_Init+0x94>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800073c:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <MX_TIM2_Init+0x94>)
 800073e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000742:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000744:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <MX_TIM2_Init+0x94>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <MX_TIM2_Init+0x94>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000750:	4813      	ldr	r0, [pc, #76]	; (80007a0 <MX_TIM2_Init+0x94>)
 8000752:	f002 ffd1 	bl	80036f8 <HAL_TIM_Base_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800075c:	f000 fb12 	bl	8000d84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000764:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000766:	f107 0308 	add.w	r3, r7, #8
 800076a:	4619      	mov	r1, r3
 800076c:	480c      	ldr	r0, [pc, #48]	; (80007a0 <MX_TIM2_Init+0x94>)
 800076e:	f003 f945 	bl	80039fc <HAL_TIM_ConfigClockSource>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000778:	f000 fb04 	bl	8000d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077c:	2300      	movs	r3, #0
 800077e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000780:	2300      	movs	r3, #0
 8000782:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000784:	463b      	mov	r3, r7
 8000786:	4619      	mov	r1, r3
 8000788:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_TIM2_Init+0x94>)
 800078a:	f003 fb5b 	bl	8003e44 <HAL_TIMEx_MasterConfigSynchronization>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000794:	f000 faf6 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	3718      	adds	r7, #24
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200004a8 	.word	0x200004a8

080007a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007aa:	f107 0308 	add.w	r3, r7, #8
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b8:	463b      	mov	r3, r7
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007c0:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <MX_TIM3_Init+0x94>)
 80007c2:	4a1e      	ldr	r2, [pc, #120]	; (800083c <MX_TIM3_Init+0x98>)
 80007c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80007c6:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <MX_TIM3_Init+0x94>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007cc:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_TIM3_Init+0x94>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80007d2:	4b19      	ldr	r3, [pc, #100]	; (8000838 <MX_TIM3_Init+0x94>)
 80007d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007da:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_TIM3_Init+0x94>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e0:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_TIM3_Init+0x94>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007e6:	4814      	ldr	r0, [pc, #80]	; (8000838 <MX_TIM3_Init+0x94>)
 80007e8:	f002 ff86 	bl	80036f8 <HAL_TIM_Base_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80007f2:	f000 fac7 	bl	8000d84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007fc:	f107 0308 	add.w	r3, r7, #8
 8000800:	4619      	mov	r1, r3
 8000802:	480d      	ldr	r0, [pc, #52]	; (8000838 <MX_TIM3_Init+0x94>)
 8000804:	f003 f8fa 	bl	80039fc <HAL_TIM_ConfigClockSource>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800080e:	f000 fab9 	bl	8000d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000812:	2300      	movs	r3, #0
 8000814:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800081a:	463b      	mov	r3, r7
 800081c:	4619      	mov	r1, r3
 800081e:	4806      	ldr	r0, [pc, #24]	; (8000838 <MX_TIM3_Init+0x94>)
 8000820:	f003 fb10 	bl	8003e44 <HAL_TIMEx_MasterConfigSynchronization>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800082a:	f000 faab 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	2000038c 	.word	0x2000038c
 800083c:	40000400 	.word	0x40000400

08000840 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000846:	f107 0308 	add.w	r3, r7, #8
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000854:	463b      	mov	r3, r7
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800085c:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <MX_TIM4_Init+0x94>)
 800085e:	4a1e      	ldr	r2, [pc, #120]	; (80008d8 <MX_TIM4_Init+0x98>)
 8000860:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8000862:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <MX_TIM4_Init+0x94>)
 8000864:	2201      	movs	r2, #1
 8000866:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000868:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_TIM4_Init+0x94>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800086e:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <MX_TIM4_Init+0x94>)
 8000870:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000874:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000876:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <MX_TIM4_Init+0x94>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087c:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <MX_TIM4_Init+0x94>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000882:	4814      	ldr	r0, [pc, #80]	; (80008d4 <MX_TIM4_Init+0x94>)
 8000884:	f002 ff38 	bl	80036f8 <HAL_TIM_Base_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800088e:	f000 fa79 	bl	8000d84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000892:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000896:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000898:	f107 0308 	add.w	r3, r7, #8
 800089c:	4619      	mov	r1, r3
 800089e:	480d      	ldr	r0, [pc, #52]	; (80008d4 <MX_TIM4_Init+0x94>)
 80008a0:	f003 f8ac 	bl	80039fc <HAL_TIM_ConfigClockSource>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80008aa:	f000 fa6b 	bl	8000d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ae:	2300      	movs	r3, #0
 80008b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008b6:	463b      	mov	r3, r7
 80008b8:	4619      	mov	r1, r3
 80008ba:	4806      	ldr	r0, [pc, #24]	; (80008d4 <MX_TIM4_Init+0x94>)
 80008bc:	f003 fac2 	bl	8003e44 <HAL_TIMEx_MasterConfigSynchronization>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80008c6:	f000 fa5d 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	3718      	adds	r7, #24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000344 	.word	0x20000344
 80008d8:	40000800 	.word	0x40000800

080008dc <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008e2:	463b      	mov	r3, r7
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80008ee:	4b16      	ldr	r3, [pc, #88]	; (8000948 <MX_TIM9_Init+0x6c>)
 80008f0:	4a16      	ldr	r2, [pc, #88]	; (800094c <MX_TIM9_Init+0x70>)
 80008f2:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_TIM9_Init+0x6c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <MX_TIM9_Init+0x6c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_TIM9_Init+0x6c>)
 8000902:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000906:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_TIM9_Init+0x6c>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_TIM9_Init+0x6c>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000914:	480c      	ldr	r0, [pc, #48]	; (8000948 <MX_TIM9_Init+0x6c>)
 8000916:	f002 feef 	bl	80036f8 <HAL_TIM_Base_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8000920:	f000 fa30 	bl	8000d84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000928:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800092a:	463b      	mov	r3, r7
 800092c:	4619      	mov	r1, r3
 800092e:	4806      	ldr	r0, [pc, #24]	; (8000948 <MX_TIM9_Init+0x6c>)
 8000930:	f003 f864 	bl	80039fc <HAL_TIM_ConfigClockSource>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 800093a:	f000 fa23 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000468 	.word	0x20000468
 800094c:	40014000 	.word	0x40014000

08000950 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000956:	463b      	mov	r3, r7
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000962:	4b16      	ldr	r3, [pc, #88]	; (80009bc <MX_TIM12_Init+0x6c>)
 8000964:	4a16      	ldr	r2, [pc, #88]	; (80009c0 <MX_TIM12_Init+0x70>)
 8000966:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1;
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_TIM12_Init+0x6c>)
 800096a:	2201      	movs	r2, #1
 800096c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <MX_TIM12_Init+0x6c>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_TIM12_Init+0x6c>)
 8000976:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800097a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_TIM12_Init+0x6c>)
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_TIM12_Init+0x6c>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000988:	480c      	ldr	r0, [pc, #48]	; (80009bc <MX_TIM12_Init+0x6c>)
 800098a:	f002 feb5 	bl	80036f8 <HAL_TIM_Base_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8000994:	f000 f9f6 	bl	8000d84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800099e:	463b      	mov	r3, r7
 80009a0:	4619      	mov	r1, r3
 80009a2:	4806      	ldr	r0, [pc, #24]	; (80009bc <MX_TIM12_Init+0x6c>)
 80009a4:	f003 f82a 	bl	80039fc <HAL_TIM_ConfigClockSource>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 80009ae:	f000 f9e9 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200004ec 	.word	0x200004ec
 80009c0:	40001800 	.word	0x40001800

080009c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009ca:	4a12      	ldr	r2, [pc, #72]	; (8000a14 <MX_USART1_UART_Init+0x50>)
 80009cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009ea:	220c      	movs	r2, #12
 80009ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009fc:	f003 fab2 	bl	8003f64 <HAL_UART_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a06:	f000 f9bd 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000428 	.word	0x20000428
 8000a14:	40011000 	.word	0x40011000

08000a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	; 0x28
 8000a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b41      	ldr	r3, [pc, #260]	; (8000b38 <MX_GPIO_Init+0x120>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a40      	ldr	r2, [pc, #256]	; (8000b38 <MX_GPIO_Init+0x120>)
 8000a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b3e      	ldr	r3, [pc, #248]	; (8000b38 <MX_GPIO_Init+0x120>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b3a      	ldr	r3, [pc, #232]	; (8000b38 <MX_GPIO_Init+0x120>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a39      	ldr	r2, [pc, #228]	; (8000b38 <MX_GPIO_Init+0x120>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b37      	ldr	r3, [pc, #220]	; (8000b38 <MX_GPIO_Init+0x120>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	4b33      	ldr	r3, [pc, #204]	; (8000b38 <MX_GPIO_Init+0x120>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a32      	ldr	r2, [pc, #200]	; (8000b38 <MX_GPIO_Init+0x120>)
 8000a70:	f043 0304 	orr.w	r3, r3, #4
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b30      	ldr	r3, [pc, #192]	; (8000b38 <MX_GPIO_Init+0x120>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b2c      	ldr	r3, [pc, #176]	; (8000b38 <MX_GPIO_Init+0x120>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a2b      	ldr	r2, [pc, #172]	; (8000b38 <MX_GPIO_Init+0x120>)
 8000a8c:	f043 0308 	orr.w	r3, r3, #8
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b29      	ldr	r3, [pc, #164]	; (8000b38 <MX_GPIO_Init+0x120>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0308 	and.w	r3, r3, #8
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	4b25      	ldr	r3, [pc, #148]	; (8000b38 <MX_GPIO_Init+0x120>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a24      	ldr	r2, [pc, #144]	; (8000b38 <MX_GPIO_Init+0x120>)
 8000aa8:	f043 0302 	orr.w	r3, r3, #2
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <MX_GPIO_Init+0x120>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0302 	and.w	r3, r3, #2
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8000aba:	2201      	movs	r2, #1
 8000abc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac0:	481e      	ldr	r0, [pc, #120]	; (8000b3c <MX_GPIO_Init+0x124>)
 8000ac2:	f001 fc31 	bl	8002328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, GPIO_PIN_SET);
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	2104      	movs	r1, #4
 8000aca:	481d      	ldr	r0, [pc, #116]	; (8000b40 <MX_GPIO_Init+0x128>)
 8000acc:	f001 fc2c 	bl	8002328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	2108      	movs	r1, #8
 8000ad4:	481b      	ldr	r0, [pc, #108]	; (8000b44 <MX_GPIO_Init+0x12c>)
 8000ad6:	f001 fc27 	bl	8002328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8000ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4619      	mov	r1, r3
 8000af2:	4812      	ldr	r0, [pc, #72]	; (8000b3c <MX_GPIO_Init+0x124>)
 8000af4:	f001 f984 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_RST_Pin */
  GPIO_InitStruct.Pin = W5500_RST_Pin;
 8000af8:	2304      	movs	r3, #4
 8000afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b04:	2302      	movs	r3, #2
 8000b06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(W5500_RST_GPIO_Port, &GPIO_InitStruct);
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	480c      	ldr	r0, [pc, #48]	; (8000b40 <MX_GPIO_Init+0x128>)
 8000b10:	f001 f976 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b14:	2308      	movs	r3, #8
 8000b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b20:	2302      	movs	r3, #2
 8000b22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4806      	ldr	r0, [pc, #24]	; (8000b44 <MX_GPIO_Init+0x12c>)
 8000b2c:	f001 f968 	bl	8001e00 <HAL_GPIO_Init>

}
 8000b30:	bf00      	nop
 8000b32:	3728      	adds	r7, #40	; 0x28
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020000 	.word	0x40020000
 8000b40:	40020c00 	.word	0x40020c00
 8000b44:	40020400 	.word	0x40020400

08000b48 <GPIO_Init>:

/* USER CODE BEGIN 4 */

static void GPIO_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	4b89      	ldr	r3, [pc, #548]	; (8000d78 <GPIO_Init+0x230>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a88      	ldr	r2, [pc, #544]	; (8000d78 <GPIO_Init+0x230>)
 8000b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b86      	ldr	r3, [pc, #536]	; (8000d78 <GPIO_Init+0x230>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	4b82      	ldr	r3, [pc, #520]	; (8000d78 <GPIO_Init+0x230>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a81      	ldr	r2, [pc, #516]	; (8000d78 <GPIO_Init+0x230>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b7f      	ldr	r3, [pc, #508]	; (8000d78 <GPIO_Init+0x230>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	4b7b      	ldr	r3, [pc, #492]	; (8000d78 <GPIO_Init+0x230>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a7a      	ldr	r2, [pc, #488]	; (8000d78 <GPIO_Init+0x230>)
 8000b90:	f043 0302 	orr.w	r3, r3, #2
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b78      	ldr	r3, [pc, #480]	; (8000d78 <GPIO_Init+0x230>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0302 	and.w	r3, r3, #2
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	4b74      	ldr	r3, [pc, #464]	; (8000d78 <GPIO_Init+0x230>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a73      	ldr	r2, [pc, #460]	; (8000d78 <GPIO_Init+0x230>)
 8000bac:	f043 0304 	orr.w	r3, r3, #4
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b71      	ldr	r3, [pc, #452]	; (8000d78 <GPIO_Init+0x230>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0304 	and.w	r3, r3, #4
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	4b6d      	ldr	r3, [pc, #436]	; (8000d78 <GPIO_Init+0x230>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a6c      	ldr	r2, [pc, #432]	; (8000d78 <GPIO_Init+0x230>)
 8000bc8:	f043 0308 	orr.w	r3, r3, #8
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b6a      	ldr	r3, [pc, #424]	; (8000d78 <GPIO_Init+0x230>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0308 	and.w	r3, r3, #8
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2006      	movs	r0, #6
 8000be0:	f001 f8d7 	bl	8001d92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000be4:	2006      	movs	r0, #6
 8000be6:	f001 f8f0 	bl	8001dca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	2007      	movs	r0, #7
 8000bf0:	f001 f8cf 	bl	8001d92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000bf4:	2007      	movs	r0, #7
 8000bf6:	f001 f8e8 	bl	8001dca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2008      	movs	r0, #8
 8000c00:	f001 f8c7 	bl	8001d92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000c04:	2008      	movs	r0, #8
 8000c06:	f001 f8e0 	bl	8001dca <HAL_NVIC_EnableIRQ>

   HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2009      	movs	r0, #9
 8000c10:	f001 f8bf 	bl	8001d92 <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000c14:	2009      	movs	r0, #9
 8000c16:	f001 f8d8 	bl	8001dca <HAL_NVIC_EnableIRQ>

   for( int8_t i = 0; i < MIXER_PIN_COUNT; i++)	 GPIO_PIN_INIT(Bus_Mixer + i);
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	75fb      	strb	r3, [r7, #23]
 8000c1e:	e033      	b.n	8000c88 <GPIO_Init+0x140>
 8000c20:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8000c24:	4613      	mov	r3, r2
 8000c26:	00db      	lsls	r3, r3, #3
 8000c28:	1a9b      	subs	r3, r3, r2
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4b53      	ldr	r3, [pc, #332]	; (8000d7c <GPIO_Init+0x234>)
 8000c30:	4413      	add	r3, r2
 8000c32:	6818      	ldr	r0, [r3, #0]
 8000c34:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	00db      	lsls	r3, r3, #3
 8000c3c:	1a9b      	subs	r3, r3, r2
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b4e      	ldr	r3, [pc, #312]	; (8000d7c <GPIO_Init+0x234>)
 8000c44:	4413      	add	r3, r2
 8000c46:	889b      	ldrh	r3, [r3, #4]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f001 fa73 	bl	8002134 <HAL_GPIO_DeInit>
 8000c4e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8000c52:	4613      	mov	r3, r2
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	1a9b      	subs	r3, r3, r2
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	4b47      	ldr	r3, [pc, #284]	; (8000d7c <GPIO_Init+0x234>)
 8000c5e:	4413      	add	r3, r2
 8000c60:	6818      	ldr	r0, [r3, #0]
 8000c62:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8000c66:	4613      	mov	r3, r2
 8000c68:	00db      	lsls	r3, r3, #3
 8000c6a:	1a9b      	subs	r3, r3, r2
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	461a      	mov	r2, r3
 8000c70:	4b42      	ldr	r3, [pc, #264]	; (8000d7c <GPIO_Init+0x234>)
 8000c72:	4413      	add	r3, r2
 8000c74:	3308      	adds	r3, #8
 8000c76:	4619      	mov	r1, r3
 8000c78:	f001 f8c2 	bl	8001e00 <HAL_GPIO_Init>
 8000c7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	3301      	adds	r3, #1
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	75fb      	strb	r3, [r7, #23]
 8000c88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c8c:	2b07      	cmp	r3, #7
 8000c8e:	ddc7      	ble.n	8000c20 <GPIO_Init+0xd8>
   for( int8_t i = 0; i < WIZNET_PIN_COUNT; i++) GPIO_PIN_INIT(Bus_WizNet_SPI + i);
 8000c90:	2300      	movs	r3, #0
 8000c92:	75bb      	strb	r3, [r7, #22]
 8000c94:	e033      	b.n	8000cfe <GPIO_Init+0x1b6>
 8000c96:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	1a9b      	subs	r3, r3, r2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	4b36      	ldr	r3, [pc, #216]	; (8000d80 <GPIO_Init+0x238>)
 8000ca6:	4413      	add	r3, r2
 8000ca8:	6818      	ldr	r0, [r3, #0]
 8000caa:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8000cae:	4613      	mov	r3, r2
 8000cb0:	00db      	lsls	r3, r3, #3
 8000cb2:	1a9b      	subs	r3, r3, r2
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	4b31      	ldr	r3, [pc, #196]	; (8000d80 <GPIO_Init+0x238>)
 8000cba:	4413      	add	r3, r2
 8000cbc:	889b      	ldrh	r3, [r3, #4]
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	f001 fa38 	bl	8002134 <HAL_GPIO_DeInit>
 8000cc4:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	1a9b      	subs	r3, r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <GPIO_Init+0x238>)
 8000cd4:	4413      	add	r3, r2
 8000cd6:	6818      	ldr	r0, [r3, #0]
 8000cd8:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	00db      	lsls	r3, r3, #3
 8000ce0:	1a9b      	subs	r3, r3, r2
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <GPIO_Init+0x238>)
 8000ce8:	4413      	add	r3, r2
 8000cea:	3308      	adds	r3, #8
 8000cec:	4619      	mov	r1, r3
 8000cee:	f001 f887 	bl	8001e00 <HAL_GPIO_Init>
 8000cf2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	75bb      	strb	r3, [r7, #22]
 8000cfe:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	ddc7      	ble.n	8000c96 <GPIO_Init+0x14e>
   GPIO_PIN_SET(Bus_Mixer + PRUPX);
 8000d06:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <GPIO_Init+0x234>)
 8000d08:	6818      	ldr	r0, [r3, #0]
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <GPIO_Init+0x234>)
 8000d0c:	8899      	ldrh	r1, [r3, #4]
 8000d0e:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <GPIO_Init+0x234>)
 8000d10:	799b      	ldrb	r3, [r3, #6]
 8000d12:	f083 0301 	eor.w	r3, r3, #1
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	461a      	mov	r2, r3
 8000d1a:	f001 fb05 	bl	8002328 <HAL_GPIO_WritePin>
   GPIO_PIN_SET(Bus_Mixer + PRUPY);
 8000d1e:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <GPIO_Init+0x234>)
 8000d20:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000d22:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <GPIO_Init+0x234>)
 8000d24:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <GPIO_Init+0x234>)
 8000d28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000d2c:	f083 0301 	eor.w	r3, r3, #1
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	461a      	mov	r2, r3
 8000d34:	f001 faf8 	bl	8002328 <HAL_GPIO_WritePin>
   GPIO_PIN_SET(Bus_Mixer + PRUPZ);
 8000d38:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <GPIO_Init+0x234>)
 8000d3a:	69d8      	ldr	r0, [r3, #28]
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <GPIO_Init+0x234>)
 8000d3e:	8c19      	ldrh	r1, [r3, #32]
 8000d40:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <GPIO_Init+0x234>)
 8000d42:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000d46:	f083 0301 	eor.w	r3, r3, #1
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	f001 faeb 	bl	8002328 <HAL_GPIO_WritePin>
   GPIO_PIN_SET(Bus_Mixer + PRUPA);
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <GPIO_Init+0x234>)
 8000d54:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <GPIO_Init+0x234>)
 8000d58:	f8b3 1058 	ldrh.w	r1, [r3, #88]	; 0x58
 8000d5c:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <GPIO_Init+0x234>)
 8000d5e:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8000d62:	f083 0301 	eor.w	r3, r3, #1
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	461a      	mov	r2, r3
 8000d6a:	f001 fadd 	bl	8002328 <HAL_GPIO_WritePin>
}
 8000d6e:	bf00      	nop
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	20000054 	.word	0x20000054
 8000d80:	20000000 	.word	0x20000000

08000d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
	...

08000d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <HAL_MspInit+0x4c>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	4a0f      	ldr	r2, [pc, #60]	; (8000de0 <HAL_MspInit+0x4c>)
 8000da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da8:	6453      	str	r3, [r2, #68]	; 0x44
 8000daa:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	603b      	str	r3, [r7, #0]
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	40023800 	.word	0x40023800

08000de4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	; 0x28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a19      	ldr	r2, [pc, #100]	; (8000e68 <HAL_SPI_MspInit+0x84>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d12c      	bne.n	8000e60 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <HAL_SPI_MspInit+0x88>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	4a17      	ldr	r2, [pc, #92]	; (8000e6c <HAL_SPI_MspInit+0x88>)
 8000e10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e14:	6413      	str	r3, [r2, #64]	; 0x40
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <HAL_SPI_MspInit+0x88>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <HAL_SPI_MspInit+0x88>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a10      	ldr	r2, [pc, #64]	; (8000e6c <HAL_SPI_MspInit+0x88>)
 8000e2c:	f043 0304 	orr.w	r3, r3, #4
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <HAL_SPI_MspInit+0x88>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0304 	and.w	r3, r3, #4
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000e3e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e50:	2306      	movs	r3, #6
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <HAL_SPI_MspInit+0x8c>)
 8000e5c:	f000 ffd0 	bl	8001e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e60:	bf00      	nop
 8000e62:	3728      	adds	r7, #40	; 0x28
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40003c00 	.word	0x40003c00
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020800 	.word	0x40020800

08000e74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e84:	d116      	bne.n	8000eb4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
 8000e8a:	4b44      	ldr	r3, [pc, #272]	; (8000f9c <HAL_TIM_Base_MspInit+0x128>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	4a43      	ldr	r2, [pc, #268]	; (8000f9c <HAL_TIM_Base_MspInit+0x128>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6413      	str	r3, [r2, #64]	; 0x40
 8000e96:	4b41      	ldr	r3, [pc, #260]	; (8000f9c <HAL_TIM_Base_MspInit+0x128>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	61fb      	str	r3, [r7, #28]
 8000ea0:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	201c      	movs	r0, #28
 8000ea8:	f000 ff73 	bl	8001d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000eac:	201c      	movs	r0, #28
 8000eae:	f000 ff8c 	bl	8001dca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8000eb2:	e06e      	b.n	8000f92 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM3)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a39      	ldr	r2, [pc, #228]	; (8000fa0 <HAL_TIM_Base_MspInit+0x12c>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d116      	bne.n	8000eec <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
 8000ec2:	4b36      	ldr	r3, [pc, #216]	; (8000f9c <HAL_TIM_Base_MspInit+0x128>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	4a35      	ldr	r2, [pc, #212]	; (8000f9c <HAL_TIM_Base_MspInit+0x128>)
 8000ec8:	f043 0302 	orr.w	r3, r3, #2
 8000ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ece:	4b33      	ldr	r3, [pc, #204]	; (8000f9c <HAL_TIM_Base_MspInit+0x128>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	61bb      	str	r3, [r7, #24]
 8000ed8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	201d      	movs	r0, #29
 8000ee0:	f000 ff57 	bl	8001d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ee4:	201d      	movs	r0, #29
 8000ee6:	f000 ff70 	bl	8001dca <HAL_NVIC_EnableIRQ>
}
 8000eea:	e052      	b.n	8000f92 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a2c      	ldr	r2, [pc, #176]	; (8000fa4 <HAL_TIM_Base_MspInit+0x130>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d116      	bne.n	8000f24 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
 8000efa:	4b28      	ldr	r3, [pc, #160]	; (8000f9c <HAL_TIM_Base_MspInit+0x128>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	4a27      	ldr	r2, [pc, #156]	; (8000f9c <HAL_TIM_Base_MspInit+0x128>)
 8000f00:	f043 0304 	orr.w	r3, r3, #4
 8000f04:	6413      	str	r3, [r2, #64]	; 0x40
 8000f06:	4b25      	ldr	r3, [pc, #148]	; (8000f9c <HAL_TIM_Base_MspInit+0x128>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	f003 0304 	and.w	r3, r3, #4
 8000f0e:	617b      	str	r3, [r7, #20]
 8000f10:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	201e      	movs	r0, #30
 8000f18:	f000 ff3b 	bl	8001d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f1c:	201e      	movs	r0, #30
 8000f1e:	f000 ff54 	bl	8001dca <HAL_NVIC_EnableIRQ>
}
 8000f22:	e036      	b.n	8000f92 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM9)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a1f      	ldr	r2, [pc, #124]	; (8000fa8 <HAL_TIM_Base_MspInit+0x134>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d116      	bne.n	8000f5c <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <HAL_TIM_Base_MspInit+0x128>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	4a19      	ldr	r2, [pc, #100]	; (8000f9c <HAL_TIM_Base_MspInit+0x128>)
 8000f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3e:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <HAL_TIM_Base_MspInit+0x128>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	2018      	movs	r0, #24
 8000f50:	f000 ff1f 	bl	8001d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000f54:	2018      	movs	r0, #24
 8000f56:	f000 ff38 	bl	8001dca <HAL_NVIC_EnableIRQ>
}
 8000f5a:	e01a      	b.n	8000f92 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM12)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a12      	ldr	r2, [pc, #72]	; (8000fac <HAL_TIM_Base_MspInit+0x138>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d115      	bne.n	8000f92 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <HAL_TIM_Base_MspInit+0x128>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	4a0b      	ldr	r2, [pc, #44]	; (8000f9c <HAL_TIM_Base_MspInit+0x128>)
 8000f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f74:	6413      	str	r3, [r2, #64]	; 0x40
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <HAL_TIM_Base_MspInit+0x128>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	202b      	movs	r0, #43	; 0x2b
 8000f88:	f000 ff03 	bl	8001d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8000f8c:	202b      	movs	r0, #43	; 0x2b
 8000f8e:	f000 ff1c 	bl	8001dca <HAL_NVIC_EnableIRQ>
}
 8000f92:	bf00      	nop
 8000f94:	3720      	adds	r7, #32
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40000400 	.word	0x40000400
 8000fa4:	40000800 	.word	0x40000800
 8000fa8:	40014000 	.word	0x40014000
 8000fac:	40001800 	.word	0x40001800

08000fb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a19      	ldr	r2, [pc, #100]	; (8001034 <HAL_UART_MspInit+0x84>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d12b      	bne.n	800102a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	4b18      	ldr	r3, [pc, #96]	; (8001038 <HAL_UART_MspInit+0x88>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	4a17      	ldr	r2, [pc, #92]	; (8001038 <HAL_UART_MspInit+0x88>)
 8000fdc:	f043 0310 	orr.w	r3, r3, #16
 8000fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <HAL_UART_MspInit+0x88>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	f003 0310 	and.w	r3, r3, #16
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <HAL_UART_MspInit+0x88>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a10      	ldr	r2, [pc, #64]	; (8001038 <HAL_UART_MspInit+0x88>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <HAL_UART_MspInit+0x88>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800100a:	23c0      	movs	r3, #192	; 0xc0
 800100c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001016:	2303      	movs	r3, #3
 8001018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800101a:	2307      	movs	r3, #7
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	4805      	ldr	r0, [pc, #20]	; (800103c <HAL_UART_MspInit+0x8c>)
 8001026:	f000 feeb 	bl	8001e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800102a:	bf00      	nop
 800102c:	3728      	adds	r7, #40	; 0x28
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40011000 	.word	0x40011000
 8001038:	40023800 	.word	0x40023800
 800103c:	40020400 	.word	0x40020400

08001040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001052:	e7fe      	b.n	8001052 <HardFault_Handler+0x4>

08001054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <MemManage_Handler+0x4>

0800105a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <BusFault_Handler+0x4>

08001060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <UsageFault_Handler+0x4>

08001066 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001094:	f000 fd82 	bl	8001b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}

0800109c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80010a0:	4806      	ldr	r0, [pc, #24]	; (80010bc <TIM1_BRK_TIM9_IRQHandler+0x20>)
 80010a2:	f002 fba3 	bl	80037ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */
  Error = 0x01; //разница фаз не найдена
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <TIM1_BRK_TIM9_IRQHandler+0x24>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	701a      	strb	r2, [r3, #0]
  RefreshTIM(&htim9);
 80010ac:	4803      	ldr	r0, [pc, #12]	; (80010bc <TIM1_BRK_TIM9_IRQHandler+0x20>)
 80010ae:	f000 fa25 	bl	80014fc <RefreshTIM>
  Count = 0;
 80010b2:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <TIM1_BRK_TIM9_IRQHandler+0x28>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]
  //RefreshTIM(&htim12);
  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000468 	.word	0x20000468
 80010c0:	20000208 	.word	0x20000208
 80010c4:	20000209 	.word	0x20000209

080010c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010cc:	4802      	ldr	r0, [pc, #8]	; (80010d8 <TIM2_IRQHandler+0x10>)
 80010ce:	f002 fb8d 	bl	80037ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	200004a8 	.word	0x200004a8

080010dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <TIM3_IRQHandler+0x10>)
 80010e2:	f002 fb83 	bl	80037ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	2000038c 	.word	0x2000038c

080010f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80010f4:	4802      	ldr	r0, [pc, #8]	; (8001100 <TIM4_IRQHandler+0x10>)
 80010f6:	f002 fb79 	bl	80037ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000344 	.word	0x20000344

08001104 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8001108:	4806      	ldr	r0, [pc, #24]	; (8001124 <TIM8_BRK_TIM12_IRQHandler+0x20>)
 800110a:	f002 fb6f 	bl	80037ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */
  Error = 0x02; //Период больше 1500мкс
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <TIM8_BRK_TIM12_IRQHandler+0x24>)
 8001110:	2202      	movs	r2, #2
 8001112:	701a      	strb	r2, [r3, #0]
  RefreshTIM(&htim12);
 8001114:	4803      	ldr	r0, [pc, #12]	; (8001124 <TIM8_BRK_TIM12_IRQHandler+0x20>)
 8001116:	f000 f9f1 	bl	80014fc <RefreshTIM>
  Count = 0;
 800111a:	4b04      	ldr	r3, [pc, #16]	; (800112c <TIM8_BRK_TIM12_IRQHandler+0x28>)
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	200004ec 	.word	0x200004ec
 8001128:	20000208 	.word	0x20000208
 800112c:	20000209 	.word	0x20000209

08001130 <EXTI0_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001134:	2001      	movs	r0, #1
 8001136:	f001 f911 	bl	800235c <HAL_GPIO_EXTI_IRQHandler>

}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}

0800113e <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001142:	2002      	movs	r0, #2
 8001144:	f001 f90a 	bl	800235c <HAL_GPIO_EXTI_IRQHandler>

}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}

0800114c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001150:	2004      	movs	r0, #4
 8001152:	f001 f903 	bl	800235c <HAL_GPIO_EXTI_IRQHandler>

}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}

0800115a <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800115e:	2008      	movs	r0, #8
 8001160:	f001 f8fc 	bl	800235c <HAL_GPIO_EXTI_IRQHandler>

}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}

08001168 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	80fb      	strh	r3, [r7, #6]
	}
	RefreshTIM(&htim12);
	HAL_TIM_Base_Start_IT(&htim12);
}*/

	dPhase = 0;
 8001172:	4b98      	ldr	r3, [pc, #608]	; (80013d4 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001174:	2200      	movs	r2, #0
 8001176:	801a      	strh	r2, [r3, #0]
	switch (Count)
 8001178:	4b97      	ldr	r3, [pc, #604]	; (80013d8 <HAL_GPIO_EXTI_Callback+0x270>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d002      	beq.n	8001186 <HAL_GPIO_EXTI_Callback+0x1e>
 8001180:	2b03      	cmp	r3, #3
 8001182:	d00d      	beq.n	80011a0 <HAL_GPIO_EXTI_Callback+0x38>
 8001184:	e01a      	b.n	80011bc <HAL_GPIO_EXTI_Callback+0x54>
	{
		case 0:
			RefreshTIM(&htim9);
 8001186:	4895      	ldr	r0, [pc, #596]	; (80013dc <HAL_GPIO_EXTI_Callback+0x274>)
 8001188:	f000 f9b8 	bl	80014fc <RefreshTIM>
			HAL_TIM_Base_Start_IT(&htim9);
 800118c:	4893      	ldr	r0, [pc, #588]	; (80013dc <HAL_GPIO_EXTI_Callback+0x274>)
 800118e:	f002 fade 	bl	800374e <HAL_TIM_Base_Start_IT>
			Count++;
 8001192:	4b91      	ldr	r3, [pc, #580]	; (80013d8 <HAL_GPIO_EXTI_Callback+0x270>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	3301      	adds	r3, #1
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4b8f      	ldr	r3, [pc, #572]	; (80013d8 <HAL_GPIO_EXTI_Callback+0x270>)
 800119c:	701a      	strb	r2, [r3, #0]
			break;
 800119e:	e019      	b.n	80011d4 <HAL_GPIO_EXTI_Callback+0x6c>

		case AXIS_COUNT-1:
			dPhase = TIM9 ->CNT;
 80011a0:	4b8f      	ldr	r3, [pc, #572]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x278>)
 80011a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	4b8b      	ldr	r3, [pc, #556]	; (80013d4 <HAL_GPIO_EXTI_Callback+0x26c>)
 80011a8:	801a      	strh	r2, [r3, #0]
			RefreshTIM(&htim9);
 80011aa:	488c      	ldr	r0, [pc, #560]	; (80013dc <HAL_GPIO_EXTI_Callback+0x274>)
 80011ac:	f000 f9a6 	bl	80014fc <RefreshTIM>
			Count = 0;
 80011b0:	4b89      	ldr	r3, [pc, #548]	; (80013d8 <HAL_GPIO_EXTI_Callback+0x270>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]
			PhaseRelativelyA();
 80011b6:	f000 f9b7 	bl	8001528 <PhaseRelativelyA>
			break;
 80011ba:	e00b      	b.n	80011d4 <HAL_GPIO_EXTI_Callback+0x6c>

		default:
			dPhase = TIM9 -> CNT;
 80011bc:	4b88      	ldr	r3, [pc, #544]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x278>)
 80011be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	4b84      	ldr	r3, [pc, #528]	; (80013d4 <HAL_GPIO_EXTI_Callback+0x26c>)
 80011c4:	801a      	strh	r2, [r3, #0]
			Count++;
 80011c6:	4b84      	ldr	r3, [pc, #528]	; (80013d8 <HAL_GPIO_EXTI_Callback+0x270>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	3301      	adds	r3, #1
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4b82      	ldr	r3, [pc, #520]	; (80013d8 <HAL_GPIO_EXTI_Callback+0x270>)
 80011d0:	701a      	strb	r2, [r3, #0]
			break;
 80011d2:	bf00      	nop
	}


	switch (GPIO_Pin)
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	2b07      	cmp	r3, #7
 80011da:	f200 8174 	bhi.w	80014c6 <HAL_GPIO_EXTI_Callback+0x35e>
 80011de:	a201      	add	r2, pc, #4	; (adr r2, 80011e4 <HAL_GPIO_EXTI_Callback+0x7c>)
 80011e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e4:	0800129f 	.word	0x0800129f
 80011e8:	08001205 	.word	0x08001205
 80011ec:	080014c7 	.word	0x080014c7
 80011f0:	0800133b 	.word	0x0800133b
 80011f4:	080014c7 	.word	0x080014c7
 80011f8:	080014c7 	.word	0x080014c7
 80011fc:	080014c7 	.word	0x080014c7
 8001200:	0800142d 	.word	0x0800142d
	{

		case GPIO_PIN_1:
			HAL_TIM_Base_Stop_IT(&htim12);
 8001204:	4877      	ldr	r0, [pc, #476]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001206:	f002 fac6 	bl	8003796 <HAL_TIM_Base_Stop_IT>
			Period = TIM12 ->CNT;
 800120a:	4b77      	ldr	r3, [pc, #476]	; (80013e8 <HAL_GPIO_EXTI_Callback+0x280>)
 800120c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120e:	b29a      	uxth	r2, r3
 8001210:	4b76      	ldr	r3, [pc, #472]	; (80013ec <HAL_GPIO_EXTI_Callback+0x284>)
 8001212:	801a      	strh	r2, [r3, #0]
			PeriodAVG[iZ] = Period;
 8001214:	4b76      	ldr	r3, [pc, #472]	; (80013f0 <HAL_GPIO_EXTI_Callback+0x288>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b74      	ldr	r3, [pc, #464]	; (80013ec <HAL_GPIO_EXTI_Callback+0x284>)
 800121c:	8819      	ldrh	r1, [r3, #0]
 800121e:	4b75      	ldr	r3, [pc, #468]	; (80013f4 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001220:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			iZ++;
 8001224:	4b72      	ldr	r3, [pc, #456]	; (80013f0 <HAL_GPIO_EXTI_Callback+0x288>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	3301      	adds	r3, #1
 800122a:	b2da      	uxtb	r2, r3
 800122c:	4b70      	ldr	r3, [pc, #448]	; (80013f0 <HAL_GPIO_EXTI_Callback+0x288>)
 800122e:	701a      	strb	r2, [r3, #0]
			sumZ += Period;
 8001230:	4b6e      	ldr	r3, [pc, #440]	; (80013ec <HAL_GPIO_EXTI_Callback+0x284>)
 8001232:	881b      	ldrh	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	4b70      	ldr	r3, [pc, #448]	; (80013f8 <HAL_GPIO_EXTI_Callback+0x290>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4413      	add	r3, r2
 800123c:	4a6e      	ldr	r2, [pc, #440]	; (80013f8 <HAL_GPIO_EXTI_Callback+0x290>)
 800123e:	6013      	str	r3, [r2, #0]
			if(iZ == AVG){
 8001240:	4b6b      	ldr	r3, [pc, #428]	; (80013f0 <HAL_GPIO_EXTI_Callback+0x288>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b64      	cmp	r3, #100	; 0x64
 8001246:	d10e      	bne.n	8001266 <HAL_GPIO_EXTI_Callback+0xfe>
				PeriodZ = sumZ/AVG;
 8001248:	4b6b      	ldr	r3, [pc, #428]	; (80013f8 <HAL_GPIO_EXTI_Callback+0x290>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a6b      	ldr	r2, [pc, #428]	; (80013fc <HAL_GPIO_EXTI_Callback+0x294>)
 800124e:	fba2 2303 	umull	r2, r3, r2, r3
 8001252:	095b      	lsrs	r3, r3, #5
 8001254:	b29a      	uxth	r2, r3
 8001256:	4b6a      	ldr	r3, [pc, #424]	; (8001400 <HAL_GPIO_EXTI_Callback+0x298>)
 8001258:	801a      	strh	r2, [r3, #0]
				iZ  = 0;
 800125a:	4b65      	ldr	r3, [pc, #404]	; (80013f0 <HAL_GPIO_EXTI_Callback+0x288>)
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]
				sumZ = 0;
 8001260:	4b65      	ldr	r3, [pc, #404]	; (80013f8 <HAL_GPIO_EXTI_Callback+0x290>)
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
			}
			RefreshTIM(&htim12);
 8001266:	485f      	ldr	r0, [pc, #380]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001268:	f000 f948 	bl	80014fc <RefreshTIM>
			HAL_TIM_Base_Start_IT(&htim12);
 800126c:	485d      	ldr	r0, [pc, #372]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x27c>)
 800126e:	f002 fa6e 	bl	800374e <HAL_TIM_Base_Start_IT>
			if (Count == 0)
 8001272:	4b59      	ldr	r3, [pc, #356]	; (80013d8 <HAL_GPIO_EXTI_Callback+0x270>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d107      	bne.n	800128a <HAL_GPIO_EXTI_Callback+0x122>
			{
				Phase[0][Axis_Z] = 4;
 800127a:	4b62      	ldr	r3, [pc, #392]	; (8001404 <HAL_GPIO_EXTI_Callback+0x29c>)
 800127c:	2204      	movs	r2, #4
 800127e:	809a      	strh	r2, [r3, #4]
				Phase[1][Axis_Z] = dPhase;
 8001280:	4b54      	ldr	r3, [pc, #336]	; (80013d4 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001282:	881a      	ldrh	r2, [r3, #0]
 8001284:	4b5f      	ldr	r3, [pc, #380]	; (8001404 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001286:	819a      	strh	r2, [r3, #12]
			else
			{
				Phase[0][Axis_Z] = Count;
				Phase[1][Axis_Z] = dPhase;
			}
			break;
 8001288:	e11e      	b.n	80014c8 <HAL_GPIO_EXTI_Callback+0x360>
				Phase[0][Axis_Z] = Count;
 800128a:	4b53      	ldr	r3, [pc, #332]	; (80013d8 <HAL_GPIO_EXTI_Callback+0x270>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	b29a      	uxth	r2, r3
 8001290:	4b5c      	ldr	r3, [pc, #368]	; (8001404 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001292:	809a      	strh	r2, [r3, #4]
				Phase[1][Axis_Z] = dPhase;
 8001294:	4b4f      	ldr	r3, [pc, #316]	; (80013d4 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001296:	881a      	ldrh	r2, [r3, #0]
 8001298:	4b5a      	ldr	r3, [pc, #360]	; (8001404 <HAL_GPIO_EXTI_Callback+0x29c>)
 800129a:	819a      	strh	r2, [r3, #12]
			break;
 800129c:	e114      	b.n	80014c8 <HAL_GPIO_EXTI_Callback+0x360>

		case GPIO_PIN_0:
			HAL_TIM_Base_Stop_IT(&htim2);
 800129e:	485a      	ldr	r0, [pc, #360]	; (8001408 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80012a0:	f002 fa79 	bl	8003796 <HAL_TIM_Base_Stop_IT>
			Period = TIM2 ->CNT;
 80012a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	4b4f      	ldr	r3, [pc, #316]	; (80013ec <HAL_GPIO_EXTI_Callback+0x284>)
 80012ae:	801a      	strh	r2, [r3, #0]
			PeriodAVG[iY] = Period;
 80012b0:	4b56      	ldr	r3, [pc, #344]	; (800140c <HAL_GPIO_EXTI_Callback+0x2a4>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b4d      	ldr	r3, [pc, #308]	; (80013ec <HAL_GPIO_EXTI_Callback+0x284>)
 80012b8:	8819      	ldrh	r1, [r3, #0]
 80012ba:	4b4e      	ldr	r3, [pc, #312]	; (80013f4 <HAL_GPIO_EXTI_Callback+0x28c>)
 80012bc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			iY++;
 80012c0:	4b52      	ldr	r3, [pc, #328]	; (800140c <HAL_GPIO_EXTI_Callback+0x2a4>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	4b50      	ldr	r3, [pc, #320]	; (800140c <HAL_GPIO_EXTI_Callback+0x2a4>)
 80012ca:	701a      	strb	r2, [r3, #0]
			sumY += Period;
 80012cc:	4b47      	ldr	r3, [pc, #284]	; (80013ec <HAL_GPIO_EXTI_Callback+0x284>)
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b4f      	ldr	r3, [pc, #316]	; (8001410 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	4a4d      	ldr	r2, [pc, #308]	; (8001410 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80012da:	6013      	str	r3, [r2, #0]
			if(iY == AVG){
 80012dc:	4b4b      	ldr	r3, [pc, #300]	; (800140c <HAL_GPIO_EXTI_Callback+0x2a4>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b64      	cmp	r3, #100	; 0x64
 80012e2:	d10e      	bne.n	8001302 <HAL_GPIO_EXTI_Callback+0x19a>
				PeriodY = sumY/AVG;
 80012e4:	4b4a      	ldr	r3, [pc, #296]	; (8001410 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a44      	ldr	r2, [pc, #272]	; (80013fc <HAL_GPIO_EXTI_Callback+0x294>)
 80012ea:	fba2 2303 	umull	r2, r3, r2, r3
 80012ee:	095b      	lsrs	r3, r3, #5
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	4b48      	ldr	r3, [pc, #288]	; (8001414 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80012f4:	801a      	strh	r2, [r3, #0]
				iY  = 0;
 80012f6:	4b45      	ldr	r3, [pc, #276]	; (800140c <HAL_GPIO_EXTI_Callback+0x2a4>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
				sumY = 0;
 80012fc:	4b44      	ldr	r3, [pc, #272]	; (8001410 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
			}
			RefreshTIM(&htim2);
 8001302:	4841      	ldr	r0, [pc, #260]	; (8001408 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001304:	f000 f8fa 	bl	80014fc <RefreshTIM>
			HAL_TIM_Base_Start_IT(&htim2);
 8001308:	483f      	ldr	r0, [pc, #252]	; (8001408 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800130a:	f002 fa20 	bl	800374e <HAL_TIM_Base_Start_IT>
			if (Count == 0)
 800130e:	4b32      	ldr	r3, [pc, #200]	; (80013d8 <HAL_GPIO_EXTI_Callback+0x270>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d107      	bne.n	8001326 <HAL_GPIO_EXTI_Callback+0x1be>
			{
				Phase[0][Axis_Y] = 4;
 8001316:	4b3b      	ldr	r3, [pc, #236]	; (8001404 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001318:	2204      	movs	r2, #4
 800131a:	805a      	strh	r2, [r3, #2]
				Phase[1][Axis_Y] = dPhase;
 800131c:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <HAL_GPIO_EXTI_Callback+0x26c>)
 800131e:	881a      	ldrh	r2, [r3, #0]
 8001320:	4b38      	ldr	r3, [pc, #224]	; (8001404 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001322:	815a      	strh	r2, [r3, #10]
			else
			{
				Phase[0][Axis_Y] = Count;
				Phase[1][Axis_Y] = dPhase;
			}
			break;
 8001324:	e0d0      	b.n	80014c8 <HAL_GPIO_EXTI_Callback+0x360>
				Phase[0][Axis_Y] = Count;
 8001326:	4b2c      	ldr	r3, [pc, #176]	; (80013d8 <HAL_GPIO_EXTI_Callback+0x270>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b29a      	uxth	r2, r3
 800132c:	4b35      	ldr	r3, [pc, #212]	; (8001404 <HAL_GPIO_EXTI_Callback+0x29c>)
 800132e:	805a      	strh	r2, [r3, #2]
				Phase[1][Axis_Y] = dPhase;
 8001330:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001332:	881a      	ldrh	r2, [r3, #0]
 8001334:	4b33      	ldr	r3, [pc, #204]	; (8001404 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001336:	815a      	strh	r2, [r3, #10]
			break;
 8001338:	e0c6      	b.n	80014c8 <HAL_GPIO_EXTI_Callback+0x360>

		case GPIO_PIN_2:
			HAL_TIM_Base_Stop_IT(&htim3);
 800133a:	4837      	ldr	r0, [pc, #220]	; (8001418 <HAL_GPIO_EXTI_Callback+0x2b0>)
 800133c:	f002 fa2b 	bl	8003796 <HAL_TIM_Base_Stop_IT>
			Period = TIM3 ->CNT;
 8001340:	4b36      	ldr	r3, [pc, #216]	; (800141c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8001342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001344:	b29a      	uxth	r2, r3
 8001346:	4b29      	ldr	r3, [pc, #164]	; (80013ec <HAL_GPIO_EXTI_Callback+0x284>)
 8001348:	801a      	strh	r2, [r3, #0]
			PeriodAVG[iX] = Period;
 800134a:	4b35      	ldr	r3, [pc, #212]	; (8001420 <HAL_GPIO_EXTI_Callback+0x2b8>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	4b26      	ldr	r3, [pc, #152]	; (80013ec <HAL_GPIO_EXTI_Callback+0x284>)
 8001352:	8819      	ldrh	r1, [r3, #0]
 8001354:	4b27      	ldr	r3, [pc, #156]	; (80013f4 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001356:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			iX++;
 800135a:	4b31      	ldr	r3, [pc, #196]	; (8001420 <HAL_GPIO_EXTI_Callback+0x2b8>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	3301      	adds	r3, #1
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4b2f      	ldr	r3, [pc, #188]	; (8001420 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001364:	701a      	strb	r2, [r3, #0]
			sumX += Period;
 8001366:	4b21      	ldr	r3, [pc, #132]	; (80013ec <HAL_GPIO_EXTI_Callback+0x284>)
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <HAL_GPIO_EXTI_Callback+0x2bc>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4413      	add	r3, r2
 8001372:	4a2c      	ldr	r2, [pc, #176]	; (8001424 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8001374:	6013      	str	r3, [r2, #0]
			if(iX == AVG){
 8001376:	4b2a      	ldr	r3, [pc, #168]	; (8001420 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b64      	cmp	r3, #100	; 0x64
 800137c:	d10e      	bne.n	800139c <HAL_GPIO_EXTI_Callback+0x234>
				PeriodX = sumX/AVG;
 800137e:	4b29      	ldr	r3, [pc, #164]	; (8001424 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a1e      	ldr	r2, [pc, #120]	; (80013fc <HAL_GPIO_EXTI_Callback+0x294>)
 8001384:	fba2 2303 	umull	r2, r3, r2, r3
 8001388:	095b      	lsrs	r3, r3, #5
 800138a:	b29a      	uxth	r2, r3
 800138c:	4b26      	ldr	r3, [pc, #152]	; (8001428 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800138e:	801a      	strh	r2, [r3, #0]
				iX  = 0;
 8001390:	4b23      	ldr	r3, [pc, #140]	; (8001420 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
				sumX = 0;
 8001396:	4b23      	ldr	r3, [pc, #140]	; (8001424 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
			}
			RefreshTIM(&htim3);
 800139c:	481e      	ldr	r0, [pc, #120]	; (8001418 <HAL_GPIO_EXTI_Callback+0x2b0>)
 800139e:	f000 f8ad 	bl	80014fc <RefreshTIM>
			HAL_TIM_Base_Start_IT(&htim3);
 80013a2:	481d      	ldr	r0, [pc, #116]	; (8001418 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80013a4:	f002 f9d3 	bl	800374e <HAL_TIM_Base_Start_IT>
			if (Count == 0)
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <HAL_GPIO_EXTI_Callback+0x270>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d107      	bne.n	80013c0 <HAL_GPIO_EXTI_Callback+0x258>
			{
				Phase[0][Axis_X] = 4;
 80013b0:	4b14      	ldr	r3, [pc, #80]	; (8001404 <HAL_GPIO_EXTI_Callback+0x29c>)
 80013b2:	2204      	movs	r2, #4
 80013b4:	801a      	strh	r2, [r3, #0]
				Phase[1][Axis_X] = dPhase;
 80013b6:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <HAL_GPIO_EXTI_Callback+0x26c>)
 80013b8:	881a      	ldrh	r2, [r3, #0]
 80013ba:	4b12      	ldr	r3, [pc, #72]	; (8001404 <HAL_GPIO_EXTI_Callback+0x29c>)
 80013bc:	811a      	strh	r2, [r3, #8]
			else
			{
				Phase[0][Axis_X] = Count;
				Phase[1][Axis_X] = dPhase;
			};
			break;
 80013be:	e083      	b.n	80014c8 <HAL_GPIO_EXTI_Callback+0x360>
				Phase[0][Axis_X] = Count;
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <HAL_GPIO_EXTI_Callback+0x270>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <HAL_GPIO_EXTI_Callback+0x29c>)
 80013c8:	801a      	strh	r2, [r3, #0]
				Phase[1][Axis_X] = dPhase;
 80013ca:	4b02      	ldr	r3, [pc, #8]	; (80013d4 <HAL_GPIO_EXTI_Callback+0x26c>)
 80013cc:	881a      	ldrh	r2, [r3, #0]
 80013ce:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <HAL_GPIO_EXTI_Callback+0x29c>)
 80013d0:	811a      	strh	r2, [r3, #8]
			break;
 80013d2:	e079      	b.n	80014c8 <HAL_GPIO_EXTI_Callback+0x360>
 80013d4:	2000020c 	.word	0x2000020c
 80013d8:	20000209 	.word	0x20000209
 80013dc:	20000468 	.word	0x20000468
 80013e0:	40014000 	.word	0x40014000
 80013e4:	200004ec 	.word	0x200004ec
 80013e8:	40001800 	.word	0x40001800
 80013ec:	2000020a 	.word	0x2000020a
 80013f0:	200002da 	.word	0x200002da
 80013f4:	20000210 	.word	0x20000210
 80013f8:	200002e4 	.word	0x200002e4
 80013fc:	51eb851f 	.word	0x51eb851f
 8001400:	200002f0 	.word	0x200002f0
 8001404:	200002f4 	.word	0x200002f4
 8001408:	200004a8 	.word	0x200004a8
 800140c:	200002d9 	.word	0x200002d9
 8001410:	200002e0 	.word	0x200002e0
 8001414:	200002ee 	.word	0x200002ee
 8001418:	2000038c 	.word	0x2000038c
 800141c:	40000400 	.word	0x40000400
 8001420:	200002d8 	.word	0x200002d8
 8001424:	200002dc 	.word	0x200002dc
 8001428:	200002ec 	.word	0x200002ec

		case GPIO_PIN_3:
			HAL_TIM_Base_Stop_IT(&htim4);
 800142c:	4828      	ldr	r0, [pc, #160]	; (80014d0 <HAL_GPIO_EXTI_Callback+0x368>)
 800142e:	f002 f9b2 	bl	8003796 <HAL_TIM_Base_Stop_IT>
			Period = TIM4 ->CNT;
 8001432:	4b28      	ldr	r3, [pc, #160]	; (80014d4 <HAL_GPIO_EXTI_Callback+0x36c>)
 8001434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001436:	b29a      	uxth	r2, r3
 8001438:	4b27      	ldr	r3, [pc, #156]	; (80014d8 <HAL_GPIO_EXTI_Callback+0x370>)
 800143a:	801a      	strh	r2, [r3, #0]
			PeriodAVG[iA] = Period;
 800143c:	4b27      	ldr	r3, [pc, #156]	; (80014dc <HAL_GPIO_EXTI_Callback+0x374>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	461a      	mov	r2, r3
 8001442:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <HAL_GPIO_EXTI_Callback+0x370>)
 8001444:	8819      	ldrh	r1, [r3, #0]
 8001446:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <HAL_GPIO_EXTI_Callback+0x378>)
 8001448:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			iA++;
 800144c:	4b23      	ldr	r3, [pc, #140]	; (80014dc <HAL_GPIO_EXTI_Callback+0x374>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	3301      	adds	r3, #1
 8001452:	b2da      	uxtb	r2, r3
 8001454:	4b21      	ldr	r3, [pc, #132]	; (80014dc <HAL_GPIO_EXTI_Callback+0x374>)
 8001456:	701a      	strb	r2, [r3, #0]
			sumA += Period;
 8001458:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <HAL_GPIO_EXTI_Callback+0x370>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <HAL_GPIO_EXTI_Callback+0x37c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4413      	add	r3, r2
 8001464:	4a1f      	ldr	r2, [pc, #124]	; (80014e4 <HAL_GPIO_EXTI_Callback+0x37c>)
 8001466:	6013      	str	r3, [r2, #0]
			if(iA == AVG){
 8001468:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <HAL_GPIO_EXTI_Callback+0x374>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b64      	cmp	r3, #100	; 0x64
 800146e:	d10e      	bne.n	800148e <HAL_GPIO_EXTI_Callback+0x326>
				PeriodA = sumA/AVG;
 8001470:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <HAL_GPIO_EXTI_Callback+0x37c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a1c      	ldr	r2, [pc, #112]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x380>)
 8001476:	fba2 2303 	umull	r2, r3, r2, r3
 800147a:	095b      	lsrs	r3, r3, #5
 800147c:	b29a      	uxth	r2, r3
 800147e:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <HAL_GPIO_EXTI_Callback+0x384>)
 8001480:	801a      	strh	r2, [r3, #0]
				iA  = 0;
 8001482:	4b16      	ldr	r3, [pc, #88]	; (80014dc <HAL_GPIO_EXTI_Callback+0x374>)
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]
				sumA = 0;
 8001488:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <HAL_GPIO_EXTI_Callback+0x37c>)
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
			}
			RefreshTIM(&htim4);
 800148e:	4810      	ldr	r0, [pc, #64]	; (80014d0 <HAL_GPIO_EXTI_Callback+0x368>)
 8001490:	f000 f834 	bl	80014fc <RefreshTIM>
			HAL_TIM_Base_Start_IT(&htim4);
 8001494:	480e      	ldr	r0, [pc, #56]	; (80014d0 <HAL_GPIO_EXTI_Callback+0x368>)
 8001496:	f002 f95a 	bl	800374e <HAL_TIM_Base_Start_IT>
			if (Count == 0)
 800149a:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x388>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d107      	bne.n	80014b2 <HAL_GPIO_EXTI_Callback+0x34a>
			{
				Phase[0][Axis_A] = 4;
 80014a2:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <HAL_GPIO_EXTI_Callback+0x38c>)
 80014a4:	2204      	movs	r2, #4
 80014a6:	80da      	strh	r2, [r3, #6]
				Phase[1][Axis_A] = dPhase;
 80014a8:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <HAL_GPIO_EXTI_Callback+0x390>)
 80014aa:	881a      	ldrh	r2, [r3, #0]
 80014ac:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <HAL_GPIO_EXTI_Callback+0x38c>)
 80014ae:	81da      	strh	r2, [r3, #14]
			else
			{
				Phase[0][Axis_A] = Count;
				Phase[1][Axis_A] = dPhase;
			};
			break;
 80014b0:	e00a      	b.n	80014c8 <HAL_GPIO_EXTI_Callback+0x360>
				Phase[0][Axis_A] = Count;
 80014b2:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x388>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <HAL_GPIO_EXTI_Callback+0x38c>)
 80014ba:	80da      	strh	r2, [r3, #6]
				Phase[1][Axis_A] = dPhase;
 80014bc:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <HAL_GPIO_EXTI_Callback+0x390>)
 80014be:	881a      	ldrh	r2, [r3, #0]
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <HAL_GPIO_EXTI_Callback+0x38c>)
 80014c2:	81da      	strh	r2, [r3, #14]
			break;
 80014c4:	e000      	b.n	80014c8 <HAL_GPIO_EXTI_Callback+0x360>

		default:
			break;
 80014c6:	bf00      	nop
	}
}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000344 	.word	0x20000344
 80014d4:	40000800 	.word	0x40000800
 80014d8:	2000020a 	.word	0x2000020a
 80014dc:	200002db 	.word	0x200002db
 80014e0:	20000210 	.word	0x20000210
 80014e4:	200002e8 	.word	0x200002e8
 80014e8:	51eb851f 	.word	0x51eb851f
 80014ec:	200002f2 	.word	0x200002f2
 80014f0:	20000209 	.word	0x20000209
 80014f4:	200002f4 	.word	0x200002f4
 80014f8:	2000020c 	.word	0x2000020c

080014fc <RefreshTIM>:

int RefreshTIM(TIM_HandleTypeDef *htim){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(htim);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f002 f946 	bl	8003796 <HAL_TIM_Base_Stop_IT>
	htim->Instance->CNT = 0;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2200      	movs	r2, #0
 8001510:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_CLEAR_FLAG(htim,TIM_FLAG_UPDATE);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f06f 0201 	mvn.w	r2, #1
 800151a:	611a      	str	r2, [r3, #16]
	return 0;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <PhaseRelativelyA>:

void PhaseRelativelyA(void){
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
	for(uint8_t j = 0; j < AXIS_COUNT - 1; j++){
 800152e:	2300      	movs	r3, #0
 8001530:	71fb      	strb	r3, [r7, #7]
 8001532:	e023      	b.n	800157c <PhaseRelativelyA+0x54>
		if(Phase[0][Axis_A]>Phase[0][j]){
 8001534:	4b16      	ldr	r3, [pc, #88]	; (8001590 <PhaseRelativelyA+0x68>)
 8001536:	88da      	ldrh	r2, [r3, #6]
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	4915      	ldr	r1, [pc, #84]	; (8001590 <PhaseRelativelyA+0x68>)
 800153c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001540:	429a      	cmp	r2, r3
 8001542:	d90e      	bls.n	8001562 <PhaseRelativelyA+0x3a>
			PhaseRelatA[j]=Phase[1][j]-Phase[1][Axis_A];
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	4a12      	ldr	r2, [pc, #72]	; (8001590 <PhaseRelativelyA+0x68>)
 8001548:	3304      	adds	r3, #4
 800154a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800154e:	4619      	mov	r1, r3
 8001550:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <PhaseRelativelyA+0x68>)
 8001552:	89db      	ldrh	r3, [r3, #14]
 8001554:	461a      	mov	r2, r3
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	1a8a      	subs	r2, r1, r2
 800155a:	490e      	ldr	r1, [pc, #56]	; (8001594 <PhaseRelativelyA+0x6c>)
 800155c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001560:	e009      	b.n	8001576 <PhaseRelativelyA+0x4e>
		}
		else
		{
			PhaseRelatA[j]=Phase[1][j];
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <PhaseRelativelyA+0x68>)
 8001566:	3304      	adds	r3, #4
 8001568:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	4611      	mov	r1, r2
 8001570:	4a08      	ldr	r2, [pc, #32]	; (8001594 <PhaseRelativelyA+0x6c>)
 8001572:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(uint8_t j = 0; j < AXIS_COUNT - 1; j++){
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	3301      	adds	r3, #1
 800157a:	71fb      	strb	r3, [r7, #7]
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	2b02      	cmp	r3, #2
 8001580:	d9d8      	bls.n	8001534 <PhaseRelativelyA+0xc>
		}
	}
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	200002f4 	.word	0x200002f4
 8001594:	20000304 	.word	0x20000304

08001598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a0:	4a14      	ldr	r2, [pc, #80]	; (80015f4 <_sbrk+0x5c>)
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <_sbrk+0x60>)
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015ac:	4b13      	ldr	r3, [pc, #76]	; (80015fc <_sbrk+0x64>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d102      	bne.n	80015ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <_sbrk+0x64>)
 80015b6:	4a12      	ldr	r2, [pc, #72]	; (8001600 <_sbrk+0x68>)
 80015b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <_sbrk+0x64>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d207      	bcs.n	80015d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015c8:	f004 fdb6 	bl	8006138 <__errno>
 80015cc:	4602      	mov	r2, r0
 80015ce:	230c      	movs	r3, #12
 80015d0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295
 80015d6:	e009      	b.n	80015ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015d8:	4b08      	ldr	r3, [pc, #32]	; (80015fc <_sbrk+0x64>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015de:	4b07      	ldr	r3, [pc, #28]	; (80015fc <_sbrk+0x64>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	4a05      	ldr	r2, [pc, #20]	; (80015fc <_sbrk+0x64>)
 80015e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ea:	68fb      	ldr	r3, [r7, #12]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20020000 	.word	0x20020000
 80015f8:	00000400 	.word	0x00000400
 80015fc:	20000314 	.word	0x20000314
 8001600:	20000538 	.word	0x20000538

08001604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <SystemInit+0x28>)
 800160a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800160e:	4a07      	ldr	r2, [pc, #28]	; (800162c <SystemInit+0x28>)
 8001610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001614:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001618:	4b04      	ldr	r3, [pc, #16]	; (800162c <SystemInit+0x28>)
 800161a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800161e:	609a      	str	r2, [r3, #8]
#endif
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <WizchIP_main>:
 *  uint16_t GPIO_PIN_CS - Pin CS
 *  UART_HandleTypeDef* uart - debug info in console (can be deleted)
 *  @retval None
 *  */
void WizchIP_main(SPI_HandleTypeDef* spi,GPIO_TypeDef *GPIO_CS, uint16_t GPIO_PIN_CS, UART_HandleTypeDef* uart)
{
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	f6ad 0d34 	subw	sp, sp, #2100	; 0x834
 8001636:	af00      	add	r7, sp, #0
 8001638:	f107 040c 	add.w	r4, r7, #12
 800163c:	6020      	str	r0, [r4, #0]
 800163e:	f107 0008 	add.w	r0, r7, #8
 8001642:	6001      	str	r1, [r0, #0]
 8001644:	4611      	mov	r1, r2
 8001646:	463a      	mov	r2, r7
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	1dbb      	adds	r3, r7, #6
 800164c:	460a      	mov	r2, r1
 800164e:	801a      	strh	r2, [r3, #0]
	SPI_WIZCHIP = spi;
 8001650:	4a37      	ldr	r2, [pc, #220]	; (8001730 <WizchIP_main+0x100>)
 8001652:	f107 030c 	add.w	r3, r7, #12
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6013      	str	r3, [r2, #0]
	GPIO_SPI_CS_WIZCHIP = GPIO_CS;
 800165a:	4a36      	ldr	r2, [pc, #216]	; (8001734 <WizchIP_main+0x104>)
 800165c:	f107 0308 	add.w	r3, r7, #8
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6013      	str	r3, [r2, #0]
	GPIO_Pin_SPI_CS_WIZCHIP = GPIO_PIN_CS;
 8001664:	4a34      	ldr	r2, [pc, #208]	; (8001738 <WizchIP_main+0x108>)
 8001666:	1dbb      	adds	r3, r7, #6
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	8013      	strh	r3, [r2, #0]

	UART_WIZCHIP = uart;
 800166c:	4a33      	ldr	r2, [pc, #204]	; (800173c <WizchIP_main+0x10c>)
 800166e:	463b      	mov	r3, r7
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6013      	str	r3, [r2, #0]

	uint8_t gDATABUF[DATA_BUF_SIZE];

	uint8_t tmp;
	int32_t ret = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
	uint8_t memsize[2][8] = {{16,0,0,0,0,0,0,0},{16,0,0,0,0,0,0,0}}; //
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	461a      	mov	r2, r3
 8001680:	2300      	movs	r3, #0
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	6053      	str	r3, [r2, #4]
 8001686:	6093      	str	r3, [r2, #8]
 8001688:	60d3      	str	r3, [r2, #12]
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	2210      	movs	r2, #16
 8001690:	701a      	strb	r2, [r3, #0]
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	2210      	movs	r2, #16
 8001698:	721a      	strb	r2, [r3, #8]

	 // First of all, Should register SPI callback functions implemented by user for accessing WIZCHIP //
	   ////////////////////////////////////////////////////////////////////////////////////////////////////
	   /* Critical section callback - No use in this example */
	   reg_wizchip_cris_cbfunc(0, 0);
 800169a:	2100      	movs	r1, #0
 800169c:	2000      	movs	r0, #0
 800169e:	f004 f81d 	bl	80056dc <reg_wizchip_cris_cbfunc>
	   /* Chip selection call back */
	#if   _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_
	    reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 80016a2:	4927      	ldr	r1, [pc, #156]	; (8001740 <WizchIP_main+0x110>)
 80016a4:	4827      	ldr	r0, [pc, #156]	; (8001744 <WizchIP_main+0x114>)
 80016a6:	f004 f83d 	bl	8005724 <reg_wizchip_cs_cbfunc>
	   #else
	      reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
	   #endif
	#endif
	    /* SPI Read & Write callback function */
	    reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 80016aa:	4927      	ldr	r1, [pc, #156]	; (8001748 <WizchIP_main+0x118>)
 80016ac:	4827      	ldr	r0, [pc, #156]	; (800174c <WizchIP_main+0x11c>)
 80016ae:	f004 f85d 	bl	800576c <reg_wizchip_spi_cbfunc>
	    reg_wizchip_spiburst_cbfunc(wizchip_read_burst, wizchip_write_burst);
 80016b2:	4927      	ldr	r1, [pc, #156]	; (8001750 <WizchIP_main+0x120>)
 80016b4:	4827      	ldr	r0, [pc, #156]	; (8001754 <WizchIP_main+0x124>)
 80016b6:	f004 f885 	bl	80057c4 <reg_wizchip_spiburst_cbfunc>

	    uint8_t ret_version = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f887 382b 	strb.w	r3, [r7, #2091]	; 0x82b
	    ret_version = getVERSIONR();
 80016c0:	f44f 5064 	mov.w	r0, #14592	; 0x3900
 80016c4:	f003 f8fa 	bl	80048bc <WIZCHIP_READ>
 80016c8:	4603      	mov	r3, r0
 80016ca:	f887 382b 	strb.w	r3, [r7, #2091]	; 0x82b
	    if(ret_version != 0x4)
 80016ce:	f897 382b 	ldrb.w	r3, [r7, #2091]	; 0x82b
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	d000      	beq.n	80016d8 <WizchIP_main+0xa8>
	    {
	    	//Error read SPI
	    	while(1);
 80016d6:	e7fe      	b.n	80016d6 <WizchIP_main+0xa6>
	    }

	    ////////////////////////////////////////////////////////////////////////
	    /* WIZCHIP SOCKET Buffer initialize */
	        if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1)
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4619      	mov	r1, r3
 80016de:	2001      	movs	r0, #1
 80016e0:	f004 f89c 	bl	800581c <ctlwizchip>
 80016e4:	4603      	mov	r3, r0
 80016e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ea:	d100      	bne.n	80016ee <WizchIP_main+0xbe>
	        {
	        	//UART_Printf("WIZCHIP Initialized fail.\r\n");

	           while(1);
 80016ec:	e7fe      	b.n	80016ec <WizchIP_main+0xbc>
	        }

	        /* PHY link status check */
	        do
	        {
	           if(ctlwizchip(CW_GET_PHYLINK, (void*)&tmp) == -1);
 80016ee:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80016f2:	4619      	mov	r1, r3
 80016f4:	200f      	movs	r0, #15
 80016f6:	f004 f891 	bl	800581c <ctlwizchip>

	        	   //UART_Printf("Unknown PHY Link stauts.\r\n");

	        }while(tmp == PHY_LINK_OFF);
 80016fa:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0f4      	beq.n	80016ee <WizchIP_main+0xbe>
	        /* Network initialization */

	        network_init();
 8001704:	f000 f89a 	bl	800183c <network_init>

	        /* Main loop */
	        while(1)
	        {
	        	if( (ret = loopback_tcps_server(0, gDATABUF, 5000)) < 0)
 8001708:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800170c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001710:	4619      	mov	r1, r3
 8001712:	2000      	movs	r0, #0
 8001714:	f000 f8b8 	bl	8001888 <loopback_tcps_server>
 8001718:	f8c7 082c 	str.w	r0, [r7, #2092]	; 0x82c
 800171c:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8001720:	2b00      	cmp	r3, #0
 8001722:	daf1      	bge.n	8001708 <WizchIP_main+0xd8>
	        	{
	        		UART_Printf("SOCKET ERROR : %ld\r\n", ret);
 8001724:	f8d7 182c 	ldr.w	r1, [r7, #2092]	; 0x82c
 8001728:	480b      	ldr	r0, [pc, #44]	; (8001758 <WizchIP_main+0x128>)
 800172a:	f000 f98f 	bl	8001a4c <UART_Printf>
	        	if( (ret = loopback_tcps_server(0, gDATABUF, 5000)) < 0)
 800172e:	e7eb      	b.n	8001708 <WizchIP_main+0xd8>
 8001730:	20000384 	.word	0x20000384
 8001734:	20000388 	.word	0x20000388
 8001738:	20000424 	.word	0x20000424
 800173c:	200004e8 	.word	0x200004e8
 8001740:	08001781 	.word	0x08001781
 8001744:	0800175d 	.word	0x0800175d
 8001748:	080017a1 	.word	0x080017a1
 800174c:	080017c9 	.word	0x080017c9
 8001750:	08001815 	.word	0x08001815
 8001754:	080017ed 	.word	0x080017ed
 8001758:	080069f4 	.word	0x080069f4

0800175c <wizchip_select>:
}


/* Set Low CS */
void  wizchip_select(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
   GPIO_SPI_CS_WIZCHIP->BSRR = GPIO_Pin_SPI_CS_WIZCHIP << 16U;
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <wizchip_select+0x1c>)
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	041a      	lsls	r2, r3, #16
 8001766:	4b05      	ldr	r3, [pc, #20]	; (800177c <wizchip_select+0x20>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	619a      	str	r2, [r3, #24]
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	20000424 	.word	0x20000424
 800177c:	20000388 	.word	0x20000388

08001780 <wizchip_deselect>:
/* Set High CS*/
void  wizchip_deselect(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
	GPIO_SPI_CS_WIZCHIP->BSRR = GPIO_Pin_SPI_CS_WIZCHIP;
 8001784:	4b04      	ldr	r3, [pc, #16]	; (8001798 <wizchip_deselect+0x18>)
 8001786:	881a      	ldrh	r2, [r3, #0]
 8001788:	4b04      	ldr	r3, [pc, #16]	; (800179c <wizchip_deselect+0x1c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	619a      	str	r2, [r3, #24]
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	20000424 	.word	0x20000424
 800179c:	20000388 	.word	0x20000388

080017a0 <wizchip_write>:

void  wizchip_write(uint8_t wb)    //Write SPI
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit( SPI_WIZCHIP, &wb, 	1 , HAL_MAX_DELAY);
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <wizchip_write+0x24>)
 80017ac:	6818      	ldr	r0, [r3, #0]
 80017ae:	1df9      	adds	r1, r7, #7
 80017b0:	f04f 33ff 	mov.w	r3, #4294967295
 80017b4:	2201      	movs	r2, #1
 80017b6:	f001 faaf 	bl	8002d18 <HAL_SPI_Transmit>
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000384 	.word	0x20000384

080017c8 <wizchip_read>:

uint8_t wizchip_read() //Read SPI
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
	uint8_t spi_read_buf;
    HAL_SPI_Receive (SPI_WIZCHIP, &spi_read_buf, 1, HAL_MAX_DELAY);
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <wizchip_read+0x20>)
 80017d0:	6818      	ldr	r0, [r3, #0]
 80017d2:	1df9      	adds	r1, r7, #7
 80017d4:	f04f 33ff 	mov.w	r3, #4294967295
 80017d8:	2201      	movs	r2, #1
 80017da:	f001 fbd1 	bl	8002f80 <HAL_SPI_Receive>
    return spi_read_buf;
 80017de:	79fb      	ldrb	r3, [r7, #7]

}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000384 	.word	0x20000384

080017ec <wizchip_read_burst>:

void wizchip_read_burst(uint8_t* pBuf, uint16_t len) //Read SPI
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive (SPI_WIZCHIP, pBuf, len, HAL_MAX_DELAY);
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <wizchip_read_burst+0x24>)
 80017fa:	6818      	ldr	r0, [r3, #0]
 80017fc:	887a      	ldrh	r2, [r7, #2]
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	f001 fbbc 	bl	8002f80 <HAL_SPI_Receive>
}
 8001808:	bf00      	nop
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000384 	.word	0x20000384

08001814 <wizchip_write_burst>:

void wizchip_write_burst(uint8_t* pBuf, uint16_t len) //Read SPI
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(SPI_WIZCHIP, pBuf, len, HAL_MAX_DELAY);
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <wizchip_write_burst+0x24>)
 8001822:	6818      	ldr	r0, [r3, #0]
 8001824:	887a      	ldrh	r2, [r7, #2]
 8001826:	f04f 33ff 	mov.w	r3, #4294967295
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	f001 fa74 	bl	8002d18 <HAL_SPI_Transmit>
}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000384 	.word	0x20000384

0800183c <network_init>:

/////////////////////////////////////////////////////////////
// Intialize the network information to be used in WIZCHIP //
/////////////////////////////////////////////////////////////
void network_init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
	uint8_t rx_tx_buff_sizes[] = {16, 0, 0, 0, 0, 0, 0, 0};
 8001842:	f107 0308 	add.w	r3, r7, #8
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	2310      	movs	r3, #16
 800184e:	723b      	strb	r3, [r7, #8]
    wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 8001850:	f107 0208 	add.w	r2, r7, #8
 8001854:	f107 0308 	add.w	r3, r7, #8
 8001858:	4611      	mov	r1, r2
 800185a:	4618      	mov	r0, r3
 800185c:	f004 f946 	bl	8005aec <wizchip_init>
    uint8_t tmpstr[6];
	ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO);
 8001860:	4908      	ldr	r1, [pc, #32]	; (8001884 <network_init+0x48>)
 8001862:	2000      	movs	r0, #0
 8001864:	f004 f8b8 	bl	80059d8 <ctlnetwork>
	ctlnetwork(CN_GET_NETINFO, (void*)&gWIZNETINFO);
 8001868:	4906      	ldr	r1, [pc, #24]	; (8001884 <network_init+0x48>)
 800186a:	2001      	movs	r0, #1
 800186c:	f004 f8b4 	bl	80059d8 <ctlnetwork>

	// Display Network Information
	ctlwizchip(CW_GET_ID,(void*)tmpstr);
 8001870:	463b      	mov	r3, r7
 8001872:	4619      	mov	r1, r3
 8001874:	2008      	movs	r0, #8
 8001876:	f003 ffd1 	bl	800581c <ctlwizchip>
//	UART_Printf("SUB: %d.%d.%d.%d\r\n", gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
//	HAL_Delay(10);
//	UART_Printf("DNS: %d.%d.%d.%d\r\n", gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
//	UART_Printf("======================\r\n");

}
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	2000013c 	.word	0x2000013c

08001888 <loopback_tcps_server>:
/////////////////////////////////////////////////////////////

int32_t loopback_tcps_server(uint8_t sn, uint8_t* buf, uint16_t port)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	6039      	str	r1, [r7, #0]
 8001892:	71fb      	strb	r3, [r7, #7]
 8001894:	4613      	mov	r3, r2
 8001896:	80bb      	strh	r3, [r7, #4]
   int32_t ret;
   uint16_t size = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	81fb      	strh	r3, [r7, #14]

   switch(getSn_SR(sn))   //Проверить состояние сокета sn
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	3301      	adds	r3, #1
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80018a8:	4618      	mov	r0, r3
 80018aa:	f003 f807 	bl	80048bc <WIZCHIP_READ>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b1c      	cmp	r3, #28
 80018b2:	f200 80bd 	bhi.w	8001a30 <loopback_tcps_server+0x1a8>
 80018b6:	a201      	add	r2, pc, #4	; (adr r2, 80018bc <loopback_tcps_server+0x34>)
 80018b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018bc:	080019ff 	.word	0x080019ff
 80018c0:	08001a31 	.word	0x08001a31
 80018c4:	08001a31 	.word	0x08001a31
 80018c8:	08001a31 	.word	0x08001a31
 80018cc:	08001a31 	.word	0x08001a31
 80018d0:	08001a31 	.word	0x08001a31
 80018d4:	08001a31 	.word	0x08001a31
 80018d8:	08001a31 	.word	0x08001a31
 80018dc:	08001a31 	.word	0x08001a31
 80018e0:	08001a31 	.word	0x08001a31
 80018e4:	08001a31 	.word	0x08001a31
 80018e8:	08001a31 	.word	0x08001a31
 80018ec:	08001a31 	.word	0x08001a31
 80018f0:	08001a31 	.word	0x08001a31
 80018f4:	08001a31 	.word	0x08001a31
 80018f8:	08001a31 	.word	0x08001a31
 80018fc:	08001a31 	.word	0x08001a31
 8001900:	08001a31 	.word	0x08001a31
 8001904:	08001a31 	.word	0x08001a31
 8001908:	080019e9 	.word	0x080019e9
 800190c:	08001a31 	.word	0x08001a31
 8001910:	08001a31 	.word	0x08001a31
 8001914:	08001a31 	.word	0x08001a31
 8001918:	08001931 	.word	0x08001931
 800191c:	08001a31 	.word	0x08001a31
 8001920:	08001a31 	.word	0x08001a31
 8001924:	08001a31 	.word	0x08001a31
 8001928:	08001a31 	.word	0x08001a31
 800192c:	080019d3 	.word	0x080019d3
   {

      case SOCK_ESTABLISHED :

    	 /* Check physical state cabel Ethernet */
    	 if((getPHYCFGR() & PHYCFGR_LNK_ON)== 0)
 8001930:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001934:	f002 ffc2 	bl	80048bc <WIZCHIP_READ>
 8001938:	4603      	mov	r3, r0
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d103      	bne.n	800194a <loopback_tcps_server+0xc2>
    	 {
    	     close(sn);
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	4618      	mov	r0, r3
 8001946:	f003 fb77 	bl	8005038 <close>
    	 }
		 /* Check If new client Connected */
         if(getSn_IR(sn) & Sn_IR_CON)
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	3301      	adds	r3, #1
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001956:	4618      	mov	r0, r3
 8001958:	f002 ffb0 	bl	80048bc <WIZCHIP_READ>
 800195c:	4603      	mov	r3, r0
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d009      	beq.n	800197a <loopback_tcps_server+0xf2>
         {
        	// UART_Printf("%d:Connected\r\n",sn);
            setSn_IR(sn,Sn_IR_CON);
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	3301      	adds	r3, #1
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001972:	2101      	movs	r1, #1
 8001974:	4618      	mov	r0, r3
 8001976:	f002 ffed 	bl	8004954 <WIZCHIP_WRITE>
         }
//------------------------------------------------------------//
//-------------- Example Mirror ------------------------------//
//------------------------------------------------------------//
         /* Receive data */
         if((size = getSn_RX_RSR(sn)) > 0)
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	4618      	mov	r0, r3
 800197e:	f003 f942 	bl	8004c06 <getSn_RX_RSR>
 8001982:	4603      	mov	r3, r0
 8001984:	81fb      	strh	r3, [r7, #14]
 8001986:	89fb      	ldrh	r3, [r7, #14]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d053      	beq.n	8001a34 <loopback_tcps_server+0x1ac>
         {
            if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 800198c:	89fb      	ldrh	r3, [r7, #14]
 800198e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001992:	d902      	bls.n	800199a <loopback_tcps_server+0x112>
 8001994:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001998:	81fb      	strh	r3, [r7, #14]
            ret = recv(sn,buf,size);	//function receive data
 800199a:	89fa      	ldrh	r2, [r7, #14]
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	6839      	ldr	r1, [r7, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f003 fd81 	bl	80054a8 <recv>
 80019a6:	60b8      	str	r0, [r7, #8]
            if(ret <= 0) return ret;
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	dc01      	bgt.n	80019b2 <loopback_tcps_server+0x12a>
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	e046      	b.n	8001a40 <loopback_tcps_server+0x1b8>
            buf[0] = var;
 80019b2:	4b25      	ldr	r3, [pc, #148]	; (8001a48 <loopback_tcps_server+0x1c0>)
 80019b4:	781a      	ldrb	r2, [r3, #0]
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	701a      	strb	r2, [r3, #0]
            ret = send(sn,buf,size);	//function transmit data
 80019ba:	89fa      	ldrh	r2, [r7, #14]
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	6839      	ldr	r1, [r7, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f003 fc77 	bl	80052b4 <send>
 80019c6:	60b8      	str	r0, [r7, #8]
            if(ret <= 0) return ret;
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	dc32      	bgt.n	8001a34 <loopback_tcps_server+0x1ac>
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	e036      	b.n	8001a40 <loopback_tcps_server+0x1b8>
//------------------------------------------------------------//
         break;

      case SOCK_CLOSE_WAIT :

         if((ret=disconnect(sn)) != SOCK_OK) return ret;
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f003 fbf7 	bl	80051c8 <disconnect>
 80019da:	4603      	mov	r3, r0
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d029      	beq.n	8001a38 <loopback_tcps_server+0x1b0>
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	e02b      	b.n	8001a40 <loopback_tcps_server+0x1b8>

         break;

      case SOCK_INIT :

         if( (ret = listen(sn)) != SOCK_OK) return ret;  //слушаем сокет
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f003 fb92 	bl	8005114 <listen>
 80019f0:	4603      	mov	r3, r0
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d020      	beq.n	8001a3c <loopback_tcps_server+0x1b4>
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	e020      	b.n	8001a40 <loopback_tcps_server+0x1b8>

         break;
      case SOCK_CLOSED:
    	  if((ret=socket(sn,Sn_MR_TCP,port,0x00)) != sn)  return ret;
 80019fe:	88ba      	ldrh	r2, [r7, #4]
 8001a00:	79f8      	ldrb	r0, [r7, #7]
 8001a02:	2300      	movs	r3, #0
 8001a04:	2101      	movs	r1, #1
 8001a06:	f003 fa01 	bl	8004e0c <socket>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d001      	beq.n	8001a1a <loopback_tcps_server+0x192>
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	e012      	b.n	8001a40 <loopback_tcps_server+0x1b8>
    	  // UART_Printf("%d:Opened\r\n",sn);
		  //UART_Printf("%d:LBTStart\r\n");

		  setSn_KPALVTR(sn, 10);
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	3301      	adds	r3, #1
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8001a26:	210a      	movs	r1, #10
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f002 ff93 	bl	8004954 <WIZCHIP_WRITE>

         break;
 8001a2e:	e006      	b.n	8001a3e <loopback_tcps_server+0x1b6>
      default:
         break;
 8001a30:	bf00      	nop
 8001a32:	e004      	b.n	8001a3e <loopback_tcps_server+0x1b6>
         break;
 8001a34:	bf00      	nop
 8001a36:	e002      	b.n	8001a3e <loopback_tcps_server+0x1b6>
         break;
 8001a38:	bf00      	nop
 8001a3a:	e000      	b.n	8001a3e <loopback_tcps_server+0x1b6>
         break;
 8001a3c:	bf00      	nop
   }
   return 1;
 8001a3e:	2301      	movs	r3, #1
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000134 	.word	0x20000134

08001a4c <UART_Printf>:

}


/* Аналог printf, только все выводится через UART*/
void UART_Printf(const char* fmt, ...) {
 8001a4c:	b40f      	push	{r0, r1, r2, r3}
 8001a4e:	b590      	push	{r4, r7, lr}
 8001a50:	b0c3      	sub	sp, #268	; 0x10c
 8001a52:	af00      	add	r7, sp, #0
    char buff[256]; //сюда пишем рез-т
    va_list args;  //переменные параметры
    va_start(args, fmt); //макрос, который считает, что все параметры
 8001a54:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	601a      	str	r2, [r3, #0]
    //после fmt - переменные параметры
    vsnprintf(buff, sizeof(buff), fmt, args);
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	f107 0008 	add.w	r0, r7, #8
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001a68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a6c:	f004 fbc2 	bl	80061f4 <vsniprintf>
    HAL_UART_Transmit(UART_WIZCHIP, (uint8_t*)buff, strlen(buff),
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <UART_Printf+0x54>)
 8001a72:	681c      	ldr	r4, [r3, #0]
 8001a74:	f107 0308 	add.w	r3, r7, #8
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe fba9 	bl	80001d0 <strlen>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	f107 0108 	add.w	r1, r7, #8
 8001a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	f002 fab7 	bl	8003ffe <HAL_UART_Transmit>
                      1000);
    va_end(args);
}
 8001a90:	bf00      	nop
 8001a92:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8001a96:	46bd      	mov	sp, r7
 8001a98:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001a9c:	b004      	add	sp, #16
 8001a9e:	4770      	bx	lr
 8001aa0:	200004e8 	.word	0x200004e8

08001aa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001aa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001adc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001aa8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001aaa:	e003      	b.n	8001ab4 <LoopCopyDataInit>

08001aac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001aae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ab0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ab2:	3104      	adds	r1, #4

08001ab4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ab4:	480b      	ldr	r0, [pc, #44]	; (8001ae4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ab6:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ab8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001aba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001abc:	d3f6      	bcc.n	8001aac <CopyDataInit>
  ldr  r2, =_sbss
 8001abe:	4a0b      	ldr	r2, [pc, #44]	; (8001aec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ac0:	e002      	b.n	8001ac8 <LoopFillZerobss>

08001ac2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ac2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ac4:	f842 3b04 	str.w	r3, [r2], #4

08001ac8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ac8:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001aca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001acc:	d3f9      	bcc.n	8001ac2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ace:	f7ff fd99 	bl	8001604 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ad2:	f004 fb37 	bl	8006144 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ad6:	f7fe fd53 	bl	8000580 <main>
  bx  lr    
 8001ada:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001adc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001ae0:	08006a6c 	.word	0x08006a6c
  ldr  r0, =_sdata
 8001ae4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ae8:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 8001aec:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 8001af0:	20000534 	.word	0x20000534

08001af4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001af4:	e7fe      	b.n	8001af4 <ADC_IRQHandler>
	...

08001af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001afc:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <HAL_Init+0x40>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a0d      	ldr	r2, [pc, #52]	; (8001b38 <HAL_Init+0x40>)
 8001b02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_Init+0x40>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a0a      	ldr	r2, [pc, #40]	; (8001b38 <HAL_Init+0x40>)
 8001b0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <HAL_Init+0x40>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <HAL_Init+0x40>)
 8001b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b20:	2003      	movs	r0, #3
 8001b22:	f000 f92b 	bl	8001d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b26:	2000      	movs	r0, #0
 8001b28:	f000 f808 	bl	8001b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b2c:	f7ff f932 	bl	8000d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40023c00 	.word	0x40023c00

08001b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_InitTick+0x54>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_InitTick+0x58>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f000 f943 	bl	8001de6 <HAL_SYSTICK_Config>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e00e      	b.n	8001b88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b0f      	cmp	r3, #15
 8001b6e:	d80a      	bhi.n	8001b86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b70:	2200      	movs	r2, #0
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295
 8001b78:	f000 f90b 	bl	8001d92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b7c:	4a06      	ldr	r2, [pc, #24]	; (8001b98 <HAL_InitTick+0x5c>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	e000      	b.n	8001b88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000138 	.word	0x20000138
 8001b94:	20000158 	.word	0x20000158
 8001b98:	20000154 	.word	0x20000154

08001b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_IncTick+0x20>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_IncTick+0x24>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <HAL_IncTick+0x24>)
 8001bae:	6013      	str	r3, [r2, #0]
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000158 	.word	0x20000158
 8001bc0:	2000052c 	.word	0x2000052c

08001bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <HAL_GetTick+0x14>)
 8001bca:	681b      	ldr	r3, [r3, #0]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	2000052c 	.word	0x2000052c

08001bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <__NVIC_SetPriorityGrouping+0x44>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c0e:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <__NVIC_SetPriorityGrouping+0x44>)
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	60d3      	str	r3, [r2, #12]
}
 8001c14:	bf00      	nop
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c28:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <__NVIC_GetPriorityGrouping+0x18>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	0a1b      	lsrs	r3, r3, #8
 8001c2e:	f003 0307 	and.w	r3, r3, #7
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	db0b      	blt.n	8001c6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	f003 021f 	and.w	r2, r3, #31
 8001c58:	4907      	ldr	r1, [pc, #28]	; (8001c78 <__NVIC_EnableIRQ+0x38>)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	095b      	lsrs	r3, r3, #5
 8001c60:	2001      	movs	r0, #1
 8001c62:	fa00 f202 	lsl.w	r2, r0, r2
 8001c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	e000e100 	.word	0xe000e100

08001c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	6039      	str	r1, [r7, #0]
 8001c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	db0a      	blt.n	8001ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	490c      	ldr	r1, [pc, #48]	; (8001cc8 <__NVIC_SetPriority+0x4c>)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	0112      	lsls	r2, r2, #4
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	440b      	add	r3, r1
 8001ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ca4:	e00a      	b.n	8001cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	4908      	ldr	r1, [pc, #32]	; (8001ccc <__NVIC_SetPriority+0x50>)
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	3b04      	subs	r3, #4
 8001cb4:	0112      	lsls	r2, r2, #4
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	440b      	add	r3, r1
 8001cba:	761a      	strb	r2, [r3, #24]
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000e100 	.word	0xe000e100
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b089      	sub	sp, #36	; 0x24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f1c3 0307 	rsb	r3, r3, #7
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	bf28      	it	cs
 8001cee:	2304      	movcs	r3, #4
 8001cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	2b06      	cmp	r3, #6
 8001cf8:	d902      	bls.n	8001d00 <NVIC_EncodePriority+0x30>
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3b03      	subs	r3, #3
 8001cfe:	e000      	b.n	8001d02 <NVIC_EncodePriority+0x32>
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d04:	f04f 32ff 	mov.w	r2, #4294967295
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43da      	mvns	r2, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	401a      	ands	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d18:	f04f 31ff 	mov.w	r1, #4294967295
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d22:	43d9      	mvns	r1, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d28:	4313      	orrs	r3, r2
         );
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3724      	adds	r7, #36	; 0x24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d48:	d301      	bcc.n	8001d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e00f      	b.n	8001d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d4e:	4a0a      	ldr	r2, [pc, #40]	; (8001d78 <SysTick_Config+0x40>)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d56:	210f      	movs	r1, #15
 8001d58:	f04f 30ff 	mov.w	r0, #4294967295
 8001d5c:	f7ff ff8e 	bl	8001c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <SysTick_Config+0x40>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d66:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <SysTick_Config+0x40>)
 8001d68:	2207      	movs	r2, #7
 8001d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	e000e010 	.word	0xe000e010

08001d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff ff29 	bl	8001bdc <__NVIC_SetPriorityGrouping>
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b086      	sub	sp, #24
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	4603      	mov	r3, r0
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	607a      	str	r2, [r7, #4]
 8001d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001da4:	f7ff ff3e 	bl	8001c24 <__NVIC_GetPriorityGrouping>
 8001da8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	68b9      	ldr	r1, [r7, #8]
 8001dae:	6978      	ldr	r0, [r7, #20]
 8001db0:	f7ff ff8e 	bl	8001cd0 <NVIC_EncodePriority>
 8001db4:	4602      	mov	r2, r0
 8001db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dba:	4611      	mov	r1, r2
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff5d 	bl	8001c7c <__NVIC_SetPriority>
}
 8001dc2:	bf00      	nop
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff31 	bl	8001c40 <__NVIC_EnableIRQ>
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff ffa2 	bl	8001d38 <SysTick_Config>
 8001df4:	4603      	mov	r3, r0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b089      	sub	sp, #36	; 0x24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
 8001e1a:	e16b      	b.n	80020f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	f040 815a 	bne.w	80020ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d00b      	beq.n	8001e5a <HAL_GPIO_Init+0x5a>
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d007      	beq.n	8001e5a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e4e:	2b11      	cmp	r3, #17
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b12      	cmp	r3, #18
 8001e58:	d130      	bne.n	8001ebc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	2203      	movs	r2, #3
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	68da      	ldr	r2, [r3, #12]
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e90:	2201      	movs	r2, #1
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	091b      	lsrs	r3, r3, #4
 8001ea6:	f003 0201 	and.w	r2, r3, #1
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_Init+0xfc>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b12      	cmp	r3, #18
 8001efa:	d123      	bne.n	8001f44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	08da      	lsrs	r2, r3, #3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3208      	adds	r2, #8
 8001f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	220f      	movs	r2, #15
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	691a      	ldr	r2, [r3, #16]
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	08da      	lsrs	r2, r3, #3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3208      	adds	r2, #8
 8001f3e:	69b9      	ldr	r1, [r7, #24]
 8001f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	2203      	movs	r2, #3
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0203 	and.w	r2, r3, #3
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 80b4 	beq.w	80020ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	4b5f      	ldr	r3, [pc, #380]	; (8002108 <HAL_GPIO_Init+0x308>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	4a5e      	ldr	r2, [pc, #376]	; (8002108 <HAL_GPIO_Init+0x308>)
 8001f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f94:	6453      	str	r3, [r2, #68]	; 0x44
 8001f96:	4b5c      	ldr	r3, [pc, #368]	; (8002108 <HAL_GPIO_Init+0x308>)
 8001f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fa2:	4a5a      	ldr	r2, [pc, #360]	; (800210c <HAL_GPIO_Init+0x30c>)
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	089b      	lsrs	r3, r3, #2
 8001fa8:	3302      	adds	r3, #2
 8001faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	220f      	movs	r2, #15
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a51      	ldr	r2, [pc, #324]	; (8002110 <HAL_GPIO_Init+0x310>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d02b      	beq.n	8002026 <HAL_GPIO_Init+0x226>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a50      	ldr	r2, [pc, #320]	; (8002114 <HAL_GPIO_Init+0x314>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d025      	beq.n	8002022 <HAL_GPIO_Init+0x222>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a4f      	ldr	r2, [pc, #316]	; (8002118 <HAL_GPIO_Init+0x318>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d01f      	beq.n	800201e <HAL_GPIO_Init+0x21e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a4e      	ldr	r2, [pc, #312]	; (800211c <HAL_GPIO_Init+0x31c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d019      	beq.n	800201a <HAL_GPIO_Init+0x21a>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a4d      	ldr	r2, [pc, #308]	; (8002120 <HAL_GPIO_Init+0x320>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d013      	beq.n	8002016 <HAL_GPIO_Init+0x216>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a4c      	ldr	r2, [pc, #304]	; (8002124 <HAL_GPIO_Init+0x324>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d00d      	beq.n	8002012 <HAL_GPIO_Init+0x212>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a4b      	ldr	r2, [pc, #300]	; (8002128 <HAL_GPIO_Init+0x328>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d007      	beq.n	800200e <HAL_GPIO_Init+0x20e>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a4a      	ldr	r2, [pc, #296]	; (800212c <HAL_GPIO_Init+0x32c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d101      	bne.n	800200a <HAL_GPIO_Init+0x20a>
 8002006:	2307      	movs	r3, #7
 8002008:	e00e      	b.n	8002028 <HAL_GPIO_Init+0x228>
 800200a:	2308      	movs	r3, #8
 800200c:	e00c      	b.n	8002028 <HAL_GPIO_Init+0x228>
 800200e:	2306      	movs	r3, #6
 8002010:	e00a      	b.n	8002028 <HAL_GPIO_Init+0x228>
 8002012:	2305      	movs	r3, #5
 8002014:	e008      	b.n	8002028 <HAL_GPIO_Init+0x228>
 8002016:	2304      	movs	r3, #4
 8002018:	e006      	b.n	8002028 <HAL_GPIO_Init+0x228>
 800201a:	2303      	movs	r3, #3
 800201c:	e004      	b.n	8002028 <HAL_GPIO_Init+0x228>
 800201e:	2302      	movs	r3, #2
 8002020:	e002      	b.n	8002028 <HAL_GPIO_Init+0x228>
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <HAL_GPIO_Init+0x228>
 8002026:	2300      	movs	r3, #0
 8002028:	69fa      	ldr	r2, [r7, #28]
 800202a:	f002 0203 	and.w	r2, r2, #3
 800202e:	0092      	lsls	r2, r2, #2
 8002030:	4093      	lsls	r3, r2
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002038:	4934      	ldr	r1, [pc, #208]	; (800210c <HAL_GPIO_Init+0x30c>)
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	089b      	lsrs	r3, r3, #2
 800203e:	3302      	adds	r3, #2
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002046:	4b3a      	ldr	r3, [pc, #232]	; (8002130 <HAL_GPIO_Init+0x330>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800206a:	4a31      	ldr	r2, [pc, #196]	; (8002130 <HAL_GPIO_Init+0x330>)
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002070:	4b2f      	ldr	r3, [pc, #188]	; (8002130 <HAL_GPIO_Init+0x330>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	43db      	mvns	r3, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002094:	4a26      	ldr	r2, [pc, #152]	; (8002130 <HAL_GPIO_Init+0x330>)
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800209a:	4b25      	ldr	r3, [pc, #148]	; (8002130 <HAL_GPIO_Init+0x330>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020be:	4a1c      	ldr	r2, [pc, #112]	; (8002130 <HAL_GPIO_Init+0x330>)
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020c4:	4b1a      	ldr	r3, [pc, #104]	; (8002130 <HAL_GPIO_Init+0x330>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020e8:	4a11      	ldr	r2, [pc, #68]	; (8002130 <HAL_GPIO_Init+0x330>)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3301      	adds	r3, #1
 80020f2:	61fb      	str	r3, [r7, #28]
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	2b0f      	cmp	r3, #15
 80020f8:	f67f ae90 	bls.w	8001e1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020fc:	bf00      	nop
 80020fe:	3724      	adds	r7, #36	; 0x24
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	40023800 	.word	0x40023800
 800210c:	40013800 	.word	0x40013800
 8002110:	40020000 	.word	0x40020000
 8002114:	40020400 	.word	0x40020400
 8002118:	40020800 	.word	0x40020800
 800211c:	40020c00 	.word	0x40020c00
 8002120:	40021000 	.word	0x40021000
 8002124:	40021400 	.word	0x40021400
 8002128:	40021800 	.word	0x40021800
 800212c:	40021c00 	.word	0x40021c00
 8002130:	40013c00 	.word	0x40013c00

08002134 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002134:	b480      	push	{r7}
 8002136:	b087      	sub	sp, #28
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800213e:	2300      	movs	r3, #0
 8002140:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	e0cd      	b.n	80022ec <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002150:	2201      	movs	r2, #1
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4013      	ands	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	429a      	cmp	r2, r3
 8002168:	f040 80bd 	bne.w	80022e6 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800216c:	4a64      	ldr	r2, [pc, #400]	; (8002300 <HAL_GPIO_DeInit+0x1cc>)
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	089b      	lsrs	r3, r3, #2
 8002172:	3302      	adds	r3, #2
 8002174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002178:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	220f      	movs	r2, #15
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	4013      	ands	r3, r2
 800218c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a5c      	ldr	r2, [pc, #368]	; (8002304 <HAL_GPIO_DeInit+0x1d0>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d02b      	beq.n	80021ee <HAL_GPIO_DeInit+0xba>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a5b      	ldr	r2, [pc, #364]	; (8002308 <HAL_GPIO_DeInit+0x1d4>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d025      	beq.n	80021ea <HAL_GPIO_DeInit+0xb6>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a5a      	ldr	r2, [pc, #360]	; (800230c <HAL_GPIO_DeInit+0x1d8>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d01f      	beq.n	80021e6 <HAL_GPIO_DeInit+0xb2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a59      	ldr	r2, [pc, #356]	; (8002310 <HAL_GPIO_DeInit+0x1dc>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d019      	beq.n	80021e2 <HAL_GPIO_DeInit+0xae>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a58      	ldr	r2, [pc, #352]	; (8002314 <HAL_GPIO_DeInit+0x1e0>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d013      	beq.n	80021de <HAL_GPIO_DeInit+0xaa>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a57      	ldr	r2, [pc, #348]	; (8002318 <HAL_GPIO_DeInit+0x1e4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d00d      	beq.n	80021da <HAL_GPIO_DeInit+0xa6>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a56      	ldr	r2, [pc, #344]	; (800231c <HAL_GPIO_DeInit+0x1e8>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d007      	beq.n	80021d6 <HAL_GPIO_DeInit+0xa2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a55      	ldr	r2, [pc, #340]	; (8002320 <HAL_GPIO_DeInit+0x1ec>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d101      	bne.n	80021d2 <HAL_GPIO_DeInit+0x9e>
 80021ce:	2307      	movs	r3, #7
 80021d0:	e00e      	b.n	80021f0 <HAL_GPIO_DeInit+0xbc>
 80021d2:	2308      	movs	r3, #8
 80021d4:	e00c      	b.n	80021f0 <HAL_GPIO_DeInit+0xbc>
 80021d6:	2306      	movs	r3, #6
 80021d8:	e00a      	b.n	80021f0 <HAL_GPIO_DeInit+0xbc>
 80021da:	2305      	movs	r3, #5
 80021dc:	e008      	b.n	80021f0 <HAL_GPIO_DeInit+0xbc>
 80021de:	2304      	movs	r3, #4
 80021e0:	e006      	b.n	80021f0 <HAL_GPIO_DeInit+0xbc>
 80021e2:	2303      	movs	r3, #3
 80021e4:	e004      	b.n	80021f0 <HAL_GPIO_DeInit+0xbc>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e002      	b.n	80021f0 <HAL_GPIO_DeInit+0xbc>
 80021ea:	2301      	movs	r3, #1
 80021ec:	e000      	b.n	80021f0 <HAL_GPIO_DeInit+0xbc>
 80021ee:	2300      	movs	r3, #0
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	f002 0203 	and.w	r2, r2, #3
 80021f6:	0092      	lsls	r2, r2, #2
 80021f8:	4093      	lsls	r3, r2
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d132      	bne.n	8002266 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002200:	4b48      	ldr	r3, [pc, #288]	; (8002324 <HAL_GPIO_DeInit+0x1f0>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	43db      	mvns	r3, r3
 8002208:	4946      	ldr	r1, [pc, #280]	; (8002324 <HAL_GPIO_DeInit+0x1f0>)
 800220a:	4013      	ands	r3, r2
 800220c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800220e:	4b45      	ldr	r3, [pc, #276]	; (8002324 <HAL_GPIO_DeInit+0x1f0>)
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	43db      	mvns	r3, r3
 8002216:	4943      	ldr	r1, [pc, #268]	; (8002324 <HAL_GPIO_DeInit+0x1f0>)
 8002218:	4013      	ands	r3, r2
 800221a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800221c:	4b41      	ldr	r3, [pc, #260]	; (8002324 <HAL_GPIO_DeInit+0x1f0>)
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	43db      	mvns	r3, r3
 8002224:	493f      	ldr	r1, [pc, #252]	; (8002324 <HAL_GPIO_DeInit+0x1f0>)
 8002226:	4013      	ands	r3, r2
 8002228:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800222a:	4b3e      	ldr	r3, [pc, #248]	; (8002324 <HAL_GPIO_DeInit+0x1f0>)
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	43db      	mvns	r3, r3
 8002232:	493c      	ldr	r1, [pc, #240]	; (8002324 <HAL_GPIO_DeInit+0x1f0>)
 8002234:	4013      	ands	r3, r2
 8002236:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	220f      	movs	r2, #15
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002248:	4a2d      	ldr	r2, [pc, #180]	; (8002300 <HAL_GPIO_DeInit+0x1cc>)
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	089b      	lsrs	r3, r3, #2
 800224e:	3302      	adds	r3, #2
 8002250:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	43da      	mvns	r2, r3
 8002258:	4829      	ldr	r0, [pc, #164]	; (8002300 <HAL_GPIO_DeInit+0x1cc>)
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	089b      	lsrs	r3, r3, #2
 800225e:	400a      	ands	r2, r1
 8002260:	3302      	adds	r3, #2
 8002262:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	2103      	movs	r1, #3
 8002270:	fa01 f303 	lsl.w	r3, r1, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	401a      	ands	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	08da      	lsrs	r2, r3, #3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3208      	adds	r2, #8
 8002284:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	220f      	movs	r2, #15
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43db      	mvns	r3, r3
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	08d2      	lsrs	r2, r2, #3
 800229c:	4019      	ands	r1, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3208      	adds	r2, #8
 80022a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	2103      	movs	r1, #3
 80022b0:	fa01 f303 	lsl.w	r3, r1, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	401a      	ands	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	2101      	movs	r1, #1
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	fa01 f303 	lsl.w	r3, r1, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	401a      	ands	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	2103      	movs	r1, #3
 80022da:	fa01 f303 	lsl.w	r3, r1, r3
 80022de:	43db      	mvns	r3, r3
 80022e0:	401a      	ands	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	3301      	adds	r3, #1
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	2b0f      	cmp	r3, #15
 80022f0:	f67f af2e 	bls.w	8002150 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80022f4:	bf00      	nop
 80022f6:	371c      	adds	r7, #28
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	40013800 	.word	0x40013800
 8002304:	40020000 	.word	0x40020000
 8002308:	40020400 	.word	0x40020400
 800230c:	40020800 	.word	0x40020800
 8002310:	40020c00 	.word	0x40020c00
 8002314:	40021000 	.word	0x40021000
 8002318:	40021400 	.word	0x40021400
 800231c:	40021800 	.word	0x40021800
 8002320:	40021c00 	.word	0x40021c00
 8002324:	40013c00 	.word	0x40013c00

08002328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	460b      	mov	r3, r1
 8002332:	807b      	strh	r3, [r7, #2]
 8002334:	4613      	mov	r3, r2
 8002336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002338:	787b      	ldrb	r3, [r7, #1]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800233e:	887a      	ldrh	r2, [r7, #2]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002344:	e003      	b.n	800234e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002346:	887b      	ldrh	r3, [r7, #2]
 8002348:	041a      	lsls	r2, r3, #16
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	619a      	str	r2, [r3, #24]
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
	...

0800235c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002366:	4b08      	ldr	r3, [pc, #32]	; (8002388 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002368:	695a      	ldr	r2, [r3, #20]
 800236a:	88fb      	ldrh	r3, [r7, #6]
 800236c:	4013      	ands	r3, r2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d006      	beq.n	8002380 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002372:	4a05      	ldr	r2, [pc, #20]	; (8002388 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002374:	88fb      	ldrh	r3, [r7, #6]
 8002376:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002378:	88fb      	ldrh	r3, [r7, #6]
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe fef4 	bl	8001168 <HAL_GPIO_EXTI_Callback>
  }
}
 8002380:	bf00      	nop
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40013c00 	.word	0x40013c00

0800238c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e25b      	b.n	8002856 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d075      	beq.n	8002496 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023aa:	4ba3      	ldr	r3, [pc, #652]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 030c 	and.w	r3, r3, #12
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d00c      	beq.n	80023d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023b6:	4ba0      	ldr	r3, [pc, #640]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d112      	bne.n	80023e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023c2:	4b9d      	ldr	r3, [pc, #628]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023ce:	d10b      	bne.n	80023e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d0:	4b99      	ldr	r3, [pc, #612]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d05b      	beq.n	8002494 <HAL_RCC_OscConfig+0x108>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d157      	bne.n	8002494 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e236      	b.n	8002856 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f0:	d106      	bne.n	8002400 <HAL_RCC_OscConfig+0x74>
 80023f2:	4b91      	ldr	r3, [pc, #580]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a90      	ldr	r2, [pc, #576]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 80023f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	e01d      	b.n	800243c <HAL_RCC_OscConfig+0xb0>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002408:	d10c      	bne.n	8002424 <HAL_RCC_OscConfig+0x98>
 800240a:	4b8b      	ldr	r3, [pc, #556]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a8a      	ldr	r2, [pc, #552]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 8002410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	4b88      	ldr	r3, [pc, #544]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a87      	ldr	r2, [pc, #540]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 800241c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	e00b      	b.n	800243c <HAL_RCC_OscConfig+0xb0>
 8002424:	4b84      	ldr	r3, [pc, #528]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a83      	ldr	r2, [pc, #524]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 800242a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	4b81      	ldr	r3, [pc, #516]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a80      	ldr	r2, [pc, #512]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 8002436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800243a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d013      	beq.n	800246c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002444:	f7ff fbbe 	bl	8001bc4 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800244c:	f7ff fbba 	bl	8001bc4 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b64      	cmp	r3, #100	; 0x64
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e1fb      	b.n	8002856 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245e:	4b76      	ldr	r3, [pc, #472]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0f0      	beq.n	800244c <HAL_RCC_OscConfig+0xc0>
 800246a:	e014      	b.n	8002496 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246c:	f7ff fbaa 	bl	8001bc4 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002474:	f7ff fba6 	bl	8001bc4 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b64      	cmp	r3, #100	; 0x64
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e1e7      	b.n	8002856 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002486:	4b6c      	ldr	r3, [pc, #432]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1f0      	bne.n	8002474 <HAL_RCC_OscConfig+0xe8>
 8002492:	e000      	b.n	8002496 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d063      	beq.n	800256a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024a2:	4b65      	ldr	r3, [pc, #404]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 030c 	and.w	r3, r3, #12
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00b      	beq.n	80024c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ae:	4b62      	ldr	r3, [pc, #392]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024b6:	2b08      	cmp	r3, #8
 80024b8:	d11c      	bne.n	80024f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ba:	4b5f      	ldr	r3, [pc, #380]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d116      	bne.n	80024f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c6:	4b5c      	ldr	r3, [pc, #368]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d005      	beq.n	80024de <HAL_RCC_OscConfig+0x152>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d001      	beq.n	80024de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e1bb      	b.n	8002856 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024de:	4b56      	ldr	r3, [pc, #344]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4952      	ldr	r1, [pc, #328]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024f2:	e03a      	b.n	800256a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d020      	beq.n	800253e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024fc:	4b4f      	ldr	r3, [pc, #316]	; (800263c <HAL_RCC_OscConfig+0x2b0>)
 80024fe:	2201      	movs	r2, #1
 8002500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002502:	f7ff fb5f 	bl	8001bc4 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800250a:	f7ff fb5b 	bl	8001bc4 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e19c      	b.n	8002856 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251c:	4b46      	ldr	r3, [pc, #280]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0f0      	beq.n	800250a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002528:	4b43      	ldr	r3, [pc, #268]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	4940      	ldr	r1, [pc, #256]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 8002538:	4313      	orrs	r3, r2
 800253a:	600b      	str	r3, [r1, #0]
 800253c:	e015      	b.n	800256a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800253e:	4b3f      	ldr	r3, [pc, #252]	; (800263c <HAL_RCC_OscConfig+0x2b0>)
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002544:	f7ff fb3e 	bl	8001bc4 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800254c:	f7ff fb3a 	bl	8001bc4 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e17b      	b.n	8002856 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800255e:	4b36      	ldr	r3, [pc, #216]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	2b00      	cmp	r3, #0
 8002574:	d030      	beq.n	80025d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d016      	beq.n	80025ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800257e:	4b30      	ldr	r3, [pc, #192]	; (8002640 <HAL_RCC_OscConfig+0x2b4>)
 8002580:	2201      	movs	r2, #1
 8002582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002584:	f7ff fb1e 	bl	8001bc4 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800258c:	f7ff fb1a 	bl	8001bc4 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e15b      	b.n	8002856 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800259e:	4b26      	ldr	r3, [pc, #152]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 80025a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCC_OscConfig+0x200>
 80025aa:	e015      	b.n	80025d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ac:	4b24      	ldr	r3, [pc, #144]	; (8002640 <HAL_RCC_OscConfig+0x2b4>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b2:	f7ff fb07 	bl	8001bc4 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ba:	f7ff fb03 	bl	8001bc4 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e144      	b.n	8002856 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025cc:	4b1a      	ldr	r3, [pc, #104]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 80025ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1f0      	bne.n	80025ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 80a0 	beq.w	8002726 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025e6:	2300      	movs	r3, #0
 80025e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ea:	4b13      	ldr	r3, [pc, #76]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10f      	bne.n	8002616 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	4a0e      	ldr	r2, [pc, #56]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 8002600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002604:	6413      	str	r3, [r2, #64]	; 0x40
 8002606:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002612:	2301      	movs	r3, #1
 8002614:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002616:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <HAL_RCC_OscConfig+0x2b8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d121      	bne.n	8002666 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002622:	4b08      	ldr	r3, [pc, #32]	; (8002644 <HAL_RCC_OscConfig+0x2b8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a07      	ldr	r2, [pc, #28]	; (8002644 <HAL_RCC_OscConfig+0x2b8>)
 8002628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800262c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800262e:	f7ff fac9 	bl	8001bc4 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002634:	e011      	b.n	800265a <HAL_RCC_OscConfig+0x2ce>
 8002636:	bf00      	nop
 8002638:	40023800 	.word	0x40023800
 800263c:	42470000 	.word	0x42470000
 8002640:	42470e80 	.word	0x42470e80
 8002644:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002648:	f7ff fabc 	bl	8001bc4 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e0fd      	b.n	8002856 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265a:	4b81      	ldr	r3, [pc, #516]	; (8002860 <HAL_RCC_OscConfig+0x4d4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d106      	bne.n	800267c <HAL_RCC_OscConfig+0x2f0>
 800266e:	4b7d      	ldr	r3, [pc, #500]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 8002670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002672:	4a7c      	ldr	r2, [pc, #496]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	6713      	str	r3, [r2, #112]	; 0x70
 800267a:	e01c      	b.n	80026b6 <HAL_RCC_OscConfig+0x32a>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2b05      	cmp	r3, #5
 8002682:	d10c      	bne.n	800269e <HAL_RCC_OscConfig+0x312>
 8002684:	4b77      	ldr	r3, [pc, #476]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 8002686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002688:	4a76      	ldr	r2, [pc, #472]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 800268a:	f043 0304 	orr.w	r3, r3, #4
 800268e:	6713      	str	r3, [r2, #112]	; 0x70
 8002690:	4b74      	ldr	r3, [pc, #464]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 8002692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002694:	4a73      	ldr	r2, [pc, #460]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	6713      	str	r3, [r2, #112]	; 0x70
 800269c:	e00b      	b.n	80026b6 <HAL_RCC_OscConfig+0x32a>
 800269e:	4b71      	ldr	r3, [pc, #452]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 80026a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a2:	4a70      	ldr	r2, [pc, #448]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 80026a4:	f023 0301 	bic.w	r3, r3, #1
 80026a8:	6713      	str	r3, [r2, #112]	; 0x70
 80026aa:	4b6e      	ldr	r3, [pc, #440]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 80026ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ae:	4a6d      	ldr	r2, [pc, #436]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 80026b0:	f023 0304 	bic.w	r3, r3, #4
 80026b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d015      	beq.n	80026ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026be:	f7ff fa81 	bl	8001bc4 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c4:	e00a      	b.n	80026dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c6:	f7ff fa7d 	bl	8001bc4 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e0bc      	b.n	8002856 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026dc:	4b61      	ldr	r3, [pc, #388]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 80026de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0ee      	beq.n	80026c6 <HAL_RCC_OscConfig+0x33a>
 80026e8:	e014      	b.n	8002714 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ea:	f7ff fa6b 	bl	8001bc4 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f0:	e00a      	b.n	8002708 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026f2:	f7ff fa67 	bl	8001bc4 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002700:	4293      	cmp	r3, r2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e0a6      	b.n	8002856 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002708:	4b56      	ldr	r3, [pc, #344]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 800270a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1ee      	bne.n	80026f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002714:	7dfb      	ldrb	r3, [r7, #23]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d105      	bne.n	8002726 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800271a:	4b52      	ldr	r3, [pc, #328]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	4a51      	ldr	r2, [pc, #324]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 8002720:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002724:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 8092 	beq.w	8002854 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002730:	4b4c      	ldr	r3, [pc, #304]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 030c 	and.w	r3, r3, #12
 8002738:	2b08      	cmp	r3, #8
 800273a:	d05c      	beq.n	80027f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	2b02      	cmp	r3, #2
 8002742:	d141      	bne.n	80027c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002744:	4b48      	ldr	r3, [pc, #288]	; (8002868 <HAL_RCC_OscConfig+0x4dc>)
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7ff fa3b 	bl	8001bc4 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002752:	f7ff fa37 	bl	8001bc4 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e078      	b.n	8002856 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002764:	4b3f      	ldr	r3, [pc, #252]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1f0      	bne.n	8002752 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69da      	ldr	r2, [r3, #28]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	431a      	orrs	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277e:	019b      	lsls	r3, r3, #6
 8002780:	431a      	orrs	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002786:	085b      	lsrs	r3, r3, #1
 8002788:	3b01      	subs	r3, #1
 800278a:	041b      	lsls	r3, r3, #16
 800278c:	431a      	orrs	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002792:	061b      	lsls	r3, r3, #24
 8002794:	4933      	ldr	r1, [pc, #204]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 8002796:	4313      	orrs	r3, r2
 8002798:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800279a:	4b33      	ldr	r3, [pc, #204]	; (8002868 <HAL_RCC_OscConfig+0x4dc>)
 800279c:	2201      	movs	r2, #1
 800279e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a0:	f7ff fa10 	bl	8001bc4 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a8:	f7ff fa0c 	bl	8001bc4 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e04d      	b.n	8002856 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ba:	4b2a      	ldr	r3, [pc, #168]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCC_OscConfig+0x41c>
 80027c6:	e045      	b.n	8002854 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c8:	4b27      	ldr	r3, [pc, #156]	; (8002868 <HAL_RCC_OscConfig+0x4dc>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ce:	f7ff f9f9 	bl	8001bc4 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d6:	f7ff f9f5 	bl	8001bc4 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e036      	b.n	8002856 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e8:	4b1e      	ldr	r3, [pc, #120]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1f0      	bne.n	80027d6 <HAL_RCC_OscConfig+0x44a>
 80027f4:	e02e      	b.n	8002854 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d101      	bne.n	8002802 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e029      	b.n	8002856 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002802:	4b18      	ldr	r3, [pc, #96]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	429a      	cmp	r2, r3
 8002814:	d11c      	bne.n	8002850 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002820:	429a      	cmp	r2, r3
 8002822:	d115      	bne.n	8002850 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800282a:	4013      	ands	r3, r2
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002830:	4293      	cmp	r3, r2
 8002832:	d10d      	bne.n	8002850 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800283e:	429a      	cmp	r2, r3
 8002840:	d106      	bne.n	8002850 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e000      	b.n	8002856 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40007000 	.word	0x40007000
 8002864:	40023800 	.word	0x40023800
 8002868:	42470060 	.word	0x42470060

0800286c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e0cc      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002880:	4b68      	ldr	r3, [pc, #416]	; (8002a24 <HAL_RCC_ClockConfig+0x1b8>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 030f 	and.w	r3, r3, #15
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d90c      	bls.n	80028a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288e:	4b65      	ldr	r3, [pc, #404]	; (8002a24 <HAL_RCC_ClockConfig+0x1b8>)
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002896:	4b63      	ldr	r3, [pc, #396]	; (8002a24 <HAL_RCC_ClockConfig+0x1b8>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d001      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e0b8      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d020      	beq.n	80028f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d005      	beq.n	80028cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028c0:	4b59      	ldr	r3, [pc, #356]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	4a58      	ldr	r2, [pc, #352]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0308 	and.w	r3, r3, #8
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d005      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028d8:	4b53      	ldr	r3, [pc, #332]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	4a52      	ldr	r2, [pc, #328]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80028de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e4:	4b50      	ldr	r3, [pc, #320]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	494d      	ldr	r1, [pc, #308]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d044      	beq.n	800298c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d107      	bne.n	800291a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290a:	4b47      	ldr	r3, [pc, #284]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d119      	bne.n	800294a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e07f      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b02      	cmp	r3, #2
 8002920:	d003      	beq.n	800292a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002926:	2b03      	cmp	r3, #3
 8002928:	d107      	bne.n	800293a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800292a:	4b3f      	ldr	r3, [pc, #252]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d109      	bne.n	800294a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e06f      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800293a:	4b3b      	ldr	r3, [pc, #236]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e067      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800294a:	4b37      	ldr	r3, [pc, #220]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f023 0203 	bic.w	r2, r3, #3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	4934      	ldr	r1, [pc, #208]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 8002958:	4313      	orrs	r3, r2
 800295a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800295c:	f7ff f932 	bl	8001bc4 <HAL_GetTick>
 8002960:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002962:	e00a      	b.n	800297a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002964:	f7ff f92e 	bl	8001bc4 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002972:	4293      	cmp	r3, r2
 8002974:	d901      	bls.n	800297a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e04f      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297a:	4b2b      	ldr	r3, [pc, #172]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 020c 	and.w	r2, r3, #12
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	429a      	cmp	r2, r3
 800298a:	d1eb      	bne.n	8002964 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800298c:	4b25      	ldr	r3, [pc, #148]	; (8002a24 <HAL_RCC_ClockConfig+0x1b8>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 030f 	and.w	r3, r3, #15
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d20c      	bcs.n	80029b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299a:	4b22      	ldr	r3, [pc, #136]	; (8002a24 <HAL_RCC_ClockConfig+0x1b8>)
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a2:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <HAL_RCC_ClockConfig+0x1b8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d001      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e032      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d008      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029c0:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4916      	ldr	r1, [pc, #88]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d009      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029de:	4b12      	ldr	r3, [pc, #72]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	490e      	ldr	r1, [pc, #56]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029f2:	f000 f821 	bl	8002a38 <HAL_RCC_GetSysClockFreq>
 80029f6:	4601      	mov	r1, r0
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	091b      	lsrs	r3, r3, #4
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	4a0a      	ldr	r2, [pc, #40]	; (8002a2c <HAL_RCC_ClockConfig+0x1c0>)
 8002a04:	5cd3      	ldrb	r3, [r2, r3]
 8002a06:	fa21 f303 	lsr.w	r3, r1, r3
 8002a0a:	4a09      	ldr	r2, [pc, #36]	; (8002a30 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a0e:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <HAL_RCC_ClockConfig+0x1c8>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff f892 	bl	8001b3c <HAL_InitTick>

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40023c00 	.word	0x40023c00
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	08006a10 	.word	0x08006a10
 8002a30:	20000138 	.word	0x20000138
 8002a34:	20000154 	.word	0x20000154

08002a38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	607b      	str	r3, [r7, #4]
 8002a42:	2300      	movs	r3, #0
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	2300      	movs	r3, #0
 8002a48:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a4e:	4b63      	ldr	r3, [pc, #396]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 030c 	and.w	r3, r3, #12
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d007      	beq.n	8002a6a <HAL_RCC_GetSysClockFreq+0x32>
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d008      	beq.n	8002a70 <HAL_RCC_GetSysClockFreq+0x38>
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f040 80b4 	bne.w	8002bcc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a64:	4b5e      	ldr	r3, [pc, #376]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002a66:	60bb      	str	r3, [r7, #8]
       break;
 8002a68:	e0b3      	b.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a6a:	4b5e      	ldr	r3, [pc, #376]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002a6c:	60bb      	str	r3, [r7, #8]
      break;
 8002a6e:	e0b0      	b.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a70:	4b5a      	ldr	r3, [pc, #360]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a78:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a7a:	4b58      	ldr	r3, [pc, #352]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d04a      	beq.n	8002b1c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a86:	4b55      	ldr	r3, [pc, #340]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	099b      	lsrs	r3, r3, #6
 8002a8c:	f04f 0400 	mov.w	r4, #0
 8002a90:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a94:	f04f 0200 	mov.w	r2, #0
 8002a98:	ea03 0501 	and.w	r5, r3, r1
 8002a9c:	ea04 0602 	and.w	r6, r4, r2
 8002aa0:	4629      	mov	r1, r5
 8002aa2:	4632      	mov	r2, r6
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	f04f 0400 	mov.w	r4, #0
 8002aac:	0154      	lsls	r4, r2, #5
 8002aae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ab2:	014b      	lsls	r3, r1, #5
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4622      	mov	r2, r4
 8002ab8:	1b49      	subs	r1, r1, r5
 8002aba:	eb62 0206 	sbc.w	r2, r2, r6
 8002abe:	f04f 0300 	mov.w	r3, #0
 8002ac2:	f04f 0400 	mov.w	r4, #0
 8002ac6:	0194      	lsls	r4, r2, #6
 8002ac8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002acc:	018b      	lsls	r3, r1, #6
 8002ace:	1a5b      	subs	r3, r3, r1
 8002ad0:	eb64 0402 	sbc.w	r4, r4, r2
 8002ad4:	f04f 0100 	mov.w	r1, #0
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	00e2      	lsls	r2, r4, #3
 8002ade:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ae2:	00d9      	lsls	r1, r3, #3
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4614      	mov	r4, r2
 8002ae8:	195b      	adds	r3, r3, r5
 8002aea:	eb44 0406 	adc.w	r4, r4, r6
 8002aee:	f04f 0100 	mov.w	r1, #0
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	0262      	lsls	r2, r4, #9
 8002af8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002afc:	0259      	lsls	r1, r3, #9
 8002afe:	460b      	mov	r3, r1
 8002b00:	4614      	mov	r4, r2
 8002b02:	4618      	mov	r0, r3
 8002b04:	4621      	mov	r1, r4
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f04f 0400 	mov.w	r4, #0
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	4623      	mov	r3, r4
 8002b10:	f7fd fbb6 	bl	8000280 <__aeabi_uldivmod>
 8002b14:	4603      	mov	r3, r0
 8002b16:	460c      	mov	r4, r1
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	e049      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b1c:	4b2f      	ldr	r3, [pc, #188]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	099b      	lsrs	r3, r3, #6
 8002b22:	f04f 0400 	mov.w	r4, #0
 8002b26:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	ea03 0501 	and.w	r5, r3, r1
 8002b32:	ea04 0602 	and.w	r6, r4, r2
 8002b36:	4629      	mov	r1, r5
 8002b38:	4632      	mov	r2, r6
 8002b3a:	f04f 0300 	mov.w	r3, #0
 8002b3e:	f04f 0400 	mov.w	r4, #0
 8002b42:	0154      	lsls	r4, r2, #5
 8002b44:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b48:	014b      	lsls	r3, r1, #5
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4622      	mov	r2, r4
 8002b4e:	1b49      	subs	r1, r1, r5
 8002b50:	eb62 0206 	sbc.w	r2, r2, r6
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	f04f 0400 	mov.w	r4, #0
 8002b5c:	0194      	lsls	r4, r2, #6
 8002b5e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b62:	018b      	lsls	r3, r1, #6
 8002b64:	1a5b      	subs	r3, r3, r1
 8002b66:	eb64 0402 	sbc.w	r4, r4, r2
 8002b6a:	f04f 0100 	mov.w	r1, #0
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	00e2      	lsls	r2, r4, #3
 8002b74:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b78:	00d9      	lsls	r1, r3, #3
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4614      	mov	r4, r2
 8002b7e:	195b      	adds	r3, r3, r5
 8002b80:	eb44 0406 	adc.w	r4, r4, r6
 8002b84:	f04f 0100 	mov.w	r1, #0
 8002b88:	f04f 0200 	mov.w	r2, #0
 8002b8c:	02a2      	lsls	r2, r4, #10
 8002b8e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002b92:	0299      	lsls	r1, r3, #10
 8002b94:	460b      	mov	r3, r1
 8002b96:	4614      	mov	r4, r2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	4621      	mov	r1, r4
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f04f 0400 	mov.w	r4, #0
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	4623      	mov	r3, r4
 8002ba6:	f7fd fb6b 	bl	8000280 <__aeabi_uldivmod>
 8002baa:	4603      	mov	r3, r0
 8002bac:	460c      	mov	r4, r1
 8002bae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bb0:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	0c1b      	lsrs	r3, r3, #16
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	3301      	adds	r3, #1
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc8:	60bb      	str	r3, [r7, #8]
      break;
 8002bca:	e002      	b.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bcc:	4b04      	ldr	r3, [pc, #16]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002bce:	60bb      	str	r3, [r7, #8]
      break;
 8002bd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	00f42400 	.word	0x00f42400
 8002be4:	007a1200 	.word	0x007a1200

08002be8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bec:	4b03      	ldr	r3, [pc, #12]	; (8002bfc <HAL_RCC_GetHCLKFreq+0x14>)
 8002bee:	681b      	ldr	r3, [r3, #0]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	20000138 	.word	0x20000138

08002c00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c04:	f7ff fff0 	bl	8002be8 <HAL_RCC_GetHCLKFreq>
 8002c08:	4601      	mov	r1, r0
 8002c0a:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	0a9b      	lsrs	r3, r3, #10
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	4a03      	ldr	r2, [pc, #12]	; (8002c24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c16:	5cd3      	ldrb	r3, [r2, r3]
 8002c18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40023800 	.word	0x40023800
 8002c24:	08006a20 	.word	0x08006a20

08002c28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c2c:	f7ff ffdc 	bl	8002be8 <HAL_RCC_GetHCLKFreq>
 8002c30:	4601      	mov	r1, r0
 8002c32:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	0b5b      	lsrs	r3, r3, #13
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	4a03      	ldr	r2, [pc, #12]	; (8002c4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c3e:	5cd3      	ldrb	r3, [r2, r3]
 8002c40:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	08006a20 	.word	0x08006a20

08002c50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e056      	b.n	8002d10 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d106      	bne.n	8002c82 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7fe f8b1 	bl	8000de4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2202      	movs	r2, #2
 8002c86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c98:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	ea42 0103 	orr.w	r1, r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	0c1b      	lsrs	r3, r3, #16
 8002ce0:	f003 0104 	and.w	r1, r3, #4
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	69da      	ldr	r2, [r3, #28]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cfe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b088      	sub	sp, #32
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	4613      	mov	r3, r2
 8002d26:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d101      	bne.n	8002d3a <HAL_SPI_Transmit+0x22>
 8002d36:	2302      	movs	r3, #2
 8002d38:	e11e      	b.n	8002f78 <HAL_SPI_Transmit+0x260>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d42:	f7fe ff3f 	bl	8001bc4 <HAL_GetTick>
 8002d46:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d48:	88fb      	ldrh	r3, [r7, #6]
 8002d4a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d002      	beq.n	8002d5e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d58:	2302      	movs	r3, #2
 8002d5a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d5c:	e103      	b.n	8002f66 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d002      	beq.n	8002d6a <HAL_SPI_Transmit+0x52>
 8002d64:	88fb      	ldrh	r3, [r7, #6]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d102      	bne.n	8002d70 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d6e:	e0fa      	b.n	8002f66 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2203      	movs	r2, #3
 8002d74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	88fa      	ldrh	r2, [r7, #6]
 8002d88:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	88fa      	ldrh	r2, [r7, #6]
 8002d8e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002db6:	d107      	bne.n	8002dc8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dc6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd2:	2b40      	cmp	r3, #64	; 0x40
 8002dd4:	d007      	beq.n	8002de6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002de4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dee:	d14b      	bne.n	8002e88 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <HAL_SPI_Transmit+0xe6>
 8002df8:	8afb      	ldrh	r3, [r7, #22]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d13e      	bne.n	8002e7c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	881a      	ldrh	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	1c9a      	adds	r2, r3, #2
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e22:	e02b      	b.n	8002e7c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d112      	bne.n	8002e58 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	881a      	ldrh	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	1c9a      	adds	r2, r3, #2
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e56:	e011      	b.n	8002e7c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e58:	f7fe feb4 	bl	8001bc4 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d803      	bhi.n	8002e70 <HAL_SPI_Transmit+0x158>
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6e:	d102      	bne.n	8002e76 <HAL_SPI_Transmit+0x15e>
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d102      	bne.n	8002e7c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e7a:	e074      	b.n	8002f66 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1ce      	bne.n	8002e24 <HAL_SPI_Transmit+0x10c>
 8002e86:	e04c      	b.n	8002f22 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d002      	beq.n	8002e96 <HAL_SPI_Transmit+0x17e>
 8002e90:	8afb      	ldrh	r3, [r7, #22]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d140      	bne.n	8002f18 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	330c      	adds	r3, #12
 8002ea0:	7812      	ldrb	r2, [r2, #0]
 8002ea2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002ebc:	e02c      	b.n	8002f18 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d113      	bne.n	8002ef4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	330c      	adds	r3, #12
 8002ed6:	7812      	ldrb	r2, [r2, #0]
 8002ed8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	3b01      	subs	r3, #1
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ef2:	e011      	b.n	8002f18 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ef4:	f7fe fe66 	bl	8001bc4 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d803      	bhi.n	8002f0c <HAL_SPI_Transmit+0x1f4>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0a:	d102      	bne.n	8002f12 <HAL_SPI_Transmit+0x1fa>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d102      	bne.n	8002f18 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f16:	e026      	b.n	8002f66 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1cd      	bne.n	8002ebe <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	6839      	ldr	r1, [r7, #0]
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 fba4 	bl	8003674 <SPI_EndRxTxTransaction>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2220      	movs	r2, #32
 8002f36:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10a      	bne.n	8002f56 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f40:	2300      	movs	r3, #0
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	613b      	str	r3, [r7, #16]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	613b      	str	r3, [r7, #16]
 8002f54:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	77fb      	strb	r3, [r7, #31]
 8002f62:	e000      	b.n	8002f66 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002f64:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f76:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3720      	adds	r7, #32
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af02      	add	r7, sp, #8
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	603b      	str	r3, [r7, #0]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f9c:	d112      	bne.n	8002fc4 <HAL_SPI_Receive+0x44>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10e      	bne.n	8002fc4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2204      	movs	r2, #4
 8002faa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002fae:	88fa      	ldrh	r2, [r7, #6]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	68b9      	ldr	r1, [r7, #8]
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 f8e9 	bl	8003192 <HAL_SPI_TransmitReceive>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	e0e2      	b.n	800318a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_SPI_Receive+0x52>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e0db      	b.n	800318a <HAL_SPI_Receive+0x20a>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fda:	f7fe fdf3 	bl	8001bc4 <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d002      	beq.n	8002ff2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002fec:	2302      	movs	r3, #2
 8002fee:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ff0:	e0c2      	b.n	8003178 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d002      	beq.n	8002ffe <HAL_SPI_Receive+0x7e>
 8002ff8:	88fb      	ldrh	r3, [r7, #6]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d102      	bne.n	8003004 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003002:	e0b9      	b.n	8003178 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2204      	movs	r2, #4
 8003008:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	88fa      	ldrh	r2, [r7, #6]
 800301c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	88fa      	ldrh	r2, [r7, #6]
 8003022:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800304a:	d107      	bne.n	800305c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800305a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003066:	2b40      	cmp	r3, #64	; 0x40
 8003068:	d007      	beq.n	800307a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003078:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d162      	bne.n	8003148 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003082:	e02e      	b.n	80030e2 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b01      	cmp	r3, #1
 8003090:	d115      	bne.n	80030be <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f103 020c 	add.w	r2, r3, #12
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309e:	7812      	ldrb	r2, [r2, #0]
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a8:	1c5a      	adds	r2, r3, #1
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	3b01      	subs	r3, #1
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030bc:	e011      	b.n	80030e2 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030be:	f7fe fd81 	bl	8001bc4 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d803      	bhi.n	80030d6 <HAL_SPI_Receive+0x156>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d4:	d102      	bne.n	80030dc <HAL_SPI_Receive+0x15c>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d102      	bne.n	80030e2 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	75fb      	strb	r3, [r7, #23]
          goto error;
 80030e0:	e04a      	b.n	8003178 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1cb      	bne.n	8003084 <HAL_SPI_Receive+0x104>
 80030ec:	e031      	b.n	8003152 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d113      	bne.n	8003124 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003106:	b292      	uxth	r2, r2
 8003108:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310e:	1c9a      	adds	r2, r3, #2
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003118:	b29b      	uxth	r3, r3
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003122:	e011      	b.n	8003148 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003124:	f7fe fd4e 	bl	8001bc4 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	429a      	cmp	r2, r3
 8003132:	d803      	bhi.n	800313c <HAL_SPI_Receive+0x1bc>
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313a:	d102      	bne.n	8003142 <HAL_SPI_Receive+0x1c2>
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d102      	bne.n	8003148 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003146:	e017      	b.n	8003178 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800314c:	b29b      	uxth	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1cd      	bne.n	80030ee <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	6839      	ldr	r1, [r7, #0]
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 fa27 	bl	80035aa <SPI_EndRxTransaction>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2220      	movs	r2, #32
 8003166:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316c:	2b00      	cmp	r3, #0
 800316e:	d002      	beq.n	8003176 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	75fb      	strb	r3, [r7, #23]
 8003174:	e000      	b.n	8003178 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003176:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003188:	7dfb      	ldrb	r3, [r7, #23]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b08c      	sub	sp, #48	; 0x30
 8003196:	af00      	add	r7, sp, #0
 8003198:	60f8      	str	r0, [r7, #12]
 800319a:	60b9      	str	r1, [r7, #8]
 800319c:	607a      	str	r2, [r7, #4]
 800319e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80031a0:	2301      	movs	r3, #1
 80031a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_SPI_TransmitReceive+0x26>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e18a      	b.n	80034ce <HAL_SPI_TransmitReceive+0x33c>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031c0:	f7fe fd00 	bl	8001bc4 <HAL_GetTick>
 80031c4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80031d6:	887b      	ldrh	r3, [r7, #2]
 80031d8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d00f      	beq.n	8003202 <HAL_SPI_TransmitReceive+0x70>
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031e8:	d107      	bne.n	80031fa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d103      	bne.n	80031fa <HAL_SPI_TransmitReceive+0x68>
 80031f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d003      	beq.n	8003202 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80031fa:	2302      	movs	r3, #2
 80031fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003200:	e15b      	b.n	80034ba <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d005      	beq.n	8003214 <HAL_SPI_TransmitReceive+0x82>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d002      	beq.n	8003214 <HAL_SPI_TransmitReceive+0x82>
 800320e:	887b      	ldrh	r3, [r7, #2]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d103      	bne.n	800321c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800321a:	e14e      	b.n	80034ba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b04      	cmp	r3, #4
 8003226:	d003      	beq.n	8003230 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2205      	movs	r2, #5
 800322c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	887a      	ldrh	r2, [r7, #2]
 8003240:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	887a      	ldrh	r2, [r7, #2]
 8003246:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	887a      	ldrh	r2, [r7, #2]
 8003252:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	887a      	ldrh	r2, [r7, #2]
 8003258:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003270:	2b40      	cmp	r3, #64	; 0x40
 8003272:	d007      	beq.n	8003284 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003282:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800328c:	d178      	bne.n	8003380 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d002      	beq.n	800329c <HAL_SPI_TransmitReceive+0x10a>
 8003296:	8b7b      	ldrh	r3, [r7, #26]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d166      	bne.n	800336a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a0:	881a      	ldrh	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ac:	1c9a      	adds	r2, r3, #2
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032c0:	e053      	b.n	800336a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d11b      	bne.n	8003308 <HAL_SPI_TransmitReceive+0x176>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d016      	beq.n	8003308 <HAL_SPI_TransmitReceive+0x176>
 80032da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d113      	bne.n	8003308 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e4:	881a      	ldrh	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f0:	1c9a      	adds	r2, r3, #2
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003304:	2300      	movs	r3, #0
 8003306:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b01      	cmp	r3, #1
 8003314:	d119      	bne.n	800334a <HAL_SPI_TransmitReceive+0x1b8>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800331a:	b29b      	uxth	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d014      	beq.n	800334a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332a:	b292      	uxth	r2, r2
 800332c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003332:	1c9a      	adds	r2, r3, #2
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800333c:	b29b      	uxth	r3, r3
 800333e:	3b01      	subs	r3, #1
 8003340:	b29a      	uxth	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003346:	2301      	movs	r3, #1
 8003348:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800334a:	f7fe fc3b 	bl	8001bc4 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003356:	429a      	cmp	r2, r3
 8003358:	d807      	bhi.n	800336a <HAL_SPI_TransmitReceive+0x1d8>
 800335a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800335c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003360:	d003      	beq.n	800336a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003368:	e0a7      	b.n	80034ba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800336e:	b29b      	uxth	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1a6      	bne.n	80032c2 <HAL_SPI_TransmitReceive+0x130>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003378:	b29b      	uxth	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1a1      	bne.n	80032c2 <HAL_SPI_TransmitReceive+0x130>
 800337e:	e07c      	b.n	800347a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <HAL_SPI_TransmitReceive+0x1fc>
 8003388:	8b7b      	ldrh	r3, [r7, #26]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d16b      	bne.n	8003466 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	330c      	adds	r3, #12
 8003398:	7812      	ldrb	r2, [r2, #0]
 800339a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033b4:	e057      	b.n	8003466 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d11c      	bne.n	80033fe <HAL_SPI_TransmitReceive+0x26c>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d017      	beq.n	80033fe <HAL_SPI_TransmitReceive+0x26c>
 80033ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d114      	bne.n	80033fe <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	330c      	adds	r3, #12
 80033de:	7812      	ldrb	r2, [r2, #0]
 80033e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	3b01      	subs	r3, #1
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b01      	cmp	r3, #1
 800340a:	d119      	bne.n	8003440 <HAL_SPI_TransmitReceive+0x2ae>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d014      	beq.n	8003440 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003420:	b2d2      	uxtb	r2, r2
 8003422:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003432:	b29b      	uxth	r3, r3
 8003434:	3b01      	subs	r3, #1
 8003436:	b29a      	uxth	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800343c:	2301      	movs	r3, #1
 800343e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003440:	f7fe fbc0 	bl	8001bc4 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800344c:	429a      	cmp	r2, r3
 800344e:	d803      	bhi.n	8003458 <HAL_SPI_TransmitReceive+0x2c6>
 8003450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003456:	d102      	bne.n	800345e <HAL_SPI_TransmitReceive+0x2cc>
 8003458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345a:	2b00      	cmp	r3, #0
 800345c:	d103      	bne.n	8003466 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003464:	e029      	b.n	80034ba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800346a:	b29b      	uxth	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1a2      	bne.n	80033b6 <HAL_SPI_TransmitReceive+0x224>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003474:	b29b      	uxth	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d19d      	bne.n	80033b6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800347a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800347c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 f8f8 	bl	8003674 <SPI_EndRxTxTransaction>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d006      	beq.n	8003498 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2220      	movs	r2, #32
 8003494:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003496:	e010      	b.n	80034ba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10b      	bne.n	80034b8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	e000      	b.n	80034ba <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80034b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3730      	adds	r7, #48	; 0x30
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b084      	sub	sp, #16
 80034da:	af00      	add	r7, sp, #0
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	603b      	str	r3, [r7, #0]
 80034e2:	4613      	mov	r3, r2
 80034e4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034e6:	e04c      	b.n	8003582 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ee:	d048      	beq.n	8003582 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80034f0:	f7fe fb68 	bl	8001bc4 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d902      	bls.n	8003506 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d13d      	bne.n	8003582 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003514:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800351e:	d111      	bne.n	8003544 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003528:	d004      	beq.n	8003534 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003532:	d107      	bne.n	8003544 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003542:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003548:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800354c:	d10f      	bne.n	800356e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800356c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e00f      	b.n	80035a2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4013      	ands	r3, r2
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	429a      	cmp	r2, r3
 8003590:	bf0c      	ite	eq
 8003592:	2301      	moveq	r3, #1
 8003594:	2300      	movne	r3, #0
 8003596:	b2db      	uxtb	r3, r3
 8003598:	461a      	mov	r2, r3
 800359a:	79fb      	ldrb	r3, [r7, #7]
 800359c:	429a      	cmp	r2, r3
 800359e:	d1a3      	bne.n	80034e8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b086      	sub	sp, #24
 80035ae:	af02      	add	r7, sp, #8
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035be:	d111      	bne.n	80035e4 <SPI_EndRxTransaction+0x3a>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035c8:	d004      	beq.n	80035d4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d2:	d107      	bne.n	80035e4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035e2:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035ec:	d12a      	bne.n	8003644 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f6:	d012      	beq.n	800361e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	2200      	movs	r2, #0
 8003600:	2180      	movs	r1, #128	; 0x80
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f7ff ff67 	bl	80034d6 <SPI_WaitFlagStateUntilTimeout>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d02d      	beq.n	800366a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003612:	f043 0220 	orr.w	r2, r3, #32
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e026      	b.n	800366c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2200      	movs	r2, #0
 8003626:	2101      	movs	r1, #1
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f7ff ff54 	bl	80034d6 <SPI_WaitFlagStateUntilTimeout>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d01a      	beq.n	800366a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003638:	f043 0220 	orr.w	r2, r3, #32
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e013      	b.n	800366c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2200      	movs	r2, #0
 800364c:	2101      	movs	r1, #1
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f7ff ff41 	bl	80034d6 <SPI_WaitFlagStateUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d007      	beq.n	800366a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365e:	f043 0220 	orr.w	r2, r3, #32
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e000      	b.n	800366c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b088      	sub	sp, #32
 8003678:	af02      	add	r7, sp, #8
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003680:	4b1b      	ldr	r3, [pc, #108]	; (80036f0 <SPI_EndRxTxTransaction+0x7c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a1b      	ldr	r2, [pc, #108]	; (80036f4 <SPI_EndRxTxTransaction+0x80>)
 8003686:	fba2 2303 	umull	r2, r3, r2, r3
 800368a:	0d5b      	lsrs	r3, r3, #21
 800368c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003690:	fb02 f303 	mul.w	r3, r2, r3
 8003694:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800369e:	d112      	bne.n	80036c6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2200      	movs	r2, #0
 80036a8:	2180      	movs	r1, #128	; 0x80
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f7ff ff13 	bl	80034d6 <SPI_WaitFlagStateUntilTimeout>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d016      	beq.n	80036e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ba:	f043 0220 	orr.w	r2, r3, #32
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e00f      	b.n	80036e6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00a      	beq.n	80036e2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036dc:	2b80      	cmp	r3, #128	; 0x80
 80036de:	d0f2      	beq.n	80036c6 <SPI_EndRxTxTransaction+0x52>
 80036e0:	e000      	b.n	80036e4 <SPI_EndRxTxTransaction+0x70>
        break;
 80036e2:	bf00      	nop
  }

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	20000138 	.word	0x20000138
 80036f4:	165e9f81 	.word	0x165e9f81

080036f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e01d      	b.n	8003746 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d106      	bne.n	8003724 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7fd fba8 	bl	8000e74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3304      	adds	r3, #4
 8003734:	4619      	mov	r1, r3
 8003736:	4610      	mov	r0, r2
 8003738:	f000 fa4a 	bl	8003bd0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800374e:	b480      	push	{r7}
 8003750:	b085      	sub	sp, #20
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f042 0201 	orr.w	r2, r2, #1
 8003764:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2b06      	cmp	r3, #6
 8003776:	d007      	beq.n	8003788 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0201 	bic.w	r2, r2, #1
 80037ac:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6a1a      	ldr	r2, [r3, #32]
 80037b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10f      	bne.n	80037de <HAL_TIM_Base_Stop_IT+0x48>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6a1a      	ldr	r2, [r3, #32]
 80037c4:	f240 4344 	movw	r3, #1092	; 0x444
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d107      	bne.n	80037de <HAL_TIM_Base_Stop_IT+0x48>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0201 	bic.w	r2, r2, #1
 80037dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d122      	bne.n	8003848 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b02      	cmp	r3, #2
 800380e:	d11b      	bne.n	8003848 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f06f 0202 	mvn.w	r2, #2
 8003818:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f9af 	bl	8003b92 <HAL_TIM_IC_CaptureCallback>
 8003834:	e005      	b.n	8003842 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f9a1 	bl	8003b7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f9b2 	bl	8003ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f003 0304 	and.w	r3, r3, #4
 8003852:	2b04      	cmp	r3, #4
 8003854:	d122      	bne.n	800389c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b04      	cmp	r3, #4
 8003862:	d11b      	bne.n	800389c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f06f 0204 	mvn.w	r2, #4
 800386c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2202      	movs	r2, #2
 8003872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f985 	bl	8003b92 <HAL_TIM_IC_CaptureCallback>
 8003888:	e005      	b.n	8003896 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f977 	bl	8003b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 f988 	bl	8003ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b08      	cmp	r3, #8
 80038a8:	d122      	bne.n	80038f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d11b      	bne.n	80038f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f06f 0208 	mvn.w	r2, #8
 80038c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2204      	movs	r2, #4
 80038c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f95b 	bl	8003b92 <HAL_TIM_IC_CaptureCallback>
 80038dc:	e005      	b.n	80038ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f94d 	bl	8003b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f95e 	bl	8003ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f003 0310 	and.w	r3, r3, #16
 80038fa:	2b10      	cmp	r3, #16
 80038fc:	d122      	bne.n	8003944 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f003 0310 	and.w	r3, r3, #16
 8003908:	2b10      	cmp	r3, #16
 800390a:	d11b      	bne.n	8003944 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f06f 0210 	mvn.w	r2, #16
 8003914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2208      	movs	r2, #8
 800391a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f931 	bl	8003b92 <HAL_TIM_IC_CaptureCallback>
 8003930:	e005      	b.n	800393e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f923 	bl	8003b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f934 	bl	8003ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b01      	cmp	r3, #1
 8003950:	d10e      	bne.n	8003970 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b01      	cmp	r3, #1
 800395e:	d107      	bne.n	8003970 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f06f 0201 	mvn.w	r2, #1
 8003968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f8fd 	bl	8003b6a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397a:	2b80      	cmp	r3, #128	; 0x80
 800397c:	d10e      	bne.n	800399c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003988:	2b80      	cmp	r3, #128	; 0x80
 800398a:	d107      	bne.n	800399c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fada 	bl	8003f50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a6:	2b40      	cmp	r3, #64	; 0x40
 80039a8:	d10e      	bne.n	80039c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b4:	2b40      	cmp	r3, #64	; 0x40
 80039b6:	d107      	bne.n	80039c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f8f9 	bl	8003bba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	f003 0320 	and.w	r3, r3, #32
 80039d2:	2b20      	cmp	r3, #32
 80039d4:	d10e      	bne.n	80039f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f003 0320 	and.w	r3, r3, #32
 80039e0:	2b20      	cmp	r3, #32
 80039e2:	d107      	bne.n	80039f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f06f 0220 	mvn.w	r2, #32
 80039ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 faa4 	bl	8003f3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039f4:	bf00      	nop
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_TIM_ConfigClockSource+0x18>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e0a6      	b.n	8003b62 <HAL_TIM_ConfigClockSource+0x166>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a3a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b40      	cmp	r3, #64	; 0x40
 8003a4a:	d067      	beq.n	8003b1c <HAL_TIM_ConfigClockSource+0x120>
 8003a4c:	2b40      	cmp	r3, #64	; 0x40
 8003a4e:	d80b      	bhi.n	8003a68 <HAL_TIM_ConfigClockSource+0x6c>
 8003a50:	2b10      	cmp	r3, #16
 8003a52:	d073      	beq.n	8003b3c <HAL_TIM_ConfigClockSource+0x140>
 8003a54:	2b10      	cmp	r3, #16
 8003a56:	d802      	bhi.n	8003a5e <HAL_TIM_ConfigClockSource+0x62>
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d06f      	beq.n	8003b3c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003a5c:	e078      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a5e:	2b20      	cmp	r3, #32
 8003a60:	d06c      	beq.n	8003b3c <HAL_TIM_ConfigClockSource+0x140>
 8003a62:	2b30      	cmp	r3, #48	; 0x30
 8003a64:	d06a      	beq.n	8003b3c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003a66:	e073      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a68:	2b70      	cmp	r3, #112	; 0x70
 8003a6a:	d00d      	beq.n	8003a88 <HAL_TIM_ConfigClockSource+0x8c>
 8003a6c:	2b70      	cmp	r3, #112	; 0x70
 8003a6e:	d804      	bhi.n	8003a7a <HAL_TIM_ConfigClockSource+0x7e>
 8003a70:	2b50      	cmp	r3, #80	; 0x50
 8003a72:	d033      	beq.n	8003adc <HAL_TIM_ConfigClockSource+0xe0>
 8003a74:	2b60      	cmp	r3, #96	; 0x60
 8003a76:	d041      	beq.n	8003afc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003a78:	e06a      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a7e:	d066      	beq.n	8003b4e <HAL_TIM_ConfigClockSource+0x152>
 8003a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a84:	d017      	beq.n	8003ab6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003a86:	e063      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6818      	ldr	r0, [r3, #0]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	6899      	ldr	r1, [r3, #8]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f000 f9b4 	bl	8003e04 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003aaa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	609a      	str	r2, [r3, #8]
      break;
 8003ab4:	e04c      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6818      	ldr	r0, [r3, #0]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	6899      	ldr	r1, [r3, #8]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f000 f99d 	bl	8003e04 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ad8:	609a      	str	r2, [r3, #8]
      break;
 8003ada:	e039      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6818      	ldr	r0, [r3, #0]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	6859      	ldr	r1, [r3, #4]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	f000 f911 	bl	8003d10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2150      	movs	r1, #80	; 0x50
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 f96a 	bl	8003dce <TIM_ITRx_SetConfig>
      break;
 8003afa:	e029      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6818      	ldr	r0, [r3, #0]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	6859      	ldr	r1, [r3, #4]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	f000 f930 	bl	8003d6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2160      	movs	r1, #96	; 0x60
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 f95a 	bl	8003dce <TIM_ITRx_SetConfig>
      break;
 8003b1a:	e019      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6818      	ldr	r0, [r3, #0]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	6859      	ldr	r1, [r3, #4]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	f000 f8f1 	bl	8003d10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2140      	movs	r1, #64	; 0x40
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 f94a 	bl	8003dce <TIM_ITRx_SetConfig>
      break;
 8003b3a:	e009      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4619      	mov	r1, r3
 8003b46:	4610      	mov	r0, r2
 8003b48:	f000 f941 	bl	8003dce <TIM_ITRx_SetConfig>
      break;
 8003b4c:	e000      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003b4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
	...

08003bd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a40      	ldr	r2, [pc, #256]	; (8003ce4 <TIM_Base_SetConfig+0x114>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d013      	beq.n	8003c10 <TIM_Base_SetConfig+0x40>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bee:	d00f      	beq.n	8003c10 <TIM_Base_SetConfig+0x40>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a3d      	ldr	r2, [pc, #244]	; (8003ce8 <TIM_Base_SetConfig+0x118>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d00b      	beq.n	8003c10 <TIM_Base_SetConfig+0x40>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a3c      	ldr	r2, [pc, #240]	; (8003cec <TIM_Base_SetConfig+0x11c>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d007      	beq.n	8003c10 <TIM_Base_SetConfig+0x40>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a3b      	ldr	r2, [pc, #236]	; (8003cf0 <TIM_Base_SetConfig+0x120>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d003      	beq.n	8003c10 <TIM_Base_SetConfig+0x40>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a3a      	ldr	r2, [pc, #232]	; (8003cf4 <TIM_Base_SetConfig+0x124>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d108      	bne.n	8003c22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a2f      	ldr	r2, [pc, #188]	; (8003ce4 <TIM_Base_SetConfig+0x114>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d02b      	beq.n	8003c82 <TIM_Base_SetConfig+0xb2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c30:	d027      	beq.n	8003c82 <TIM_Base_SetConfig+0xb2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a2c      	ldr	r2, [pc, #176]	; (8003ce8 <TIM_Base_SetConfig+0x118>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d023      	beq.n	8003c82 <TIM_Base_SetConfig+0xb2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a2b      	ldr	r2, [pc, #172]	; (8003cec <TIM_Base_SetConfig+0x11c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d01f      	beq.n	8003c82 <TIM_Base_SetConfig+0xb2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a2a      	ldr	r2, [pc, #168]	; (8003cf0 <TIM_Base_SetConfig+0x120>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d01b      	beq.n	8003c82 <TIM_Base_SetConfig+0xb2>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a29      	ldr	r2, [pc, #164]	; (8003cf4 <TIM_Base_SetConfig+0x124>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d017      	beq.n	8003c82 <TIM_Base_SetConfig+0xb2>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a28      	ldr	r2, [pc, #160]	; (8003cf8 <TIM_Base_SetConfig+0x128>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d013      	beq.n	8003c82 <TIM_Base_SetConfig+0xb2>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a27      	ldr	r2, [pc, #156]	; (8003cfc <TIM_Base_SetConfig+0x12c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d00f      	beq.n	8003c82 <TIM_Base_SetConfig+0xb2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a26      	ldr	r2, [pc, #152]	; (8003d00 <TIM_Base_SetConfig+0x130>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d00b      	beq.n	8003c82 <TIM_Base_SetConfig+0xb2>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a25      	ldr	r2, [pc, #148]	; (8003d04 <TIM_Base_SetConfig+0x134>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d007      	beq.n	8003c82 <TIM_Base_SetConfig+0xb2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a24      	ldr	r2, [pc, #144]	; (8003d08 <TIM_Base_SetConfig+0x138>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d003      	beq.n	8003c82 <TIM_Base_SetConfig+0xb2>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a23      	ldr	r2, [pc, #140]	; (8003d0c <TIM_Base_SetConfig+0x13c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d108      	bne.n	8003c94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a0a      	ldr	r2, [pc, #40]	; (8003ce4 <TIM_Base_SetConfig+0x114>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d003      	beq.n	8003cc8 <TIM_Base_SetConfig+0xf8>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a0c      	ldr	r2, [pc, #48]	; (8003cf4 <TIM_Base_SetConfig+0x124>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d103      	bne.n	8003cd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	691a      	ldr	r2, [r3, #16]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	615a      	str	r2, [r3, #20]
}
 8003cd6:	bf00      	nop
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	40010000 	.word	0x40010000
 8003ce8:	40000400 	.word	0x40000400
 8003cec:	40000800 	.word	0x40000800
 8003cf0:	40000c00 	.word	0x40000c00
 8003cf4:	40010400 	.word	0x40010400
 8003cf8:	40014000 	.word	0x40014000
 8003cfc:	40014400 	.word	0x40014400
 8003d00:	40014800 	.word	0x40014800
 8003d04:	40001800 	.word	0x40001800
 8003d08:	40001c00 	.word	0x40001c00
 8003d0c:	40002000 	.word	0x40002000

08003d10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	f023 0201 	bic.w	r2, r3, #1
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f023 030a 	bic.w	r3, r3, #10
 8003d4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	621a      	str	r2, [r3, #32]
}
 8003d62:	bf00      	nop
 8003d64:	371c      	adds	r7, #28
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b087      	sub	sp, #28
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	f023 0210 	bic.w	r2, r3, #16
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	031b      	lsls	r3, r3, #12
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003daa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	621a      	str	r2, [r3, #32]
}
 8003dc2:	bf00      	nop
 8003dc4:	371c      	adds	r7, #28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b085      	sub	sp, #20
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
 8003dd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f043 0307 	orr.w	r3, r3, #7
 8003df0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	609a      	str	r2, [r3, #8]
}
 8003df8:	bf00      	nop
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
 8003e10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	021a      	lsls	r2, r3, #8
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	431a      	orrs	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	609a      	str	r2, [r3, #8]
}
 8003e38:	bf00      	nop
 8003e3a:	371c      	adds	r7, #28
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e05a      	b.n	8003f12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a21      	ldr	r2, [pc, #132]	; (8003f20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d022      	beq.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea8:	d01d      	beq.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a1d      	ldr	r2, [pc, #116]	; (8003f24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d018      	beq.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a1b      	ldr	r2, [pc, #108]	; (8003f28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d013      	beq.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a1a      	ldr	r2, [pc, #104]	; (8003f2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d00e      	beq.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a18      	ldr	r2, [pc, #96]	; (8003f30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d009      	beq.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a17      	ldr	r2, [pc, #92]	; (8003f34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d004      	beq.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a15      	ldr	r2, [pc, #84]	; (8003f38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d10c      	bne.n	8003f00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40010000 	.word	0x40010000
 8003f24:	40000400 	.word	0x40000400
 8003f28:	40000800 	.word	0x40000800
 8003f2c:	40000c00 	.word	0x40000c00
 8003f30:	40010400 	.word	0x40010400
 8003f34:	40014000 	.word	0x40014000
 8003f38:	40001800 	.word	0x40001800

08003f3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e03f      	b.n	8003ff6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d106      	bne.n	8003f90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7fd f810 	bl	8000fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2224      	movs	r2, #36	; 0x24
 8003f94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fa6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f90b 	bl	80041c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	691a      	ldr	r2, [r3, #16]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	695a      	ldr	r2, [r3, #20]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68da      	ldr	r2, [r3, #12]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b088      	sub	sp, #32
 8004002:	af02      	add	r7, sp, #8
 8004004:	60f8      	str	r0, [r7, #12]
 8004006:	60b9      	str	r1, [r7, #8]
 8004008:	603b      	str	r3, [r7, #0]
 800400a:	4613      	mov	r3, r2
 800400c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800400e:	2300      	movs	r3, #0
 8004010:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b20      	cmp	r3, #32
 800401c:	f040 8083 	bne.w	8004126 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <HAL_UART_Transmit+0x2e>
 8004026:	88fb      	ldrh	r3, [r7, #6]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d101      	bne.n	8004030 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e07b      	b.n	8004128 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004036:	2b01      	cmp	r3, #1
 8004038:	d101      	bne.n	800403e <HAL_UART_Transmit+0x40>
 800403a:	2302      	movs	r3, #2
 800403c:	e074      	b.n	8004128 <HAL_UART_Transmit+0x12a>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2221      	movs	r2, #33	; 0x21
 8004050:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004054:	f7fd fdb6 	bl	8001bc4 <HAL_GetTick>
 8004058:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	88fa      	ldrh	r2, [r7, #6]
 800405e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	88fa      	ldrh	r2, [r7, #6]
 8004064:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800406e:	e042      	b.n	80040f6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004074:	b29b      	uxth	r3, r3
 8004076:	3b01      	subs	r3, #1
 8004078:	b29a      	uxth	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004086:	d122      	bne.n	80040ce <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	2200      	movs	r2, #0
 8004090:	2180      	movs	r1, #128	; 0x80
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f000 f84c 	bl	8004130 <UART_WaitOnFlagUntilTimeout>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e042      	b.n	8004128 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	461a      	mov	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040b4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d103      	bne.n	80040c6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	3302      	adds	r3, #2
 80040c2:	60bb      	str	r3, [r7, #8]
 80040c4:	e017      	b.n	80040f6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	3301      	adds	r3, #1
 80040ca:	60bb      	str	r3, [r7, #8]
 80040cc:	e013      	b.n	80040f6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	2200      	movs	r2, #0
 80040d6:	2180      	movs	r1, #128	; 0x80
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 f829 	bl	8004130 <UART_WaitOnFlagUntilTimeout>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e01f      	b.n	8004128 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	60ba      	str	r2, [r7, #8]
 80040ee:	781a      	ldrb	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1b7      	bne.n	8004070 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	2200      	movs	r2, #0
 8004108:	2140      	movs	r1, #64	; 0x40
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f000 f810 	bl	8004130 <UART_WaitOnFlagUntilTimeout>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e006      	b.n	8004128 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2220      	movs	r2, #32
 800411e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	e000      	b.n	8004128 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004126:	2302      	movs	r3, #2
  }
}
 8004128:	4618      	mov	r0, r3
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	603b      	str	r3, [r7, #0]
 800413c:	4613      	mov	r3, r2
 800413e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004140:	e02c      	b.n	800419c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004148:	d028      	beq.n	800419c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d007      	beq.n	8004160 <UART_WaitOnFlagUntilTimeout+0x30>
 8004150:	f7fd fd38 	bl	8001bc4 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	429a      	cmp	r2, r3
 800415e:	d21d      	bcs.n	800419c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68da      	ldr	r2, [r3, #12]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800416e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	695a      	ldr	r2, [r3, #20]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0201 	bic.w	r2, r2, #1
 800417e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2220      	movs	r2, #32
 8004184:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2220      	movs	r2, #32
 800418c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e00f      	b.n	80041bc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	4013      	ands	r3, r2
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	bf0c      	ite	eq
 80041ac:	2301      	moveq	r3, #1
 80041ae:	2300      	movne	r3, #0
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	461a      	mov	r2, r3
 80041b4:	79fb      	ldrb	r3, [r7, #7]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d0c3      	beq.n	8004142 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c8:	b085      	sub	sp, #20
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68da      	ldr	r2, [r3, #12]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004206:	f023 030c 	bic.w	r3, r3, #12
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6812      	ldr	r2, [r2, #0]
 800420e:	68f9      	ldr	r1, [r7, #12]
 8004210:	430b      	orrs	r3, r1
 8004212:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699a      	ldr	r2, [r3, #24]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004232:	f040 818b 	bne.w	800454c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4ac1      	ldr	r2, [pc, #772]	; (8004540 <UART_SetConfig+0x37c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d005      	beq.n	800424c <UART_SetConfig+0x88>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4abf      	ldr	r2, [pc, #764]	; (8004544 <UART_SetConfig+0x380>)
 8004246:	4293      	cmp	r3, r2
 8004248:	f040 80bd 	bne.w	80043c6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800424c:	f7fe fcec 	bl	8002c28 <HAL_RCC_GetPCLK2Freq>
 8004250:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	461d      	mov	r5, r3
 8004256:	f04f 0600 	mov.w	r6, #0
 800425a:	46a8      	mov	r8, r5
 800425c:	46b1      	mov	r9, r6
 800425e:	eb18 0308 	adds.w	r3, r8, r8
 8004262:	eb49 0409 	adc.w	r4, r9, r9
 8004266:	4698      	mov	r8, r3
 8004268:	46a1      	mov	r9, r4
 800426a:	eb18 0805 	adds.w	r8, r8, r5
 800426e:	eb49 0906 	adc.w	r9, r9, r6
 8004272:	f04f 0100 	mov.w	r1, #0
 8004276:	f04f 0200 	mov.w	r2, #0
 800427a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800427e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004282:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004286:	4688      	mov	r8, r1
 8004288:	4691      	mov	r9, r2
 800428a:	eb18 0005 	adds.w	r0, r8, r5
 800428e:	eb49 0106 	adc.w	r1, r9, r6
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	461d      	mov	r5, r3
 8004298:	f04f 0600 	mov.w	r6, #0
 800429c:	196b      	adds	r3, r5, r5
 800429e:	eb46 0406 	adc.w	r4, r6, r6
 80042a2:	461a      	mov	r2, r3
 80042a4:	4623      	mov	r3, r4
 80042a6:	f7fb ffeb 	bl	8000280 <__aeabi_uldivmod>
 80042aa:	4603      	mov	r3, r0
 80042ac:	460c      	mov	r4, r1
 80042ae:	461a      	mov	r2, r3
 80042b0:	4ba5      	ldr	r3, [pc, #660]	; (8004548 <UART_SetConfig+0x384>)
 80042b2:	fba3 2302 	umull	r2, r3, r3, r2
 80042b6:	095b      	lsrs	r3, r3, #5
 80042b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	461d      	mov	r5, r3
 80042c0:	f04f 0600 	mov.w	r6, #0
 80042c4:	46a9      	mov	r9, r5
 80042c6:	46b2      	mov	sl, r6
 80042c8:	eb19 0309 	adds.w	r3, r9, r9
 80042cc:	eb4a 040a 	adc.w	r4, sl, sl
 80042d0:	4699      	mov	r9, r3
 80042d2:	46a2      	mov	sl, r4
 80042d4:	eb19 0905 	adds.w	r9, r9, r5
 80042d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80042dc:	f04f 0100 	mov.w	r1, #0
 80042e0:	f04f 0200 	mov.w	r2, #0
 80042e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042f0:	4689      	mov	r9, r1
 80042f2:	4692      	mov	sl, r2
 80042f4:	eb19 0005 	adds.w	r0, r9, r5
 80042f8:	eb4a 0106 	adc.w	r1, sl, r6
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	461d      	mov	r5, r3
 8004302:	f04f 0600 	mov.w	r6, #0
 8004306:	196b      	adds	r3, r5, r5
 8004308:	eb46 0406 	adc.w	r4, r6, r6
 800430c:	461a      	mov	r2, r3
 800430e:	4623      	mov	r3, r4
 8004310:	f7fb ffb6 	bl	8000280 <__aeabi_uldivmod>
 8004314:	4603      	mov	r3, r0
 8004316:	460c      	mov	r4, r1
 8004318:	461a      	mov	r2, r3
 800431a:	4b8b      	ldr	r3, [pc, #556]	; (8004548 <UART_SetConfig+0x384>)
 800431c:	fba3 1302 	umull	r1, r3, r3, r2
 8004320:	095b      	lsrs	r3, r3, #5
 8004322:	2164      	movs	r1, #100	; 0x64
 8004324:	fb01 f303 	mul.w	r3, r1, r3
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	3332      	adds	r3, #50	; 0x32
 800432e:	4a86      	ldr	r2, [pc, #536]	; (8004548 <UART_SetConfig+0x384>)
 8004330:	fba2 2303 	umull	r2, r3, r2, r3
 8004334:	095b      	lsrs	r3, r3, #5
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800433c:	4498      	add	r8, r3
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	461d      	mov	r5, r3
 8004342:	f04f 0600 	mov.w	r6, #0
 8004346:	46a9      	mov	r9, r5
 8004348:	46b2      	mov	sl, r6
 800434a:	eb19 0309 	adds.w	r3, r9, r9
 800434e:	eb4a 040a 	adc.w	r4, sl, sl
 8004352:	4699      	mov	r9, r3
 8004354:	46a2      	mov	sl, r4
 8004356:	eb19 0905 	adds.w	r9, r9, r5
 800435a:	eb4a 0a06 	adc.w	sl, sl, r6
 800435e:	f04f 0100 	mov.w	r1, #0
 8004362:	f04f 0200 	mov.w	r2, #0
 8004366:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800436a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800436e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004372:	4689      	mov	r9, r1
 8004374:	4692      	mov	sl, r2
 8004376:	eb19 0005 	adds.w	r0, r9, r5
 800437a:	eb4a 0106 	adc.w	r1, sl, r6
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	461d      	mov	r5, r3
 8004384:	f04f 0600 	mov.w	r6, #0
 8004388:	196b      	adds	r3, r5, r5
 800438a:	eb46 0406 	adc.w	r4, r6, r6
 800438e:	461a      	mov	r2, r3
 8004390:	4623      	mov	r3, r4
 8004392:	f7fb ff75 	bl	8000280 <__aeabi_uldivmod>
 8004396:	4603      	mov	r3, r0
 8004398:	460c      	mov	r4, r1
 800439a:	461a      	mov	r2, r3
 800439c:	4b6a      	ldr	r3, [pc, #424]	; (8004548 <UART_SetConfig+0x384>)
 800439e:	fba3 1302 	umull	r1, r3, r3, r2
 80043a2:	095b      	lsrs	r3, r3, #5
 80043a4:	2164      	movs	r1, #100	; 0x64
 80043a6:	fb01 f303 	mul.w	r3, r1, r3
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	3332      	adds	r3, #50	; 0x32
 80043b0:	4a65      	ldr	r2, [pc, #404]	; (8004548 <UART_SetConfig+0x384>)
 80043b2:	fba2 2303 	umull	r2, r3, r2, r3
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	f003 0207 	and.w	r2, r3, #7
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4442      	add	r2, r8
 80043c2:	609a      	str	r2, [r3, #8]
 80043c4:	e26f      	b.n	80048a6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043c6:	f7fe fc1b 	bl	8002c00 <HAL_RCC_GetPCLK1Freq>
 80043ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	461d      	mov	r5, r3
 80043d0:	f04f 0600 	mov.w	r6, #0
 80043d4:	46a8      	mov	r8, r5
 80043d6:	46b1      	mov	r9, r6
 80043d8:	eb18 0308 	adds.w	r3, r8, r8
 80043dc:	eb49 0409 	adc.w	r4, r9, r9
 80043e0:	4698      	mov	r8, r3
 80043e2:	46a1      	mov	r9, r4
 80043e4:	eb18 0805 	adds.w	r8, r8, r5
 80043e8:	eb49 0906 	adc.w	r9, r9, r6
 80043ec:	f04f 0100 	mov.w	r1, #0
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80043f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80043fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004400:	4688      	mov	r8, r1
 8004402:	4691      	mov	r9, r2
 8004404:	eb18 0005 	adds.w	r0, r8, r5
 8004408:	eb49 0106 	adc.w	r1, r9, r6
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	461d      	mov	r5, r3
 8004412:	f04f 0600 	mov.w	r6, #0
 8004416:	196b      	adds	r3, r5, r5
 8004418:	eb46 0406 	adc.w	r4, r6, r6
 800441c:	461a      	mov	r2, r3
 800441e:	4623      	mov	r3, r4
 8004420:	f7fb ff2e 	bl	8000280 <__aeabi_uldivmod>
 8004424:	4603      	mov	r3, r0
 8004426:	460c      	mov	r4, r1
 8004428:	461a      	mov	r2, r3
 800442a:	4b47      	ldr	r3, [pc, #284]	; (8004548 <UART_SetConfig+0x384>)
 800442c:	fba3 2302 	umull	r2, r3, r3, r2
 8004430:	095b      	lsrs	r3, r3, #5
 8004432:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	461d      	mov	r5, r3
 800443a:	f04f 0600 	mov.w	r6, #0
 800443e:	46a9      	mov	r9, r5
 8004440:	46b2      	mov	sl, r6
 8004442:	eb19 0309 	adds.w	r3, r9, r9
 8004446:	eb4a 040a 	adc.w	r4, sl, sl
 800444a:	4699      	mov	r9, r3
 800444c:	46a2      	mov	sl, r4
 800444e:	eb19 0905 	adds.w	r9, r9, r5
 8004452:	eb4a 0a06 	adc.w	sl, sl, r6
 8004456:	f04f 0100 	mov.w	r1, #0
 800445a:	f04f 0200 	mov.w	r2, #0
 800445e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004462:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004466:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800446a:	4689      	mov	r9, r1
 800446c:	4692      	mov	sl, r2
 800446e:	eb19 0005 	adds.w	r0, r9, r5
 8004472:	eb4a 0106 	adc.w	r1, sl, r6
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	461d      	mov	r5, r3
 800447c:	f04f 0600 	mov.w	r6, #0
 8004480:	196b      	adds	r3, r5, r5
 8004482:	eb46 0406 	adc.w	r4, r6, r6
 8004486:	461a      	mov	r2, r3
 8004488:	4623      	mov	r3, r4
 800448a:	f7fb fef9 	bl	8000280 <__aeabi_uldivmod>
 800448e:	4603      	mov	r3, r0
 8004490:	460c      	mov	r4, r1
 8004492:	461a      	mov	r2, r3
 8004494:	4b2c      	ldr	r3, [pc, #176]	; (8004548 <UART_SetConfig+0x384>)
 8004496:	fba3 1302 	umull	r1, r3, r3, r2
 800449a:	095b      	lsrs	r3, r3, #5
 800449c:	2164      	movs	r1, #100	; 0x64
 800449e:	fb01 f303 	mul.w	r3, r1, r3
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	3332      	adds	r3, #50	; 0x32
 80044a8:	4a27      	ldr	r2, [pc, #156]	; (8004548 <UART_SetConfig+0x384>)
 80044aa:	fba2 2303 	umull	r2, r3, r2, r3
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044b6:	4498      	add	r8, r3
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	461d      	mov	r5, r3
 80044bc:	f04f 0600 	mov.w	r6, #0
 80044c0:	46a9      	mov	r9, r5
 80044c2:	46b2      	mov	sl, r6
 80044c4:	eb19 0309 	adds.w	r3, r9, r9
 80044c8:	eb4a 040a 	adc.w	r4, sl, sl
 80044cc:	4699      	mov	r9, r3
 80044ce:	46a2      	mov	sl, r4
 80044d0:	eb19 0905 	adds.w	r9, r9, r5
 80044d4:	eb4a 0a06 	adc.w	sl, sl, r6
 80044d8:	f04f 0100 	mov.w	r1, #0
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044ec:	4689      	mov	r9, r1
 80044ee:	4692      	mov	sl, r2
 80044f0:	eb19 0005 	adds.w	r0, r9, r5
 80044f4:	eb4a 0106 	adc.w	r1, sl, r6
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	461d      	mov	r5, r3
 80044fe:	f04f 0600 	mov.w	r6, #0
 8004502:	196b      	adds	r3, r5, r5
 8004504:	eb46 0406 	adc.w	r4, r6, r6
 8004508:	461a      	mov	r2, r3
 800450a:	4623      	mov	r3, r4
 800450c:	f7fb feb8 	bl	8000280 <__aeabi_uldivmod>
 8004510:	4603      	mov	r3, r0
 8004512:	460c      	mov	r4, r1
 8004514:	461a      	mov	r2, r3
 8004516:	4b0c      	ldr	r3, [pc, #48]	; (8004548 <UART_SetConfig+0x384>)
 8004518:	fba3 1302 	umull	r1, r3, r3, r2
 800451c:	095b      	lsrs	r3, r3, #5
 800451e:	2164      	movs	r1, #100	; 0x64
 8004520:	fb01 f303 	mul.w	r3, r1, r3
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	3332      	adds	r3, #50	; 0x32
 800452a:	4a07      	ldr	r2, [pc, #28]	; (8004548 <UART_SetConfig+0x384>)
 800452c:	fba2 2303 	umull	r2, r3, r2, r3
 8004530:	095b      	lsrs	r3, r3, #5
 8004532:	f003 0207 	and.w	r2, r3, #7
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4442      	add	r2, r8
 800453c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800453e:	e1b2      	b.n	80048a6 <UART_SetConfig+0x6e2>
 8004540:	40011000 	.word	0x40011000
 8004544:	40011400 	.word	0x40011400
 8004548:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4ad7      	ldr	r2, [pc, #860]	; (80048b0 <UART_SetConfig+0x6ec>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d005      	beq.n	8004562 <UART_SetConfig+0x39e>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4ad6      	ldr	r2, [pc, #856]	; (80048b4 <UART_SetConfig+0x6f0>)
 800455c:	4293      	cmp	r3, r2
 800455e:	f040 80d1 	bne.w	8004704 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004562:	f7fe fb61 	bl	8002c28 <HAL_RCC_GetPCLK2Freq>
 8004566:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	469a      	mov	sl, r3
 800456c:	f04f 0b00 	mov.w	fp, #0
 8004570:	46d0      	mov	r8, sl
 8004572:	46d9      	mov	r9, fp
 8004574:	eb18 0308 	adds.w	r3, r8, r8
 8004578:	eb49 0409 	adc.w	r4, r9, r9
 800457c:	4698      	mov	r8, r3
 800457e:	46a1      	mov	r9, r4
 8004580:	eb18 080a 	adds.w	r8, r8, sl
 8004584:	eb49 090b 	adc.w	r9, r9, fp
 8004588:	f04f 0100 	mov.w	r1, #0
 800458c:	f04f 0200 	mov.w	r2, #0
 8004590:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004594:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004598:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800459c:	4688      	mov	r8, r1
 800459e:	4691      	mov	r9, r2
 80045a0:	eb1a 0508 	adds.w	r5, sl, r8
 80045a4:	eb4b 0609 	adc.w	r6, fp, r9
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	4619      	mov	r1, r3
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	f04f 0300 	mov.w	r3, #0
 80045b6:	f04f 0400 	mov.w	r4, #0
 80045ba:	0094      	lsls	r4, r2, #2
 80045bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045c0:	008b      	lsls	r3, r1, #2
 80045c2:	461a      	mov	r2, r3
 80045c4:	4623      	mov	r3, r4
 80045c6:	4628      	mov	r0, r5
 80045c8:	4631      	mov	r1, r6
 80045ca:	f7fb fe59 	bl	8000280 <__aeabi_uldivmod>
 80045ce:	4603      	mov	r3, r0
 80045d0:	460c      	mov	r4, r1
 80045d2:	461a      	mov	r2, r3
 80045d4:	4bb8      	ldr	r3, [pc, #736]	; (80048b8 <UART_SetConfig+0x6f4>)
 80045d6:	fba3 2302 	umull	r2, r3, r3, r2
 80045da:	095b      	lsrs	r3, r3, #5
 80045dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	469b      	mov	fp, r3
 80045e4:	f04f 0c00 	mov.w	ip, #0
 80045e8:	46d9      	mov	r9, fp
 80045ea:	46e2      	mov	sl, ip
 80045ec:	eb19 0309 	adds.w	r3, r9, r9
 80045f0:	eb4a 040a 	adc.w	r4, sl, sl
 80045f4:	4699      	mov	r9, r3
 80045f6:	46a2      	mov	sl, r4
 80045f8:	eb19 090b 	adds.w	r9, r9, fp
 80045fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004600:	f04f 0100 	mov.w	r1, #0
 8004604:	f04f 0200 	mov.w	r2, #0
 8004608:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800460c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004610:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004614:	4689      	mov	r9, r1
 8004616:	4692      	mov	sl, r2
 8004618:	eb1b 0509 	adds.w	r5, fp, r9
 800461c:	eb4c 060a 	adc.w	r6, ip, sl
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	4619      	mov	r1, r3
 8004626:	f04f 0200 	mov.w	r2, #0
 800462a:	f04f 0300 	mov.w	r3, #0
 800462e:	f04f 0400 	mov.w	r4, #0
 8004632:	0094      	lsls	r4, r2, #2
 8004634:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004638:	008b      	lsls	r3, r1, #2
 800463a:	461a      	mov	r2, r3
 800463c:	4623      	mov	r3, r4
 800463e:	4628      	mov	r0, r5
 8004640:	4631      	mov	r1, r6
 8004642:	f7fb fe1d 	bl	8000280 <__aeabi_uldivmod>
 8004646:	4603      	mov	r3, r0
 8004648:	460c      	mov	r4, r1
 800464a:	461a      	mov	r2, r3
 800464c:	4b9a      	ldr	r3, [pc, #616]	; (80048b8 <UART_SetConfig+0x6f4>)
 800464e:	fba3 1302 	umull	r1, r3, r3, r2
 8004652:	095b      	lsrs	r3, r3, #5
 8004654:	2164      	movs	r1, #100	; 0x64
 8004656:	fb01 f303 	mul.w	r3, r1, r3
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	011b      	lsls	r3, r3, #4
 800465e:	3332      	adds	r3, #50	; 0x32
 8004660:	4a95      	ldr	r2, [pc, #596]	; (80048b8 <UART_SetConfig+0x6f4>)
 8004662:	fba2 2303 	umull	r2, r3, r2, r3
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800466c:	4498      	add	r8, r3
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	469b      	mov	fp, r3
 8004672:	f04f 0c00 	mov.w	ip, #0
 8004676:	46d9      	mov	r9, fp
 8004678:	46e2      	mov	sl, ip
 800467a:	eb19 0309 	adds.w	r3, r9, r9
 800467e:	eb4a 040a 	adc.w	r4, sl, sl
 8004682:	4699      	mov	r9, r3
 8004684:	46a2      	mov	sl, r4
 8004686:	eb19 090b 	adds.w	r9, r9, fp
 800468a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800468e:	f04f 0100 	mov.w	r1, #0
 8004692:	f04f 0200 	mov.w	r2, #0
 8004696:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800469a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800469e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046a2:	4689      	mov	r9, r1
 80046a4:	4692      	mov	sl, r2
 80046a6:	eb1b 0509 	adds.w	r5, fp, r9
 80046aa:	eb4c 060a 	adc.w	r6, ip, sl
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	4619      	mov	r1, r3
 80046b4:	f04f 0200 	mov.w	r2, #0
 80046b8:	f04f 0300 	mov.w	r3, #0
 80046bc:	f04f 0400 	mov.w	r4, #0
 80046c0:	0094      	lsls	r4, r2, #2
 80046c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046c6:	008b      	lsls	r3, r1, #2
 80046c8:	461a      	mov	r2, r3
 80046ca:	4623      	mov	r3, r4
 80046cc:	4628      	mov	r0, r5
 80046ce:	4631      	mov	r1, r6
 80046d0:	f7fb fdd6 	bl	8000280 <__aeabi_uldivmod>
 80046d4:	4603      	mov	r3, r0
 80046d6:	460c      	mov	r4, r1
 80046d8:	461a      	mov	r2, r3
 80046da:	4b77      	ldr	r3, [pc, #476]	; (80048b8 <UART_SetConfig+0x6f4>)
 80046dc:	fba3 1302 	umull	r1, r3, r3, r2
 80046e0:	095b      	lsrs	r3, r3, #5
 80046e2:	2164      	movs	r1, #100	; 0x64
 80046e4:	fb01 f303 	mul.w	r3, r1, r3
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	011b      	lsls	r3, r3, #4
 80046ec:	3332      	adds	r3, #50	; 0x32
 80046ee:	4a72      	ldr	r2, [pc, #456]	; (80048b8 <UART_SetConfig+0x6f4>)
 80046f0:	fba2 2303 	umull	r2, r3, r2, r3
 80046f4:	095b      	lsrs	r3, r3, #5
 80046f6:	f003 020f 	and.w	r2, r3, #15
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4442      	add	r2, r8
 8004700:	609a      	str	r2, [r3, #8]
 8004702:	e0d0      	b.n	80048a6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004704:	f7fe fa7c 	bl	8002c00 <HAL_RCC_GetPCLK1Freq>
 8004708:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	469a      	mov	sl, r3
 800470e:	f04f 0b00 	mov.w	fp, #0
 8004712:	46d0      	mov	r8, sl
 8004714:	46d9      	mov	r9, fp
 8004716:	eb18 0308 	adds.w	r3, r8, r8
 800471a:	eb49 0409 	adc.w	r4, r9, r9
 800471e:	4698      	mov	r8, r3
 8004720:	46a1      	mov	r9, r4
 8004722:	eb18 080a 	adds.w	r8, r8, sl
 8004726:	eb49 090b 	adc.w	r9, r9, fp
 800472a:	f04f 0100 	mov.w	r1, #0
 800472e:	f04f 0200 	mov.w	r2, #0
 8004732:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004736:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800473a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800473e:	4688      	mov	r8, r1
 8004740:	4691      	mov	r9, r2
 8004742:	eb1a 0508 	adds.w	r5, sl, r8
 8004746:	eb4b 0609 	adc.w	r6, fp, r9
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	4619      	mov	r1, r3
 8004750:	f04f 0200 	mov.w	r2, #0
 8004754:	f04f 0300 	mov.w	r3, #0
 8004758:	f04f 0400 	mov.w	r4, #0
 800475c:	0094      	lsls	r4, r2, #2
 800475e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004762:	008b      	lsls	r3, r1, #2
 8004764:	461a      	mov	r2, r3
 8004766:	4623      	mov	r3, r4
 8004768:	4628      	mov	r0, r5
 800476a:	4631      	mov	r1, r6
 800476c:	f7fb fd88 	bl	8000280 <__aeabi_uldivmod>
 8004770:	4603      	mov	r3, r0
 8004772:	460c      	mov	r4, r1
 8004774:	461a      	mov	r2, r3
 8004776:	4b50      	ldr	r3, [pc, #320]	; (80048b8 <UART_SetConfig+0x6f4>)
 8004778:	fba3 2302 	umull	r2, r3, r3, r2
 800477c:	095b      	lsrs	r3, r3, #5
 800477e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	469b      	mov	fp, r3
 8004786:	f04f 0c00 	mov.w	ip, #0
 800478a:	46d9      	mov	r9, fp
 800478c:	46e2      	mov	sl, ip
 800478e:	eb19 0309 	adds.w	r3, r9, r9
 8004792:	eb4a 040a 	adc.w	r4, sl, sl
 8004796:	4699      	mov	r9, r3
 8004798:	46a2      	mov	sl, r4
 800479a:	eb19 090b 	adds.w	r9, r9, fp
 800479e:	eb4a 0a0c 	adc.w	sl, sl, ip
 80047a2:	f04f 0100 	mov.w	r1, #0
 80047a6:	f04f 0200 	mov.w	r2, #0
 80047aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047b6:	4689      	mov	r9, r1
 80047b8:	4692      	mov	sl, r2
 80047ba:	eb1b 0509 	adds.w	r5, fp, r9
 80047be:	eb4c 060a 	adc.w	r6, ip, sl
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	4619      	mov	r1, r3
 80047c8:	f04f 0200 	mov.w	r2, #0
 80047cc:	f04f 0300 	mov.w	r3, #0
 80047d0:	f04f 0400 	mov.w	r4, #0
 80047d4:	0094      	lsls	r4, r2, #2
 80047d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80047da:	008b      	lsls	r3, r1, #2
 80047dc:	461a      	mov	r2, r3
 80047de:	4623      	mov	r3, r4
 80047e0:	4628      	mov	r0, r5
 80047e2:	4631      	mov	r1, r6
 80047e4:	f7fb fd4c 	bl	8000280 <__aeabi_uldivmod>
 80047e8:	4603      	mov	r3, r0
 80047ea:	460c      	mov	r4, r1
 80047ec:	461a      	mov	r2, r3
 80047ee:	4b32      	ldr	r3, [pc, #200]	; (80048b8 <UART_SetConfig+0x6f4>)
 80047f0:	fba3 1302 	umull	r1, r3, r3, r2
 80047f4:	095b      	lsrs	r3, r3, #5
 80047f6:	2164      	movs	r1, #100	; 0x64
 80047f8:	fb01 f303 	mul.w	r3, r1, r3
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	3332      	adds	r3, #50	; 0x32
 8004802:	4a2d      	ldr	r2, [pc, #180]	; (80048b8 <UART_SetConfig+0x6f4>)
 8004804:	fba2 2303 	umull	r2, r3, r2, r3
 8004808:	095b      	lsrs	r3, r3, #5
 800480a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800480e:	4498      	add	r8, r3
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	469b      	mov	fp, r3
 8004814:	f04f 0c00 	mov.w	ip, #0
 8004818:	46d9      	mov	r9, fp
 800481a:	46e2      	mov	sl, ip
 800481c:	eb19 0309 	adds.w	r3, r9, r9
 8004820:	eb4a 040a 	adc.w	r4, sl, sl
 8004824:	4699      	mov	r9, r3
 8004826:	46a2      	mov	sl, r4
 8004828:	eb19 090b 	adds.w	r9, r9, fp
 800482c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004830:	f04f 0100 	mov.w	r1, #0
 8004834:	f04f 0200 	mov.w	r2, #0
 8004838:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800483c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004840:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004844:	4689      	mov	r9, r1
 8004846:	4692      	mov	sl, r2
 8004848:	eb1b 0509 	adds.w	r5, fp, r9
 800484c:	eb4c 060a 	adc.w	r6, ip, sl
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	4619      	mov	r1, r3
 8004856:	f04f 0200 	mov.w	r2, #0
 800485a:	f04f 0300 	mov.w	r3, #0
 800485e:	f04f 0400 	mov.w	r4, #0
 8004862:	0094      	lsls	r4, r2, #2
 8004864:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004868:	008b      	lsls	r3, r1, #2
 800486a:	461a      	mov	r2, r3
 800486c:	4623      	mov	r3, r4
 800486e:	4628      	mov	r0, r5
 8004870:	4631      	mov	r1, r6
 8004872:	f7fb fd05 	bl	8000280 <__aeabi_uldivmod>
 8004876:	4603      	mov	r3, r0
 8004878:	460c      	mov	r4, r1
 800487a:	461a      	mov	r2, r3
 800487c:	4b0e      	ldr	r3, [pc, #56]	; (80048b8 <UART_SetConfig+0x6f4>)
 800487e:	fba3 1302 	umull	r1, r3, r3, r2
 8004882:	095b      	lsrs	r3, r3, #5
 8004884:	2164      	movs	r1, #100	; 0x64
 8004886:	fb01 f303 	mul.w	r3, r1, r3
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	011b      	lsls	r3, r3, #4
 800488e:	3332      	adds	r3, #50	; 0x32
 8004890:	4a09      	ldr	r2, [pc, #36]	; (80048b8 <UART_SetConfig+0x6f4>)
 8004892:	fba2 2303 	umull	r2, r3, r2, r3
 8004896:	095b      	lsrs	r3, r3, #5
 8004898:	f003 020f 	and.w	r2, r3, #15
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4442      	add	r2, r8
 80048a2:	609a      	str	r2, [r3, #8]
}
 80048a4:	e7ff      	b.n	80048a6 <UART_SetConfig+0x6e2>
 80048a6:	bf00      	nop
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048b0:	40011000 	.word	0x40011000
 80048b4:	40011400 	.word	0x40011400
 80048b8:	51eb851f 	.word	0x51eb851f

080048bc <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80048c4:	4b22      	ldr	r3, [pc, #136]	; (8004950 <WIZCHIP_READ+0x94>)
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	4798      	blx	r3
   WIZCHIP.CS._select();
 80048ca:	4b21      	ldr	r3, [pc, #132]	; (8004950 <WIZCHIP_READ+0x94>)
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80048d0:	4b1f      	ldr	r3, [pc, #124]	; (8004950 <WIZCHIP_READ+0x94>)
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d003      	beq.n	80048e0 <WIZCHIP_READ+0x24>
 80048d8:	4b1d      	ldr	r3, [pc, #116]	; (8004950 <WIZCHIP_READ+0x94>)
 80048da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d114      	bne.n	800490a <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80048e0:	4b1b      	ldr	r3, [pc, #108]	; (8004950 <WIZCHIP_READ+0x94>)
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	0c12      	lsrs	r2, r2, #16
 80048e8:	b2d2      	uxtb	r2, r2
 80048ea:	4610      	mov	r0, r2
 80048ec:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80048ee:	4b18      	ldr	r3, [pc, #96]	; (8004950 <WIZCHIP_READ+0x94>)
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	0a12      	lsrs	r2, r2, #8
 80048f6:	b2d2      	uxtb	r2, r2
 80048f8:	4610      	mov	r0, r2
 80048fa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80048fc:	4b14      	ldr	r3, [pc, #80]	; (8004950 <WIZCHIP_READ+0x94>)
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	4610      	mov	r0, r2
 8004906:	4798      	blx	r3
 8004908:	e011      	b.n	800492e <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	0c1b      	lsrs	r3, r3, #16
 800490e:	b2db      	uxtb	r3, r3
 8004910:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	0a1b      	lsrs	r3, r3, #8
 8004916:	b2db      	uxtb	r3, r3
 8004918:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	b2db      	uxtb	r3, r3
 800491e:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004920:	4b0b      	ldr	r3, [pc, #44]	; (8004950 <WIZCHIP_READ+0x94>)
 8004922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004924:	f107 020c 	add.w	r2, r7, #12
 8004928:	2103      	movs	r1, #3
 800492a:	4610      	mov	r0, r2
 800492c:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800492e:	4b08      	ldr	r3, [pc, #32]	; (8004950 <WIZCHIP_READ+0x94>)
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	4798      	blx	r3
 8004934:	4603      	mov	r3, r0
 8004936:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8004938:	4b05      	ldr	r3, [pc, #20]	; (8004950 <WIZCHIP_READ+0x94>)
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800493e:	4b04      	ldr	r3, [pc, #16]	; (8004950 <WIZCHIP_READ+0x94>)
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	4798      	blx	r3
   return ret;
 8004944:	7bfb      	ldrb	r3, [r7, #15]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	2000015c 	.word	0x2000015c

08004954 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	460b      	mov	r3, r1
 800495e:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8004960:	4b22      	ldr	r3, [pc, #136]	; (80049ec <WIZCHIP_WRITE+0x98>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004966:	4b21      	ldr	r3, [pc, #132]	; (80049ec <WIZCHIP_WRITE+0x98>)
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f043 0304 	orr.w	r3, r3, #4
 8004972:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004974:	4b1d      	ldr	r3, [pc, #116]	; (80049ec <WIZCHIP_WRITE+0x98>)
 8004976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004978:	2b00      	cmp	r3, #0
 800497a:	d119      	bne.n	80049b0 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800497c:	4b1b      	ldr	r3, [pc, #108]	; (80049ec <WIZCHIP_WRITE+0x98>)
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	0c12      	lsrs	r2, r2, #16
 8004984:	b2d2      	uxtb	r2, r2
 8004986:	4610      	mov	r0, r2
 8004988:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800498a:	4b18      	ldr	r3, [pc, #96]	; (80049ec <WIZCHIP_WRITE+0x98>)
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	0a12      	lsrs	r2, r2, #8
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	4610      	mov	r0, r2
 8004996:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004998:	4b14      	ldr	r3, [pc, #80]	; (80049ec <WIZCHIP_WRITE+0x98>)
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	b2d2      	uxtb	r2, r2
 80049a0:	4610      	mov	r0, r2
 80049a2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80049a4:	4b11      	ldr	r3, [pc, #68]	; (80049ec <WIZCHIP_WRITE+0x98>)
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	78fa      	ldrb	r2, [r7, #3]
 80049aa:	4610      	mov	r0, r2
 80049ac:	4798      	blx	r3
 80049ae:	e013      	b.n	80049d8 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	0c1b      	lsrs	r3, r3, #16
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	0a1b      	lsrs	r3, r3, #8
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80049c6:	78fb      	ldrb	r3, [r7, #3]
 80049c8:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80049ca:	4b08      	ldr	r3, [pc, #32]	; (80049ec <WIZCHIP_WRITE+0x98>)
 80049cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ce:	f107 020c 	add.w	r2, r7, #12
 80049d2:	2104      	movs	r1, #4
 80049d4:	4610      	mov	r0, r2
 80049d6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80049d8:	4b04      	ldr	r3, [pc, #16]	; (80049ec <WIZCHIP_WRITE+0x98>)
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80049de:	4b03      	ldr	r3, [pc, #12]	; (80049ec <WIZCHIP_WRITE+0x98>)
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	4798      	blx	r3
}
 80049e4:	bf00      	nop
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	2000015c 	.word	0x2000015c

080049f0 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80049f0:	b590      	push	{r4, r7, lr}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	4613      	mov	r3, r2
 80049fc:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80049fe:	4b2b      	ldr	r3, [pc, #172]	; (8004aac <WIZCHIP_READ_BUF+0xbc>)
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004a04:	4b29      	ldr	r3, [pc, #164]	; (8004aac <WIZCHIP_READ_BUF+0xbc>)
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004a0a:	4b28      	ldr	r3, [pc, #160]	; (8004aac <WIZCHIP_READ_BUF+0xbc>)
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <WIZCHIP_READ_BUF+0x2a>
 8004a12:	4b26      	ldr	r3, [pc, #152]	; (8004aac <WIZCHIP_READ_BUF+0xbc>)
 8004a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d126      	bne.n	8004a68 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004a1a:	4b24      	ldr	r3, [pc, #144]	; (8004aac <WIZCHIP_READ_BUF+0xbc>)
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	0c12      	lsrs	r2, r2, #16
 8004a22:	b2d2      	uxtb	r2, r2
 8004a24:	4610      	mov	r0, r2
 8004a26:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004a28:	4b20      	ldr	r3, [pc, #128]	; (8004aac <WIZCHIP_READ_BUF+0xbc>)
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	0a12      	lsrs	r2, r2, #8
 8004a30:	b2d2      	uxtb	r2, r2
 8004a32:	4610      	mov	r0, r2
 8004a34:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004a36:	4b1d      	ldr	r3, [pc, #116]	; (8004aac <WIZCHIP_READ_BUF+0xbc>)
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	b2d2      	uxtb	r2, r2
 8004a3e:	4610      	mov	r0, r2
 8004a40:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004a42:	2300      	movs	r3, #0
 8004a44:	82fb      	strh	r3, [r7, #22]
 8004a46:	e00a      	b.n	8004a5e <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8004a48:	4b18      	ldr	r3, [pc, #96]	; (8004aac <WIZCHIP_READ_BUF+0xbc>)
 8004a4a:	69db      	ldr	r3, [r3, #28]
 8004a4c:	8afa      	ldrh	r2, [r7, #22]
 8004a4e:	68b9      	ldr	r1, [r7, #8]
 8004a50:	188c      	adds	r4, r1, r2
 8004a52:	4798      	blx	r3
 8004a54:	4603      	mov	r3, r0
 8004a56:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8004a58:	8afb      	ldrh	r3, [r7, #22]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	82fb      	strh	r3, [r7, #22]
 8004a5e:	8afa      	ldrh	r2, [r7, #22]
 8004a60:	88fb      	ldrh	r3, [r7, #6]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d3f0      	bcc.n	8004a48 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004a66:	e017      	b.n	8004a98 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	0c1b      	lsrs	r3, r3, #16
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	0a1b      	lsrs	r3, r3, #8
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004a7e:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <WIZCHIP_READ_BUF+0xbc>)
 8004a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a82:	f107 0210 	add.w	r2, r7, #16
 8004a86:	2103      	movs	r1, #3
 8004a88:	4610      	mov	r0, r2
 8004a8a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8004a8c:	4b07      	ldr	r3, [pc, #28]	; (8004aac <WIZCHIP_READ_BUF+0xbc>)
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	88fa      	ldrh	r2, [r7, #6]
 8004a92:	4611      	mov	r1, r2
 8004a94:	68b8      	ldr	r0, [r7, #8]
 8004a96:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004a98:	4b04      	ldr	r3, [pc, #16]	; (8004aac <WIZCHIP_READ_BUF+0xbc>)
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004a9e:	4b03      	ldr	r3, [pc, #12]	; (8004aac <WIZCHIP_READ_BUF+0xbc>)
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	4798      	blx	r3
}
 8004aa4:	bf00      	nop
 8004aa6:	371c      	adds	r7, #28
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd90      	pop	{r4, r7, pc}
 8004aac:	2000015c 	.word	0x2000015c

08004ab0 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	4613      	mov	r3, r2
 8004abc:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8004abe:	4b2b      	ldr	r3, [pc, #172]	; (8004b6c <WIZCHIP_WRITE_BUF+0xbc>)
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004ac4:	4b29      	ldr	r3, [pc, #164]	; (8004b6c <WIZCHIP_WRITE_BUF+0xbc>)
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f043 0304 	orr.w	r3, r3, #4
 8004ad0:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004ad2:	4b26      	ldr	r3, [pc, #152]	; (8004b6c <WIZCHIP_WRITE_BUF+0xbc>)
 8004ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d126      	bne.n	8004b28 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004ada:	4b24      	ldr	r3, [pc, #144]	; (8004b6c <WIZCHIP_WRITE_BUF+0xbc>)
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	0c12      	lsrs	r2, r2, #16
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	4610      	mov	r0, r2
 8004ae6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004ae8:	4b20      	ldr	r3, [pc, #128]	; (8004b6c <WIZCHIP_WRITE_BUF+0xbc>)
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	0a12      	lsrs	r2, r2, #8
 8004af0:	b2d2      	uxtb	r2, r2
 8004af2:	4610      	mov	r0, r2
 8004af4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004af6:	4b1d      	ldr	r3, [pc, #116]	; (8004b6c <WIZCHIP_WRITE_BUF+0xbc>)
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	b2d2      	uxtb	r2, r2
 8004afe:	4610      	mov	r0, r2
 8004b00:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004b02:	2300      	movs	r3, #0
 8004b04:	82fb      	strh	r3, [r7, #22]
 8004b06:	e00a      	b.n	8004b1e <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8004b08:	4b18      	ldr	r3, [pc, #96]	; (8004b6c <WIZCHIP_WRITE_BUF+0xbc>)
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	8afa      	ldrh	r2, [r7, #22]
 8004b0e:	68b9      	ldr	r1, [r7, #8]
 8004b10:	440a      	add	r2, r1
 8004b12:	7812      	ldrb	r2, [r2, #0]
 8004b14:	4610      	mov	r0, r2
 8004b16:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004b18:	8afb      	ldrh	r3, [r7, #22]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	82fb      	strh	r3, [r7, #22]
 8004b1e:	8afa      	ldrh	r2, [r7, #22]
 8004b20:	88fb      	ldrh	r3, [r7, #6]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d3f0      	bcc.n	8004b08 <WIZCHIP_WRITE_BUF+0x58>
 8004b26:	e017      	b.n	8004b58 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	0c1b      	lsrs	r3, r3, #16
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	0a1b      	lsrs	r3, r3, #8
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	74bb      	strb	r3, [r7, #18]
//		HAL_SPI_Transmit_DMA(&hspi1, spi_data, 3);
//		HAL_SPI_Transmit_DMA(&hspi1, pBuf, len );
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004b3e:	4b0b      	ldr	r3, [pc, #44]	; (8004b6c <WIZCHIP_WRITE_BUF+0xbc>)
 8004b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b42:	f107 0210 	add.w	r2, r7, #16
 8004b46:	2103      	movs	r1, #3
 8004b48:	4610      	mov	r0, r2
 8004b4a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8004b4c:	4b07      	ldr	r3, [pc, #28]	; (8004b6c <WIZCHIP_WRITE_BUF+0xbc>)
 8004b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b50:	88fa      	ldrh	r2, [r7, #6]
 8004b52:	4611      	mov	r1, r2
 8004b54:	68b8      	ldr	r0, [r7, #8]
 8004b56:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004b58:	4b04      	ldr	r3, [pc, #16]	; (8004b6c <WIZCHIP_WRITE_BUF+0xbc>)
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004b5e:	4b03      	ldr	r3, [pc, #12]	; (8004b6c <WIZCHIP_WRITE_BUF+0xbc>)
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	4798      	blx	r3
}
 8004b64:	bf00      	nop
 8004b66:	3718      	adds	r7, #24
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	2000015c 	.word	0x2000015c

08004b70 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8004b70:	b590      	push	{r4, r7, lr}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	4603      	mov	r3, r0
 8004b78:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	81fb      	strh	r3, [r7, #14]
 8004b7e:	2300      	movs	r3, #0
 8004b80:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8004b82:	79fb      	ldrb	r3, [r7, #7]
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	3301      	adds	r3, #1
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff fe94 	bl	80048bc <WIZCHIP_READ>
 8004b94:	4603      	mov	r3, r0
 8004b96:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8004b98:	89bb      	ldrh	r3, [r7, #12]
 8004b9a:	021b      	lsls	r3, r3, #8
 8004b9c:	b29c      	uxth	r4, r3
 8004b9e:	79fb      	ldrb	r3, [r7, #7]
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	00db      	lsls	r3, r3, #3
 8004ba6:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff fe86 	bl	80048bc <WIZCHIP_READ>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	4423      	add	r3, r4
 8004bb6:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8004bb8:	89bb      	ldrh	r3, [r7, #12]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d01a      	beq.n	8004bf4 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8004bbe:	79fb      	ldrb	r3, [r7, #7]
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	00db      	lsls	r3, r3, #3
 8004bc6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7ff fe76 	bl	80048bc <WIZCHIP_READ>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8004bd4:	89fb      	ldrh	r3, [r7, #14]
 8004bd6:	021b      	lsls	r3, r3, #8
 8004bd8:	b29c      	uxth	r4, r3
 8004bda:	79fb      	ldrb	r3, [r7, #7]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	3301      	adds	r3, #1
 8004be0:	00db      	lsls	r3, r3, #3
 8004be2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff fe68 	bl	80048bc <WIZCHIP_READ>
 8004bec:	4603      	mov	r3, r0
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	4423      	add	r3, r4
 8004bf2:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8004bf4:	89fa      	ldrh	r2, [r7, #14]
 8004bf6:	89bb      	ldrh	r3, [r7, #12]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d1c2      	bne.n	8004b82 <getSn_TX_FSR+0x12>
   return val;
 8004bfc:	89fb      	ldrh	r3, [r7, #14]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd90      	pop	{r4, r7, pc}

08004c06 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8004c06:	b590      	push	{r4, r7, lr}
 8004c08:	b085      	sub	sp, #20
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8004c10:	2300      	movs	r3, #0
 8004c12:	81fb      	strh	r3, [r7, #14]
 8004c14:	2300      	movs	r3, #0
 8004c16:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8004c18:	79fb      	ldrb	r3, [r7, #7]
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7ff fe49 	bl	80048bc <WIZCHIP_READ>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8004c2e:	89bb      	ldrh	r3, [r7, #12]
 8004c30:	021b      	lsls	r3, r3, #8
 8004c32:	b29c      	uxth	r4, r3
 8004c34:	79fb      	ldrb	r3, [r7, #7]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	3301      	adds	r3, #1
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7ff fe3b 	bl	80048bc <WIZCHIP_READ>
 8004c46:	4603      	mov	r3, r0
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	4423      	add	r3, r4
 8004c4c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8004c4e:	89bb      	ldrh	r3, [r7, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d01a      	beq.n	8004c8a <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8004c54:	79fb      	ldrb	r3, [r7, #7]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	3301      	adds	r3, #1
 8004c5a:	00db      	lsls	r3, r3, #3
 8004c5c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7ff fe2b 	bl	80048bc <WIZCHIP_READ>
 8004c66:	4603      	mov	r3, r0
 8004c68:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8004c6a:	89fb      	ldrh	r3, [r7, #14]
 8004c6c:	021b      	lsls	r3, r3, #8
 8004c6e:	b29c      	uxth	r4, r3
 8004c70:	79fb      	ldrb	r3, [r7, #7]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	3301      	adds	r3, #1
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7ff fe1d 	bl	80048bc <WIZCHIP_READ>
 8004c82:	4603      	mov	r3, r0
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	4423      	add	r3, r4
 8004c88:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8004c8a:	89fa      	ldrh	r2, [r7, #14]
 8004c8c:	89bb      	ldrh	r3, [r7, #12]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d1c2      	bne.n	8004c18 <getSn_RX_RSR+0x12>
   return val;
 8004c92:	89fb      	ldrh	r3, [r7, #14]
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd90      	pop	{r4, r7, pc}

08004c9c <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8004c9c:	b590      	push	{r4, r7, lr}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	6039      	str	r1, [r7, #0]
 8004ca6:	71fb      	strb	r3, [r7, #7]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8004cac:	2300      	movs	r3, #0
 8004cae:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8004cb4:	88bb      	ldrh	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d048      	beq.n	8004d4c <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8004cba:	79fb      	ldrb	r3, [r7, #7]
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	00db      	lsls	r3, r3, #3
 8004cc2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7ff fdf8 	bl	80048bc <WIZCHIP_READ>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	021b      	lsls	r3, r3, #8
 8004cd2:	b29c      	uxth	r4, r3
 8004cd4:	79fb      	ldrb	r3, [r7, #7]
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	3301      	adds	r3, #1
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7ff fdeb 	bl	80048bc <WIZCHIP_READ>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	4423      	add	r3, r4
 8004cec:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8004cee:	89fb      	ldrh	r3, [r7, #14]
 8004cf0:	021b      	lsls	r3, r3, #8
 8004cf2:	79fa      	ldrb	r2, [r7, #7]
 8004cf4:	0092      	lsls	r2, r2, #2
 8004cf6:	3202      	adds	r2, #2
 8004cf8:	00d2      	lsls	r2, r2, #3
 8004cfa:	4413      	add	r3, r2
 8004cfc:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8004cfe:	88bb      	ldrh	r3, [r7, #4]
 8004d00:	461a      	mov	r2, r3
 8004d02:	6839      	ldr	r1, [r7, #0]
 8004d04:	68b8      	ldr	r0, [r7, #8]
 8004d06:	f7ff fed3 	bl	8004ab0 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8004d0a:	89fa      	ldrh	r2, [r7, #14]
 8004d0c:	88bb      	ldrh	r3, [r7, #4]
 8004d0e:	4413      	add	r3, r2
 8004d10:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8004d12:	79fb      	ldrb	r3, [r7, #7]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	3301      	adds	r3, #1
 8004d18:	00db      	lsls	r3, r3, #3
 8004d1a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004d1e:	461a      	mov	r2, r3
 8004d20:	89fb      	ldrh	r3, [r7, #14]
 8004d22:	0a1b      	lsrs	r3, r3, #8
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	4619      	mov	r1, r3
 8004d2a:	4610      	mov	r0, r2
 8004d2c:	f7ff fe12 	bl	8004954 <WIZCHIP_WRITE>
 8004d30:	79fb      	ldrb	r3, [r7, #7]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	3301      	adds	r3, #1
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	89fb      	ldrh	r3, [r7, #14]
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	4619      	mov	r1, r3
 8004d44:	4610      	mov	r0, r2
 8004d46:	f7ff fe05 	bl	8004954 <WIZCHIP_WRITE>
 8004d4a:	e000      	b.n	8004d4e <wiz_send_data+0xb2>
   if(len == 0)  return;
 8004d4c:	bf00      	nop
}
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd90      	pop	{r4, r7, pc}

08004d54 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8004d54:	b590      	push	{r4, r7, lr}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	6039      	str	r1, [r7, #0]
 8004d5e:	71fb      	strb	r3, [r7, #7]
 8004d60:	4613      	mov	r3, r2
 8004d62:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8004d64:	2300      	movs	r3, #0
 8004d66:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8004d6c:	88bb      	ldrh	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d048      	beq.n	8004e04 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8004d72:	79fb      	ldrb	r3, [r7, #7]
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	3301      	adds	r3, #1
 8004d78:	00db      	lsls	r3, r3, #3
 8004d7a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7ff fd9c 	bl	80048bc <WIZCHIP_READ>
 8004d84:	4603      	mov	r3, r0
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	021b      	lsls	r3, r3, #8
 8004d8a:	b29c      	uxth	r4, r3
 8004d8c:	79fb      	ldrb	r3, [r7, #7]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	3301      	adds	r3, #1
 8004d92:	00db      	lsls	r3, r3, #3
 8004d94:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7ff fd8f 	bl	80048bc <WIZCHIP_READ>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	4423      	add	r3, r4
 8004da4:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8004da6:	89fb      	ldrh	r3, [r7, #14]
 8004da8:	021b      	lsls	r3, r3, #8
 8004daa:	79fa      	ldrb	r2, [r7, #7]
 8004dac:	0092      	lsls	r2, r2, #2
 8004dae:	3203      	adds	r2, #3
 8004db0:	00d2      	lsls	r2, r2, #3
 8004db2:	4413      	add	r3, r2
 8004db4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8004db6:	88bb      	ldrh	r3, [r7, #4]
 8004db8:	461a      	mov	r2, r3
 8004dba:	6839      	ldr	r1, [r7, #0]
 8004dbc:	68b8      	ldr	r0, [r7, #8]
 8004dbe:	f7ff fe17 	bl	80049f0 <WIZCHIP_READ_BUF>
   ptr += len;
 8004dc2:	89fa      	ldrh	r2, [r7, #14]
 8004dc4:	88bb      	ldrh	r3, [r7, #4]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8004dca:	79fb      	ldrb	r3, [r7, #7]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	3301      	adds	r3, #1
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	89fb      	ldrh	r3, [r7, #14]
 8004dda:	0a1b      	lsrs	r3, r3, #8
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	4619      	mov	r1, r3
 8004de2:	4610      	mov	r0, r2
 8004de4:	f7ff fdb6 	bl	8004954 <WIZCHIP_WRITE>
 8004de8:	79fb      	ldrb	r3, [r7, #7]
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	3301      	adds	r3, #1
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8004df4:	461a      	mov	r2, r3
 8004df6:	89fb      	ldrh	r3, [r7, #14]
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	4610      	mov	r0, r2
 8004dfe:	f7ff fda9 	bl	8004954 <WIZCHIP_WRITE>
 8004e02:	e000      	b.n	8004e06 <wiz_recv_data+0xb2>
   if(len == 0) return;
 8004e04:	bf00      	nop
}
 8004e06:	3714      	adds	r7, #20
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd90      	pop	{r4, r7, pc}

08004e0c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8004e0c:	b590      	push	{r4, r7, lr}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	4604      	mov	r4, r0
 8004e14:	4608      	mov	r0, r1
 8004e16:	4611      	mov	r1, r2
 8004e18:	461a      	mov	r2, r3
 8004e1a:	4623      	mov	r3, r4
 8004e1c:	71fb      	strb	r3, [r7, #7]
 8004e1e:	4603      	mov	r3, r0
 8004e20:	71bb      	strb	r3, [r7, #6]
 8004e22:	460b      	mov	r3, r1
 8004e24:	80bb      	strh	r3, [r7, #4]
 8004e26:	4613      	mov	r3, r2
 8004e28:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8004e2a:	79fb      	ldrb	r3, [r7, #7]
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d902      	bls.n	8004e36 <socket+0x2a>
 8004e30:	f04f 33ff 	mov.w	r3, #4294967295
 8004e34:	e0f1      	b.n	800501a <socket+0x20e>
	switch(protocol)
 8004e36:	79bb      	ldrb	r3, [r7, #6]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d004      	beq.n	8004e46 <socket+0x3a>
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	db10      	blt.n	8004e62 <socket+0x56>
 8004e40:	2b04      	cmp	r3, #4
 8004e42:	dc0e      	bgt.n	8004e62 <socket+0x56>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8004e44:	e010      	b.n	8004e68 <socket+0x5c>
            getSIPR((uint8_t*)&taddr);
 8004e46:	f107 030c 	add.w	r3, r7, #12
 8004e4a:	2204      	movs	r2, #4
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004e52:	f7ff fdcd 	bl	80049f0 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d105      	bne.n	8004e68 <socket+0x5c>
 8004e5c:	f06f 0302 	mvn.w	r3, #2
 8004e60:	e0db      	b.n	800501a <socket+0x20e>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8004e62:	f06f 0304 	mvn.w	r3, #4
 8004e66:	e0d8      	b.n	800501a <socket+0x20e>
         break;
 8004e68:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8004e6a:	78fb      	ldrb	r3, [r7, #3]
 8004e6c:	f003 0304 	and.w	r3, r3, #4
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d002      	beq.n	8004e7a <socket+0x6e>
 8004e74:	f06f 0305 	mvn.w	r3, #5
 8004e78:	e0cf      	b.n	800501a <socket+0x20e>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8004e7a:	78fb      	ldrb	r3, [r7, #3]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d025      	beq.n	8004ecc <socket+0xc0>
	{
   	switch(protocol)
 8004e80:	79bb      	ldrb	r3, [r7, #6]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d002      	beq.n	8004e8c <socket+0x80>
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d008      	beq.n	8004e9c <socket+0x90>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8004e8a:	e024      	b.n	8004ed6 <socket+0xca>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8004e8c:	78fb      	ldrb	r3, [r7, #3]
 8004e8e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d11c      	bne.n	8004ed0 <socket+0xc4>
 8004e96:	f06f 0305 	mvn.w	r3, #5
 8004e9a:	e0be      	b.n	800501a <socket+0x20e>
   	      if(flag & SF_IGMP_VER2)
 8004e9c:	78fb      	ldrb	r3, [r7, #3]
 8004e9e:	f003 0320 	and.w	r3, r3, #32
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d006      	beq.n	8004eb4 <socket+0xa8>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8004ea6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	db02      	blt.n	8004eb4 <socket+0xa8>
 8004eae:	f06f 0305 	mvn.w	r3, #5
 8004eb2:	e0b2      	b.n	800501a <socket+0x20e>
      	      if(flag & SF_UNI_BLOCK)
 8004eb4:	78fb      	ldrb	r3, [r7, #3]
 8004eb6:	f003 0310 	and.w	r3, r3, #16
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00a      	beq.n	8004ed4 <socket+0xc8>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8004ebe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	db06      	blt.n	8004ed4 <socket+0xc8>
 8004ec6:	f06f 0305 	mvn.w	r3, #5
 8004eca:	e0a6      	b.n	800501a <socket+0x20e>
   	}
   }
 8004ecc:	bf00      	nop
 8004ece:	e002      	b.n	8004ed6 <socket+0xca>
   	      break;
 8004ed0:	bf00      	nop
 8004ed2:	e000      	b.n	8004ed6 <socket+0xca>
   	      break;
 8004ed4:	bf00      	nop
	close(sn);
 8004ed6:	79fb      	ldrb	r3, [r7, #7]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 f8ad 	bl	8005038 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8004ede:	79fb      	ldrb	r3, [r7, #7]
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	00db      	lsls	r3, r3, #3
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004eec:	f023 030f 	bic.w	r3, r3, #15
 8004ef0:	b25a      	sxtb	r2, r3
 8004ef2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	b25b      	sxtb	r3, r3
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	4619      	mov	r1, r3
 8004efe:	f7ff fd29 	bl	8004954 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8004f02:	88bb      	ldrh	r3, [r7, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d110      	bne.n	8004f2a <socket+0x11e>
	{
	   port = sock_any_port++;
 8004f08:	4b46      	ldr	r3, [pc, #280]	; (8005024 <socket+0x218>)
 8004f0a:	881b      	ldrh	r3, [r3, #0]
 8004f0c:	1c5a      	adds	r2, r3, #1
 8004f0e:	b291      	uxth	r1, r2
 8004f10:	4a44      	ldr	r2, [pc, #272]	; (8005024 <socket+0x218>)
 8004f12:	8011      	strh	r1, [r2, #0]
 8004f14:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8004f16:	4b43      	ldr	r3, [pc, #268]	; (8005024 <socket+0x218>)
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d103      	bne.n	8004f2a <socket+0x11e>
 8004f22:	4b40      	ldr	r3, [pc, #256]	; (8005024 <socket+0x218>)
 8004f24:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8004f28:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8004f2a:	79fb      	ldrb	r3, [r7, #7]
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	3301      	adds	r3, #1
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f36:	461a      	mov	r2, r3
 8004f38:	88bb      	ldrh	r3, [r7, #4]
 8004f3a:	0a1b      	lsrs	r3, r3, #8
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	4619      	mov	r1, r3
 8004f42:	4610      	mov	r0, r2
 8004f44:	f7ff fd06 	bl	8004954 <WIZCHIP_WRITE>
 8004f48:	79fb      	ldrb	r3, [r7, #7]
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f54:	461a      	mov	r2, r3
 8004f56:	88bb      	ldrh	r3, [r7, #4]
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	4610      	mov	r0, r2
 8004f5e:	f7ff fcf9 	bl	8004954 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8004f62:	79fb      	ldrb	r3, [r7, #7]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	3301      	adds	r3, #1
 8004f68:	00db      	lsls	r3, r3, #3
 8004f6a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004f6e:	2101      	movs	r1, #1
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7ff fcef 	bl	8004954 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8004f76:	bf00      	nop
 8004f78:	79fb      	ldrb	r3, [r7, #7]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7ff fc99 	bl	80048bc <WIZCHIP_READ>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1f3      	bne.n	8004f78 <socket+0x16c>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8004f90:	79fb      	ldrb	r3, [r7, #7]
 8004f92:	2201      	movs	r2, #1
 8004f94:	fa02 f303 	lsl.w	r3, r2, r3
 8004f98:	b21b      	sxth	r3, r3
 8004f9a:	43db      	mvns	r3, r3
 8004f9c:	b21a      	sxth	r2, r3
 8004f9e:	4b22      	ldr	r3, [pc, #136]	; (8005028 <socket+0x21c>)
 8004fa0:	881b      	ldrh	r3, [r3, #0]
 8004fa2:	b21b      	sxth	r3, r3
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	b21b      	sxth	r3, r3
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	4b1f      	ldr	r3, [pc, #124]	; (8005028 <socket+0x21c>)
 8004fac:	801a      	strh	r2, [r3, #0]

	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);
 8004fae:	78fb      	ldrb	r3, [r7, #3]
 8004fb0:	f003 0201 	and.w	r2, r3, #1
 8004fb4:	79fb      	ldrb	r3, [r7, #7]
 8004fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fba:	b21a      	sxth	r2, r3
 8004fbc:	4b1a      	ldr	r3, [pc, #104]	; (8005028 <socket+0x21c>)
 8004fbe:	881b      	ldrh	r3, [r3, #0]
 8004fc0:	b21b      	sxth	r3, r3
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	b21b      	sxth	r3, r3
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	4b17      	ldr	r3, [pc, #92]	; (8005028 <socket+0x21c>)
 8004fca:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8004fcc:	79fb      	ldrb	r3, [r7, #7]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd4:	b21b      	sxth	r3, r3
 8004fd6:	43db      	mvns	r3, r3
 8004fd8:	b21a      	sxth	r2, r3
 8004fda:	4b14      	ldr	r3, [pc, #80]	; (800502c <socket+0x220>)
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	b21b      	sxth	r3, r3
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	b21b      	sxth	r3, r3
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	4b11      	ldr	r3, [pc, #68]	; (800502c <socket+0x220>)
 8004fe8:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8004fea:	79fb      	ldrb	r3, [r7, #7]
 8004fec:	4a10      	ldr	r2, [pc, #64]	; (8005030 <socket+0x224>)
 8004fee:	2100      	movs	r1, #0
 8004ff0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8004ff4:	79fb      	ldrb	r3, [r7, #7]
 8004ff6:	4a0f      	ldr	r2, [pc, #60]	; (8005034 <socket+0x228>)
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8004ffc:	bf00      	nop
 8004ffe:	79fb      	ldrb	r3, [r7, #7]
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	3301      	adds	r3, #1
 8005004:	00db      	lsls	r3, r3, #3
 8005006:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800500a:	4618      	mov	r0, r3
 800500c:	f7ff fc56 	bl	80048bc <WIZCHIP_READ>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d0f3      	beq.n	8004ffe <socket+0x1f2>
   return (int8_t)sn;
 8005016:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 800501a:	4618      	mov	r0, r3
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	bd90      	pop	{r4, r7, pc}
 8005022:	bf00      	nop
 8005024:	2000015a 	.word	0x2000015a
 8005028:	20000318 	.word	0x20000318
 800502c:	2000031a 	.word	0x2000031a
 8005030:	2000031c 	.word	0x2000031c
 8005034:	2000032c 	.word	0x2000032c

08005038 <close>:

int8_t close(uint8_t sn)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	4603      	mov	r3, r0
 8005040:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8005042:	79fb      	ldrb	r3, [r7, #7]
 8005044:	2b08      	cmp	r3, #8
 8005046:	d902      	bls.n	800504e <close+0x16>
 8005048:	f04f 33ff 	mov.w	r3, #4294967295
 800504c:	e055      	b.n	80050fa <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };
#endif
	setSn_CR(sn,Sn_CR_CLOSE);
 800504e:	79fb      	ldrb	r3, [r7, #7]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	3301      	adds	r3, #1
 8005054:	00db      	lsls	r3, r3, #3
 8005056:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800505a:	2110      	movs	r1, #16
 800505c:	4618      	mov	r0, r3
 800505e:	f7ff fc79 	bl	8004954 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8005062:	bf00      	nop
 8005064:	79fb      	ldrb	r3, [r7, #7]
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	3301      	adds	r3, #1
 800506a:	00db      	lsls	r3, r3, #3
 800506c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005070:	4618      	mov	r0, r3
 8005072:	f7ff fc23 	bl	80048bc <WIZCHIP_READ>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1f3      	bne.n	8005064 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 800507c:	79fb      	ldrb	r3, [r7, #7]
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	3301      	adds	r3, #1
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005088:	211f      	movs	r1, #31
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff fc62 	bl	8004954 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8005090:	79fb      	ldrb	r3, [r7, #7]
 8005092:	2201      	movs	r2, #1
 8005094:	fa02 f303 	lsl.w	r3, r2, r3
 8005098:	b21b      	sxth	r3, r3
 800509a:	43db      	mvns	r3, r3
 800509c:	b21a      	sxth	r2, r3
 800509e:	4b19      	ldr	r3, [pc, #100]	; (8005104 <close+0xcc>)
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	b21b      	sxth	r3, r3
 80050a4:	4013      	ands	r3, r2
 80050a6:	b21b      	sxth	r3, r3
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	4b16      	ldr	r3, [pc, #88]	; (8005104 <close+0xcc>)
 80050ac:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80050ae:	79fb      	ldrb	r3, [r7, #7]
 80050b0:	2201      	movs	r2, #1
 80050b2:	fa02 f303 	lsl.w	r3, r2, r3
 80050b6:	b21b      	sxth	r3, r3
 80050b8:	43db      	mvns	r3, r3
 80050ba:	b21a      	sxth	r2, r3
 80050bc:	4b12      	ldr	r3, [pc, #72]	; (8005108 <close+0xd0>)
 80050be:	881b      	ldrh	r3, [r3, #0]
 80050c0:	b21b      	sxth	r3, r3
 80050c2:	4013      	ands	r3, r2
 80050c4:	b21b      	sxth	r3, r3
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	4b0f      	ldr	r3, [pc, #60]	; (8005108 <close+0xd0>)
 80050ca:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 80050cc:	79fb      	ldrb	r3, [r7, #7]
 80050ce:	4a0f      	ldr	r2, [pc, #60]	; (800510c <close+0xd4>)
 80050d0:	2100      	movs	r1, #0
 80050d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 80050d6:	79fb      	ldrb	r3, [r7, #7]
 80050d8:	4a0d      	ldr	r2, [pc, #52]	; (8005110 <close+0xd8>)
 80050da:	2100      	movs	r1, #0
 80050dc:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 80050de:	bf00      	nop
 80050e0:	79fb      	ldrb	r3, [r7, #7]
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	3301      	adds	r3, #1
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7ff fbe5 	bl	80048bc <WIZCHIP_READ>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1f3      	bne.n	80050e0 <close+0xa8>
	return SOCK_OK;
 80050f8:	2301      	movs	r3, #1
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	20000318 	.word	0x20000318
 8005108:	2000031a 	.word	0x2000031a
 800510c:	2000031c 	.word	0x2000031c
 8005110:	2000032c 	.word	0x2000032c

08005114 <listen>:

int8_t listen(uint8_t sn)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	4603      	mov	r3, r0
 800511c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800511e:	79fb      	ldrb	r3, [r7, #7]
 8005120:	2b08      	cmp	r3, #8
 8005122:	d902      	bls.n	800512a <listen+0x16>
 8005124:	f04f 33ff 	mov.w	r3, #4294967295
 8005128:	e049      	b.n	80051be <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800512a:	79fb      	ldrb	r3, [r7, #7]
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	3301      	adds	r3, #1
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	4618      	mov	r0, r3
 8005134:	f7ff fbc2 	bl	80048bc <WIZCHIP_READ>
 8005138:	4603      	mov	r3, r0
 800513a:	f003 030f 	and.w	r3, r3, #15
 800513e:	2b01      	cmp	r3, #1
 8005140:	d002      	beq.n	8005148 <listen+0x34>
 8005142:	f06f 0304 	mvn.w	r3, #4
 8005146:	e03a      	b.n	80051be <listen+0xaa>
	CHECK_SOCKINIT();
 8005148:	79fb      	ldrb	r3, [r7, #7]
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	3301      	adds	r3, #1
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005154:	4618      	mov	r0, r3
 8005156:	f7ff fbb1 	bl	80048bc <WIZCHIP_READ>
 800515a:	4603      	mov	r3, r0
 800515c:	2b13      	cmp	r3, #19
 800515e:	d002      	beq.n	8005166 <listen+0x52>
 8005160:	f06f 0302 	mvn.w	r3, #2
 8005164:	e02b      	b.n	80051be <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8005166:	79fb      	ldrb	r3, [r7, #7]
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	3301      	adds	r3, #1
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005172:	2102      	movs	r1, #2
 8005174:	4618      	mov	r0, r3
 8005176:	f7ff fbed 	bl	8004954 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 800517a:	bf00      	nop
 800517c:	79fb      	ldrb	r3, [r7, #7]
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	3301      	adds	r3, #1
 8005182:	00db      	lsls	r3, r3, #3
 8005184:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005188:	4618      	mov	r0, r3
 800518a:	f7ff fb97 	bl	80048bc <WIZCHIP_READ>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1f3      	bne.n	800517c <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8005194:	e006      	b.n	80051a4 <listen+0x90>
   {
         close(sn);
 8005196:	79fb      	ldrb	r3, [r7, #7]
 8005198:	4618      	mov	r0, r3
 800519a:	f7ff ff4d 	bl	8005038 <close>
         return SOCKERR_SOCKCLOSED;
 800519e:	f06f 0303 	mvn.w	r3, #3
 80051a2:	e00c      	b.n	80051be <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80051a4:	79fb      	ldrb	r3, [r7, #7]
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	3301      	adds	r3, #1
 80051aa:	00db      	lsls	r3, r3, #3
 80051ac:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7ff fb83 	bl	80048bc <WIZCHIP_READ>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b14      	cmp	r3, #20
 80051ba:	d1ec      	bne.n	8005196 <listen+0x82>
   }
   return SOCK_OK;
 80051bc:	2301      	movs	r3, #1
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3708      	adds	r7, #8
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
	...

080051c8 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	4603      	mov	r3, r0
 80051d0:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 80051d2:	79fb      	ldrb	r3, [r7, #7]
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d902      	bls.n	80051de <disconnect+0x16>
 80051d8:	f04f 33ff 	mov.w	r3, #4294967295
 80051dc:	e062      	b.n	80052a4 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80051de:	79fb      	ldrb	r3, [r7, #7]
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	3301      	adds	r3, #1
 80051e4:	00db      	lsls	r3, r3, #3
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7ff fb68 	bl	80048bc <WIZCHIP_READ>
 80051ec:	4603      	mov	r3, r0
 80051ee:	f003 030f 	and.w	r3, r3, #15
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d002      	beq.n	80051fc <disconnect+0x34>
 80051f6:	f06f 0304 	mvn.w	r3, #4
 80051fa:	e053      	b.n	80052a4 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 80051fc:	79fb      	ldrb	r3, [r7, #7]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	3301      	adds	r3, #1
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005208:	2108      	movs	r1, #8
 800520a:	4618      	mov	r0, r3
 800520c:	f7ff fba2 	bl	8004954 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8005210:	bf00      	nop
 8005212:	79fb      	ldrb	r3, [r7, #7]
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	3301      	adds	r3, #1
 8005218:	00db      	lsls	r3, r3, #3
 800521a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800521e:	4618      	mov	r0, r3
 8005220:	f7ff fb4c 	bl	80048bc <WIZCHIP_READ>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1f3      	bne.n	8005212 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 800522a:	79fb      	ldrb	r3, [r7, #7]
 800522c:	2201      	movs	r2, #1
 800522e:	fa02 f303 	lsl.w	r3, r2, r3
 8005232:	b21b      	sxth	r3, r3
 8005234:	43db      	mvns	r3, r3
 8005236:	b21a      	sxth	r2, r3
 8005238:	4b1c      	ldr	r3, [pc, #112]	; (80052ac <disconnect+0xe4>)
 800523a:	881b      	ldrh	r3, [r3, #0]
 800523c:	b21b      	sxth	r3, r3
 800523e:	4013      	ands	r3, r2
 8005240:	b21b      	sxth	r3, r3
 8005242:	b29a      	uxth	r2, r3
 8005244:	4b19      	ldr	r3, [pc, #100]	; (80052ac <disconnect+0xe4>)
 8005246:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8005248:	4b19      	ldr	r3, [pc, #100]	; (80052b0 <disconnect+0xe8>)
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	461a      	mov	r2, r3
 800524e:	79fb      	ldrb	r3, [r7, #7]
 8005250:	fa42 f303 	asr.w	r3, r2, r3
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	2b00      	cmp	r3, #0
 800525a:	d016      	beq.n	800528a <disconnect+0xc2>
 800525c:	2300      	movs	r3, #0
 800525e:	e021      	b.n	80052a4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8005260:	79fb      	ldrb	r3, [r7, #7]
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	3301      	adds	r3, #1
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800526c:	4618      	mov	r0, r3
 800526e:	f7ff fb25 	bl	80048bc <WIZCHIP_READ>
 8005272:	4603      	mov	r3, r0
 8005274:	f003 0308 	and.w	r3, r3, #8
 8005278:	2b00      	cmp	r3, #0
 800527a:	d006      	beq.n	800528a <disconnect+0xc2>
	   {
	      close(sn);
 800527c:	79fb      	ldrb	r3, [r7, #7]
 800527e:	4618      	mov	r0, r3
 8005280:	f7ff feda 	bl	8005038 <close>
	      return SOCKERR_TIMEOUT;
 8005284:	f06f 030c 	mvn.w	r3, #12
 8005288:	e00c      	b.n	80052a4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 800528a:	79fb      	ldrb	r3, [r7, #7]
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	3301      	adds	r3, #1
 8005290:	00db      	lsls	r3, r3, #3
 8005292:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005296:	4618      	mov	r0, r3
 8005298:	f7ff fb10 	bl	80048bc <WIZCHIP_READ>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1de      	bne.n	8005260 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 80052a2:	2301      	movs	r3, #1
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	2000031a 	.word	0x2000031a
 80052b0:	20000318 	.word	0x20000318

080052b4 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	4603      	mov	r3, r0
 80052bc:	6039      	str	r1, [r7, #0]
 80052be:	71fb      	strb	r3, [r7, #7]
 80052c0:	4613      	mov	r3, r2
 80052c2:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 80052c4:	2300      	movs	r3, #0
 80052c6:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 80052c8:	2300      	movs	r3, #0
 80052ca:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 80052cc:	79fb      	ldrb	r3, [r7, #7]
 80052ce:	2b08      	cmp	r3, #8
 80052d0:	d902      	bls.n	80052d8 <send+0x24>
 80052d2:	f04f 33ff 	mov.w	r3, #4294967295
 80052d6:	e0de      	b.n	8005496 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80052d8:	79fb      	ldrb	r3, [r7, #7]
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	3301      	adds	r3, #1
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7ff faeb 	bl	80048bc <WIZCHIP_READ>
 80052e6:	4603      	mov	r3, r0
 80052e8:	f003 030f 	and.w	r3, r3, #15
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d002      	beq.n	80052f6 <send+0x42>
 80052f0:	f06f 0304 	mvn.w	r3, #4
 80052f4:	e0cf      	b.n	8005496 <send+0x1e2>
   CHECK_SOCKDATA();
 80052f6:	88bb      	ldrh	r3, [r7, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d102      	bne.n	8005302 <send+0x4e>
 80052fc:	f06f 030d 	mvn.w	r3, #13
 8005300:	e0c9      	b.n	8005496 <send+0x1e2>

   tmp = getSn_SR(sn); //������ ��������� ������
 8005302:	79fb      	ldrb	r3, [r7, #7]
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	3301      	adds	r3, #1
 8005308:	00db      	lsls	r3, r3, #3
 800530a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800530e:	4618      	mov	r0, r3
 8005310:	f7ff fad4 	bl	80048bc <WIZCHIP_READ>
 8005314:	4603      	mov	r3, r0
 8005316:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8005318:	7bfb      	ldrb	r3, [r7, #15]
 800531a:	2b17      	cmp	r3, #23
 800531c:	d005      	beq.n	800532a <send+0x76>
 800531e:	7bfb      	ldrb	r3, [r7, #15]
 8005320:	2b1c      	cmp	r3, #28
 8005322:	d002      	beq.n	800532a <send+0x76>
 8005324:	f06f 0306 	mvn.w	r3, #6
 8005328:	e0b5      	b.n	8005496 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 800532a:	4b5d      	ldr	r3, [pc, #372]	; (80054a0 <send+0x1ec>)
 800532c:	881b      	ldrh	r3, [r3, #0]
 800532e:	461a      	mov	r2, r3
 8005330:	79fb      	ldrb	r3, [r7, #7]
 8005332:	fa42 f303 	asr.w	r3, r2, r3
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d039      	beq.n	80053b2 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 800533e:	79fb      	ldrb	r3, [r7, #7]
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	3301      	adds	r3, #1
 8005344:	00db      	lsls	r3, r3, #3
 8005346:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800534a:	4618      	mov	r0, r3
 800534c:	f7ff fab6 	bl	80048bc <WIZCHIP_READ>
 8005350:	4603      	mov	r3, r0
 8005352:	f003 031f 	and.w	r3, r3, #31
 8005356:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8005358:	7bfb      	ldrb	r3, [r7, #15]
 800535a:	f003 0310 	and.w	r3, r3, #16
 800535e:	2b00      	cmp	r3, #0
 8005360:	d019      	beq.n	8005396 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8005362:	79fb      	ldrb	r3, [r7, #7]
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	3301      	adds	r3, #1
 8005368:	00db      	lsls	r3, r3, #3
 800536a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800536e:	2110      	movs	r1, #16
 8005370:	4618      	mov	r0, r3
 8005372:	f7ff faef 	bl	8004954 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);
 8005376:	79fb      	ldrb	r3, [r7, #7]
 8005378:	2201      	movs	r2, #1
 800537a:	fa02 f303 	lsl.w	r3, r2, r3
 800537e:	b21b      	sxth	r3, r3
 8005380:	43db      	mvns	r3, r3
 8005382:	b21a      	sxth	r2, r3
 8005384:	4b46      	ldr	r3, [pc, #280]	; (80054a0 <send+0x1ec>)
 8005386:	881b      	ldrh	r3, [r3, #0]
 8005388:	b21b      	sxth	r3, r3
 800538a:	4013      	ands	r3, r2
 800538c:	b21b      	sxth	r3, r3
 800538e:	b29a      	uxth	r2, r3
 8005390:	4b43      	ldr	r3, [pc, #268]	; (80054a0 <send+0x1ec>)
 8005392:	801a      	strh	r2, [r3, #0]
 8005394:	e00d      	b.n	80053b2 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8005396:	7bfb      	ldrb	r3, [r7, #15]
 8005398:	f003 0308 	and.w	r3, r3, #8
 800539c:	2b00      	cmp	r3, #0
 800539e:	d006      	beq.n	80053ae <send+0xfa>
      {
         close(sn);
 80053a0:	79fb      	ldrb	r3, [r7, #7]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7ff fe48 	bl	8005038 <close>
         return SOCKERR_TIMEOUT;
 80053a8:	f06f 030c 	mvn.w	r3, #12
 80053ac:	e073      	b.n	8005496 <send+0x1e2>
      }
      else return SOCK_BUSY;
 80053ae:	2300      	movs	r3, #0
 80053b0:	e071      	b.n	8005496 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 80053b2:	79fb      	ldrb	r3, [r7, #7]
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	3301      	adds	r3, #1
 80053b8:	00db      	lsls	r3, r3, #3
 80053ba:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80053be:	4618      	mov	r0, r3
 80053c0:	f7ff fa7c 	bl	80048bc <WIZCHIP_READ>
 80053c4:	4603      	mov	r3, r0
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	029b      	lsls	r3, r3, #10
 80053ca:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80053cc:	88ba      	ldrh	r2, [r7, #4]
 80053ce:	89bb      	ldrh	r3, [r7, #12]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d901      	bls.n	80053d8 <send+0x124>
 80053d4:	89bb      	ldrh	r3, [r7, #12]
 80053d6:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80053d8:	79fb      	ldrb	r3, [r7, #7]
 80053da:	4618      	mov	r0, r3
 80053dc:	f7ff fbc8 	bl	8004b70 <getSn_TX_FSR>
 80053e0:	4603      	mov	r3, r0
 80053e2:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80053e4:	79fb      	ldrb	r3, [r7, #7]
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	3301      	adds	r3, #1
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7ff fa63 	bl	80048bc <WIZCHIP_READ>
 80053f6:	4603      	mov	r3, r0
 80053f8:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80053fa:	7bfb      	ldrb	r3, [r7, #15]
 80053fc:	2b17      	cmp	r3, #23
 80053fe:	d009      	beq.n	8005414 <send+0x160>
 8005400:	7bfb      	ldrb	r3, [r7, #15]
 8005402:	2b1c      	cmp	r3, #28
 8005404:	d006      	beq.n	8005414 <send+0x160>
      {
         close(sn);
 8005406:	79fb      	ldrb	r3, [r7, #7]
 8005408:	4618      	mov	r0, r3
 800540a:	f7ff fe15 	bl	8005038 <close>
         return SOCKERR_SOCKSTATUS;
 800540e:	f06f 0306 	mvn.w	r3, #6
 8005412:	e040      	b.n	8005496 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8005414:	4b23      	ldr	r3, [pc, #140]	; (80054a4 <send+0x1f0>)
 8005416:	881b      	ldrh	r3, [r3, #0]
 8005418:	461a      	mov	r2, r3
 800541a:	79fb      	ldrb	r3, [r7, #7]
 800541c:	fa42 f303 	asr.w	r3, r2, r3
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	2b00      	cmp	r3, #0
 8005426:	d005      	beq.n	8005434 <send+0x180>
 8005428:	88ba      	ldrh	r2, [r7, #4]
 800542a:	89bb      	ldrh	r3, [r7, #12]
 800542c:	429a      	cmp	r2, r3
 800542e:	d901      	bls.n	8005434 <send+0x180>
 8005430:	2300      	movs	r3, #0
 8005432:	e030      	b.n	8005496 <send+0x1e2>
      if(len <= freesize) break;
 8005434:	88ba      	ldrh	r2, [r7, #4]
 8005436:	89bb      	ldrh	r3, [r7, #12]
 8005438:	429a      	cmp	r2, r3
 800543a:	d900      	bls.n	800543e <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 800543c:	e7cc      	b.n	80053d8 <send+0x124>
      if(len <= freesize) break;
 800543e:	bf00      	nop
   }

   wiz_send_data(sn, buf, len);
 8005440:	88ba      	ldrh	r2, [r7, #4]
 8005442:	79fb      	ldrb	r3, [r7, #7]
 8005444:	6839      	ldr	r1, [r7, #0]
 8005446:	4618      	mov	r0, r3
 8005448:	f7ff fc28 	bl	8004c9c <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif

   setSn_CR(sn,Sn_CR_SEND);
 800544c:	79fb      	ldrb	r3, [r7, #7]
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	3301      	adds	r3, #1
 8005452:	00db      	lsls	r3, r3, #3
 8005454:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005458:	2120      	movs	r1, #32
 800545a:	4618      	mov	r0, r3
 800545c:	f7ff fa7a 	bl	8004954 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8005460:	bf00      	nop
 8005462:	79fb      	ldrb	r3, [r7, #7]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	3301      	adds	r3, #1
 8005468:	00db      	lsls	r3, r3, #3
 800546a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800546e:	4618      	mov	r0, r3
 8005470:	f7ff fa24 	bl	80048bc <WIZCHIP_READ>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1f3      	bne.n	8005462 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 800547a:	79fb      	ldrb	r3, [r7, #7]
 800547c:	2201      	movs	r2, #1
 800547e:	fa02 f303 	lsl.w	r3, r2, r3
 8005482:	b21a      	sxth	r2, r3
 8005484:	4b06      	ldr	r3, [pc, #24]	; (80054a0 <send+0x1ec>)
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	b21b      	sxth	r3, r3
 800548a:	4313      	orrs	r3, r2
 800548c:	b21b      	sxth	r3, r3
 800548e:	b29a      	uxth	r2, r3
 8005490:	4b03      	ldr	r3, [pc, #12]	; (80054a0 <send+0x1ec>)
 8005492:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8005494:	88bb      	ldrh	r3, [r7, #4]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	2000031a 	.word	0x2000031a
 80054a4:	20000318 	.word	0x20000318

080054a8 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80054a8:	b590      	push	{r4, r7, lr}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	4603      	mov	r3, r0
 80054b0:	6039      	str	r1, [r7, #0]
 80054b2:	71fb      	strb	r3, [r7, #7]
 80054b4:	4613      	mov	r3, r2
 80054b6:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 80054b8:	2300      	movs	r3, #0
 80054ba:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 80054bc:	2300      	movs	r3, #0
 80054be:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 80054c0:	79fb      	ldrb	r3, [r7, #7]
 80054c2:	2b08      	cmp	r3, #8
 80054c4:	d902      	bls.n	80054cc <recv+0x24>
 80054c6:	f04f 33ff 	mov.w	r3, #4294967295
 80054ca:	e09c      	b.n	8005606 <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80054cc:	79fb      	ldrb	r3, [r7, #7]
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	3301      	adds	r3, #1
 80054d2:	00db      	lsls	r3, r3, #3
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7ff f9f1 	bl	80048bc <WIZCHIP_READ>
 80054da:	4603      	mov	r3, r0
 80054dc:	f003 030f 	and.w	r3, r3, #15
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d002      	beq.n	80054ea <recv+0x42>
 80054e4:	f06f 0304 	mvn.w	r3, #4
 80054e8:	e08d      	b.n	8005606 <recv+0x15e>
   CHECK_SOCKDATA();
 80054ea:	88bb      	ldrh	r3, [r7, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d102      	bne.n	80054f6 <recv+0x4e>
 80054f0:	f06f 030d 	mvn.w	r3, #13
 80054f4:	e087      	b.n	8005606 <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 80054f6:	79fb      	ldrb	r3, [r7, #7]
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	3301      	adds	r3, #1
 80054fc:	00db      	lsls	r3, r3, #3
 80054fe:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8005502:	4618      	mov	r0, r3
 8005504:	f7ff f9da 	bl	80048bc <WIZCHIP_READ>
 8005508:	4603      	mov	r3, r0
 800550a:	b29b      	uxth	r3, r3
 800550c:	029b      	lsls	r3, r3, #10
 800550e:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8005510:	89ba      	ldrh	r2, [r7, #12]
 8005512:	88bb      	ldrh	r3, [r7, #4]
 8005514:	429a      	cmp	r2, r3
 8005516:	d201      	bcs.n	800551c <recv+0x74>
 8005518:	89bb      	ldrh	r3, [r7, #12]
 800551a:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 800551c:	79fb      	ldrb	r3, [r7, #7]
 800551e:	4618      	mov	r0, r3
 8005520:	f7ff fb71 	bl	8004c06 <getSn_RX_RSR>
 8005524:	4603      	mov	r3, r0
 8005526:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8005528:	79fb      	ldrb	r3, [r7, #7]
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	3301      	adds	r3, #1
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005534:	4618      	mov	r0, r3
 8005536:	f7ff f9c1 	bl	80048bc <WIZCHIP_READ>
 800553a:	4603      	mov	r3, r0
 800553c:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 800553e:	7bfb      	ldrb	r3, [r7, #15]
 8005540:	2b17      	cmp	r3, #23
 8005542:	d026      	beq.n	8005592 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8005544:	7bfb      	ldrb	r3, [r7, #15]
 8005546:	2b1c      	cmp	r3, #28
 8005548:	d11c      	bne.n	8005584 <recv+0xdc>
            {
               if(recvsize != 0) break;
 800554a:	89bb      	ldrh	r3, [r7, #12]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d133      	bne.n	80055b8 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8005550:	79fb      	ldrb	r3, [r7, #7]
 8005552:	4618      	mov	r0, r3
 8005554:	f7ff fb0c 	bl	8004b70 <getSn_TX_FSR>
 8005558:	4603      	mov	r3, r0
 800555a:	461c      	mov	r4, r3
 800555c:	79fb      	ldrb	r3, [r7, #7]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	3301      	adds	r3, #1
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8005568:	4618      	mov	r0, r3
 800556a:	f7ff f9a7 	bl	80048bc <WIZCHIP_READ>
 800556e:	4603      	mov	r3, r0
 8005570:	029b      	lsls	r3, r3, #10
 8005572:	429c      	cmp	r4, r3
 8005574:	d10d      	bne.n	8005592 <recv+0xea>
               {
                  close(sn);
 8005576:	79fb      	ldrb	r3, [r7, #7]
 8005578:	4618      	mov	r0, r3
 800557a:	f7ff fd5d 	bl	8005038 <close>
                  return SOCKERR_SOCKSTATUS;
 800557e:	f06f 0306 	mvn.w	r3, #6
 8005582:	e040      	b.n	8005606 <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 8005584:	79fb      	ldrb	r3, [r7, #7]
 8005586:	4618      	mov	r0, r3
 8005588:	f7ff fd56 	bl	8005038 <close>
               return SOCKERR_SOCKSTATUS;
 800558c:	f06f 0306 	mvn.w	r3, #6
 8005590:	e039      	b.n	8005606 <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8005592:	4b1f      	ldr	r3, [pc, #124]	; (8005610 <recv+0x168>)
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	461a      	mov	r2, r3
 8005598:	79fb      	ldrb	r3, [r7, #7]
 800559a:	fa42 f303 	asr.w	r3, r2, r3
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d004      	beq.n	80055b0 <recv+0x108>
 80055a6:	89bb      	ldrh	r3, [r7, #12]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d101      	bne.n	80055b0 <recv+0x108>
 80055ac:	2300      	movs	r3, #0
 80055ae:	e02a      	b.n	8005606 <recv+0x15e>
         if(recvsize != 0) break;
 80055b0:	89bb      	ldrh	r3, [r7, #12]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d102      	bne.n	80055bc <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 80055b6:	e7b1      	b.n	800551c <recv+0x74>
               if(recvsize != 0) break;
 80055b8:	bf00      	nop
 80055ba:	e000      	b.n	80055be <recv+0x116>
         if(recvsize != 0) break;
 80055bc:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else
   if(recvsize < len) len = recvsize;
 80055be:	89ba      	ldrh	r2, [r7, #12]
 80055c0:	88bb      	ldrh	r3, [r7, #4]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d201      	bcs.n	80055ca <recv+0x122>
 80055c6:	89bb      	ldrh	r3, [r7, #12]
 80055c8:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 80055ca:	88ba      	ldrh	r2, [r7, #4]
 80055cc:	79fb      	ldrb	r3, [r7, #7]
 80055ce:	6839      	ldr	r1, [r7, #0]
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7ff fbbf 	bl	8004d54 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 80055d6:	79fb      	ldrb	r3, [r7, #7]
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	3301      	adds	r3, #1
 80055dc:	00db      	lsls	r3, r3, #3
 80055de:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80055e2:	2140      	movs	r1, #64	; 0x40
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7ff f9b5 	bl	8004954 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80055ea:	bf00      	nop
 80055ec:	79fb      	ldrb	r3, [r7, #7]
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	3301      	adds	r3, #1
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7ff f95f 	bl	80048bc <WIZCHIP_READ>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1f3      	bne.n	80055ec <recv+0x144>
#endif

   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8005604:	88bb      	ldrh	r3, [r7, #4]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	bd90      	pop	{r4, r7, pc}
 800560e:	bf00      	nop
 8005610:	20000318 	.word	0x20000318

08005614 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
 8005618:	bf00      	nop
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8005622:	b480      	push	{r7}
 8005624:	af00      	add	r7, sp, #0
 8005626:	bf00      	nop
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8005630:	b480      	push	{r7}
 8005632:	af00      	add	r7, sp, #0
 8005634:	bf00      	nop
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 800563e:	b480      	push	{r7}
 8005640:	af00      	add	r7, sp, #0
 8005642:	bf00      	nop
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	b2db      	uxtb	r3, r3
 800565a:	4618      	mov	r0, r3
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8005666:	b480      	push	{r7}
 8005668:	b083      	sub	sp, #12
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
 800566e:	460b      	mov	r3, r1
 8005670:	70fb      	strb	r3, [r7, #3]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	78fa      	ldrb	r2, [r7, #3]
 8005676:	701a      	strb	r2, [r3, #0]
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8005684:	b480      	push	{r7}
 8005686:	af00      	add	r7, sp, #0
 8005688:	2300      	movs	r3, #0
 800568a:	4618      	mov	r0, r3
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	4603      	mov	r3, r0
 800569c:	71fb      	strb	r3, [r7, #7]
 800569e:	bf00      	nop
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{};
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
 80056b2:	460b      	mov	r3, r1
 80056b4:	807b      	strh	r3, [r7, #2]
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 80056c2:	b480      	push	{r7}
 80056c4:	b083      	sub	sp, #12
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
 80056ca:	460b      	mov	r3, r1
 80056cc:	807b      	strh	r3, [r7, #2]
 80056ce:	bf00      	nop
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
	...

080056dc <reg_wizchip_cris_cbfunc>:

static uint8_t    _DNS_[4];      // DNS server ip address
static dhcp_mode  _DHCP_;        // DHCP mode

void reg_wizchip_cris_cbfunc(void(*cris_en)(void), void(*cris_ex)(void))
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
   if(!cris_en || !cris_ex)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d002      	beq.n	80056f2 <reg_wizchip_cris_cbfunc+0x16>
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d106      	bne.n	8005700 <reg_wizchip_cris_cbfunc+0x24>
   {
      WIZCHIP.CRIS._enter = wizchip_cris_enter;
 80056f2:	4b09      	ldr	r3, [pc, #36]	; (8005718 <reg_wizchip_cris_cbfunc+0x3c>)
 80056f4:	4a09      	ldr	r2, [pc, #36]	; (800571c <reg_wizchip_cris_cbfunc+0x40>)
 80056f6:	60da      	str	r2, [r3, #12]
      WIZCHIP.CRIS._exit  = wizchip_cris_exit;
 80056f8:	4b07      	ldr	r3, [pc, #28]	; (8005718 <reg_wizchip_cris_cbfunc+0x3c>)
 80056fa:	4a09      	ldr	r2, [pc, #36]	; (8005720 <reg_wizchip_cris_cbfunc+0x44>)
 80056fc:	611a      	str	r2, [r3, #16]
 80056fe:	e005      	b.n	800570c <reg_wizchip_cris_cbfunc+0x30>
   }
   else
   {
      WIZCHIP.CRIS._enter = cris_en;
 8005700:	4a05      	ldr	r2, [pc, #20]	; (8005718 <reg_wizchip_cris_cbfunc+0x3c>)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	60d3      	str	r3, [r2, #12]
      WIZCHIP.CRIS._exit  = cris_ex;
 8005706:	4a04      	ldr	r2, [pc, #16]	; (8005718 <reg_wizchip_cris_cbfunc+0x3c>)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	6113      	str	r3, [r2, #16]
   }
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	2000015c 	.word	0x2000015c
 800571c:	08005615 	.word	0x08005615
 8005720:	08005623 	.word	0x08005623

08005724 <reg_wizchip_cs_cbfunc>:

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d002      	beq.n	800573a <reg_wizchip_cs_cbfunc+0x16>
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d106      	bne.n	8005748 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800573a:	4b09      	ldr	r3, [pc, #36]	; (8005760 <reg_wizchip_cs_cbfunc+0x3c>)
 800573c:	4a09      	ldr	r2, [pc, #36]	; (8005764 <reg_wizchip_cs_cbfunc+0x40>)
 800573e:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8005740:	4b07      	ldr	r3, [pc, #28]	; (8005760 <reg_wizchip_cs_cbfunc+0x3c>)
 8005742:	4a09      	ldr	r2, [pc, #36]	; (8005768 <reg_wizchip_cs_cbfunc+0x44>)
 8005744:	619a      	str	r2, [r3, #24]
 8005746:	e005      	b.n	8005754 <reg_wizchip_cs_cbfunc+0x30>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8005748:	4a05      	ldr	r2, [pc, #20]	; (8005760 <reg_wizchip_cs_cbfunc+0x3c>)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800574e:	4a04      	ldr	r2, [pc, #16]	; (8005760 <reg_wizchip_cs_cbfunc+0x3c>)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	6193      	str	r3, [r2, #24]
   }
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	2000015c 	.word	0x2000015c
 8005764:	08005631 	.word	0x08005631
 8005768:	0800563f 	.word	0x0800563f

0800576c <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8005776:	bf00      	nop
 8005778:	4b0f      	ldr	r3, [pc, #60]	; (80057b8 <reg_wizchip_spi_cbfunc+0x4c>)
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005780:	2b00      	cmp	r3, #0
 8005782:	d0f9      	beq.n	8005778 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d002      	beq.n	8005790 <reg_wizchip_spi_cbfunc+0x24>
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d106      	bne.n	800579e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8005790:	4b09      	ldr	r3, [pc, #36]	; (80057b8 <reg_wizchip_spi_cbfunc+0x4c>)
 8005792:	4a0a      	ldr	r2, [pc, #40]	; (80057bc <reg_wizchip_spi_cbfunc+0x50>)
 8005794:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8005796:	4b08      	ldr	r3, [pc, #32]	; (80057b8 <reg_wizchip_spi_cbfunc+0x4c>)
 8005798:	4a09      	ldr	r2, [pc, #36]	; (80057c0 <reg_wizchip_spi_cbfunc+0x54>)
 800579a:	621a      	str	r2, [r3, #32]
 800579c:	e005      	b.n	80057aa <reg_wizchip_spi_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800579e:	4a06      	ldr	r2, [pc, #24]	; (80057b8 <reg_wizchip_spi_cbfunc+0x4c>)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80057a4:	4a04      	ldr	r2, [pc, #16]	; (80057b8 <reg_wizchip_spi_cbfunc+0x4c>)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	6213      	str	r3, [r2, #32]
   }
}
 80057aa:	bf00      	nop
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	2000015c 	.word	0x2000015c
 80057bc:	08005685 	.word	0x08005685
 80057c0:	08005695 	.word	0x08005695

080057c4 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80057ce:	bf00      	nop
 80057d0:	4b0f      	ldr	r3, [pc, #60]	; (8005810 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80057d2:	881b      	ldrh	r3, [r3, #0]
 80057d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d0f9      	beq.n	80057d0 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d002      	beq.n	80057e8 <reg_wizchip_spiburst_cbfunc+0x24>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d106      	bne.n	80057f6 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 80057e8:	4b09      	ldr	r3, [pc, #36]	; (8005810 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80057ea:	4a0a      	ldr	r2, [pc, #40]	; (8005814 <reg_wizchip_spiburst_cbfunc+0x50>)
 80057ec:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 80057ee:	4b08      	ldr	r3, [pc, #32]	; (8005810 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80057f0:	4a09      	ldr	r2, [pc, #36]	; (8005818 <reg_wizchip_spiburst_cbfunc+0x54>)
 80057f2:	629a      	str	r2, [r3, #40]	; 0x28
 80057f4:	e005      	b.n	8005802 <reg_wizchip_spiburst_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 80057f6:	4a06      	ldr	r2, [pc, #24]	; (8005810 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 80057fc:	4a04      	ldr	r2, [pc, #16]	; (8005810 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 8005802:	bf00      	nop
 8005804:	370c      	adds	r7, #12
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	2000015c 	.word	0x2000015c
 8005814:	080056ab 	.word	0x080056ab
 8005818:	080056c3 	.word	0x080056c3

0800581c <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 800581c:	b590      	push	{r4, r7, lr}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	4603      	mov	r3, r0
 8005824:	6039      	str	r1, [r7, #0]
 8005826:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8005828:	2300      	movs	r3, #0
 800582a:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 800582c:	2300      	movs	r3, #0
 800582e:	60fb      	str	r3, [r7, #12]
 8005830:	2300      	movs	r3, #0
 8005832:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8005834:	79fb      	ldrb	r3, [r7, #7]
 8005836:	2b0f      	cmp	r3, #15
 8005838:	f200 80c2 	bhi.w	80059c0 <ctlwizchip+0x1a4>
 800583c:	a201      	add	r2, pc, #4	; (adr r2, 8005844 <ctlwizchip+0x28>)
 800583e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005842:	bf00      	nop
 8005844:	08005885 	.word	0x08005885
 8005848:	0800588b 	.word	0x0800588b
 800584c:	080058b7 	.word	0x080058b7
 8005850:	080058ab 	.word	0x080058ab
 8005854:	080058c5 	.word	0x080058c5
 8005858:	080058d1 	.word	0x080058d1
 800585c:	080058df 	.word	0x080058df
 8005860:	08005905 	.word	0x08005905
 8005864:	0800592b 	.word	0x0800592b
 8005868:	08005965 	.word	0x08005965
 800586c:	0800596b 	.word	0x0800596b
 8005870:	08005973 	.word	0x08005973
 8005874:	080059c7 	.word	0x080059c7
 8005878:	0800597b 	.word	0x0800597b
 800587c:	08005989 	.word	0x08005989
 8005880:	080059a5 	.word	0x080059a5
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8005884:	f000 f8e6 	bl	8005a54 <wizchip_sw_reset>
         break;
 8005888:	e09e      	b.n	80059c8 <ctlwizchip+0x1ac>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d004      	beq.n	800589a <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	3308      	adds	r3, #8
 8005898:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	4611      	mov	r1, r2
 80058a0:	4618      	mov	r0, r3
 80058a2:	f000 f923 	bl	8005aec <wizchip_init>
 80058a6:	4603      	mov	r3, r0
 80058a8:	e08f      	b.n	80059ca <ctlwizchip+0x1ae>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	881b      	ldrh	r3, [r3, #0]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 f9a8 	bl	8005c04 <wizchip_clrinterrupt>
         break;
 80058b4:	e088      	b.n	80059c8 <ctlwizchip+0x1ac>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80058b6:	f000 f9c3 	bl	8005c40 <wizchip_getinterrupt>
 80058ba:	4603      	mov	r3, r0
 80058bc:	461a      	mov	r2, r3
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	801a      	strh	r2, [r3, #0]
         break;
 80058c2:	e081      	b.n	80059c8 <ctlwizchip+0x1ac>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	881b      	ldrh	r3, [r3, #0]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f000 f9de 	bl	8005c8a <wizchip_setinterruptmask>
         break;         
 80058ce:	e07b      	b.n	80059c8 <ctlwizchip+0x1ac>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 80058d0:	f000 f9f6 	bl	8005cc0 <wizchip_getinterruptmask>
 80058d4:	4603      	mov	r3, r0
 80058d6:	461a      	mov	r2, r3
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	801a      	strh	r2, [r3, #0]
         break;
 80058dc:	e074      	b.n	80059c8 <ctlwizchip+0x1ac>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	881b      	ldrh	r3, [r3, #0]
 80058e2:	0a1b      	lsrs	r3, r3, #8
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	4619      	mov	r1, r3
 80058ea:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80058ee:	f7ff f831 	bl	8004954 <WIZCHIP_WRITE>
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	881b      	ldrh	r3, [r3, #0]
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	4619      	mov	r1, r3
 80058fa:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80058fe:	f7ff f829 	bl	8004954 <WIZCHIP_WRITE>
         break;
 8005902:	e061      	b.n	80059c8 <ctlwizchip+0x1ac>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8005904:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8005908:	f7fe ffd8 	bl	80048bc <WIZCHIP_READ>
 800590c:	4603      	mov	r3, r0
 800590e:	b29b      	uxth	r3, r3
 8005910:	021b      	lsls	r3, r3, #8
 8005912:	b29c      	uxth	r4, r3
 8005914:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8005918:	f7fe ffd0 	bl	80048bc <WIZCHIP_READ>
 800591c:	4603      	mov	r3, r0
 800591e:	b29b      	uxth	r3, r3
 8005920:	4423      	add	r3, r4
 8005922:	b29a      	uxth	r2, r3
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	801a      	strh	r2, [r3, #0]
         break;
 8005928:	e04e      	b.n	80059c8 <ctlwizchip+0x1ac>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 800592a:	4b2a      	ldr	r3, [pc, #168]	; (80059d4 <ctlwizchip+0x1b8>)
 800592c:	789a      	ldrb	r2, [r3, #2]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	3301      	adds	r3, #1
 8005936:	4a27      	ldr	r2, [pc, #156]	; (80059d4 <ctlwizchip+0x1b8>)
 8005938:	78d2      	ldrb	r2, [r2, #3]
 800593a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	3302      	adds	r3, #2
 8005940:	4a24      	ldr	r2, [pc, #144]	; (80059d4 <ctlwizchip+0x1b8>)
 8005942:	7912      	ldrb	r2, [r2, #4]
 8005944:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	3303      	adds	r3, #3
 800594a:	4a22      	ldr	r2, [pc, #136]	; (80059d4 <ctlwizchip+0x1b8>)
 800594c:	7952      	ldrb	r2, [r2, #5]
 800594e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	3304      	adds	r3, #4
 8005954:	4a1f      	ldr	r2, [pc, #124]	; (80059d4 <ctlwizchip+0x1b8>)
 8005956:	7992      	ldrb	r2, [r2, #6]
 8005958:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	3305      	adds	r3, #5
 800595e:	2200      	movs	r2, #0
 8005960:	701a      	strb	r2, [r3, #0]
         break;
 8005962:	e031      	b.n	80059c8 <ctlwizchip+0x1ac>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8005964:	f000 f9fe 	bl	8005d64 <wizphy_reset>
         break;
 8005968:	e02e      	b.n	80059c8 <ctlwizchip+0x1ac>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 800596a:	6838      	ldr	r0, [r7, #0]
 800596c:	f000 fa21 	bl	8005db2 <wizphy_setphyconf>
         break;
 8005970:	e02a      	b.n	80059c8 <ctlwizchip+0x1ac>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8005972:	6838      	ldr	r0, [r7, #0]
 8005974:	f000 fa5f 	bl	8005e36 <wizphy_getphyconf>
         break;
 8005978:	e026      	b.n	80059c8 <ctlwizchip+0x1ac>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	4618      	mov	r0, r3
 8005980:	f000 faa2 	bl	8005ec8 <wizphy_setphypmode>
 8005984:	4603      	mov	r3, r0
 8005986:	e020      	b.n	80059ca <ctlwizchip+0x1ae>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8005988:	f000 f9d3 	bl	8005d32 <wizphy_getphypmode>
 800598c:	4603      	mov	r3, r0
 800598e:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8005990:	7dfb      	ldrb	r3, [r7, #23]
 8005992:	2bff      	cmp	r3, #255	; 0xff
 8005994:	d102      	bne.n	800599c <ctlwizchip+0x180>
 8005996:	f04f 33ff 	mov.w	r3, #4294967295
 800599a:	e016      	b.n	80059ca <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	7dfa      	ldrb	r2, [r7, #23]
 80059a0:	701a      	strb	r2, [r3, #0]
         break;
 80059a2:	e011      	b.n	80059c8 <ctlwizchip+0x1ac>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 80059a4:	f000 f9af 	bl	8005d06 <wizphy_getphylink>
 80059a8:	4603      	mov	r3, r0
 80059aa:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80059ac:	7dfb      	ldrb	r3, [r7, #23]
 80059ae:	2bff      	cmp	r3, #255	; 0xff
 80059b0:	d102      	bne.n	80059b8 <ctlwizchip+0x19c>
 80059b2:	f04f 33ff 	mov.w	r3, #4294967295
 80059b6:	e008      	b.n	80059ca <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	7dfa      	ldrb	r2, [r7, #23]
 80059bc:	701a      	strb	r2, [r3, #0]
         break;
 80059be:	e003      	b.n	80059c8 <ctlwizchip+0x1ac>
   #endif
      default:
         return -1;
 80059c0:	f04f 33ff 	mov.w	r3, #4294967295
 80059c4:	e001      	b.n	80059ca <ctlwizchip+0x1ae>
         break;
 80059c6:	bf00      	nop
   }
   return 0;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	371c      	adds	r7, #28
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd90      	pop	{r4, r7, pc}
 80059d2:	bf00      	nop
 80059d4:	2000015c 	.word	0x2000015c

080059d8 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	4603      	mov	r3, r0
 80059e0:	6039      	str	r1, [r7, #0]
 80059e2:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 80059e4:	79fb      	ldrb	r3, [r7, #7]
 80059e6:	2b05      	cmp	r3, #5
 80059e8:	d82c      	bhi.n	8005a44 <ctlnetwork+0x6c>
 80059ea:	a201      	add	r2, pc, #4	; (adr r2, 80059f0 <ctlnetwork+0x18>)
 80059ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f0:	08005a09 	.word	0x08005a09
 80059f4:	08005a11 	.word	0x08005a11
 80059f8:	08005a19 	.word	0x08005a19
 80059fc:	08005a27 	.word	0x08005a27
 8005a00:	08005a35 	.word	0x08005a35
 8005a04:	08005a3d 	.word	0x08005a3d
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8005a08:	6838      	ldr	r0, [r7, #0]
 8005a0a:	f000 faa7 	bl	8005f5c <wizchip_setnetinfo>
         break;
 8005a0e:	e01c      	b.n	8005a4a <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8005a10:	6838      	ldr	r0, [r7, #0]
 8005a12:	f000 fae3 	bl	8005fdc <wizchip_getnetinfo>
         break;
 8005a16:	e018      	b.n	8005a4a <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f000 fb1d 	bl	800605c <wizchip_setnetmode>
 8005a22:	4603      	mov	r3, r0
 8005a24:	e012      	b.n	8005a4c <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8005a26:	f000 fb3b 	bl	80060a0 <wizchip_getnetmode>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	701a      	strb	r2, [r3, #0]
         break;
 8005a32:	e00a      	b.n	8005a4a <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8005a34:	6838      	ldr	r0, [r7, #0]
 8005a36:	f000 fb3b 	bl	80060b0 <wizchip_settimeout>
         break;
 8005a3a:	e006      	b.n	8005a4a <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8005a3c:	6838      	ldr	r0, [r7, #0]
 8005a3e:	f000 fb58 	bl	80060f2 <wizchip_gettimeout>
         break;
 8005a42:	e002      	b.n	8005a4a <ctlnetwork+0x72>
      default:
         return -1;
 8005a44:	f04f 33ff 	mov.w	r3, #4294967295
 8005a48:	e000      	b.n	8005a4c <ctlnetwork+0x74>
   }
   return 0;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8005a5a:	1d3b      	adds	r3, r7, #4
 8005a5c:	2206      	movs	r2, #6
 8005a5e:	4619      	mov	r1, r3
 8005a60:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8005a64:	f7fe ffc4 	bl	80049f0 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8005a68:	f107 0314 	add.w	r3, r7, #20
 8005a6c:	2204      	movs	r2, #4
 8005a6e:	4619      	mov	r1, r3
 8005a70:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005a74:	f7fe ffbc 	bl	80049f0 <WIZCHIP_READ_BUF>
 8005a78:	f107 0310 	add.w	r3, r7, #16
 8005a7c:	2204      	movs	r2, #4
 8005a7e:	4619      	mov	r1, r3
 8005a80:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8005a84:	f7fe ffb4 	bl	80049f0 <WIZCHIP_READ_BUF>
 8005a88:	f107 030c 	add.w	r3, r7, #12
 8005a8c:	2204      	movs	r2, #4
 8005a8e:	4619      	mov	r1, r3
 8005a90:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8005a94:	f7fe ffac 	bl	80049f0 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8005a98:	2180      	movs	r1, #128	; 0x80
 8005a9a:	2000      	movs	r0, #0
 8005a9c:	f7fe ff5a 	bl	8004954 <WIZCHIP_WRITE>
   getMR(); // for delay
 8005aa0:	2000      	movs	r0, #0
 8005aa2:	f7fe ff0b 	bl	80048bc <WIZCHIP_READ>
//A2015051 : For indirect bus mode
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8005aa6:	1d3b      	adds	r3, r7, #4
 8005aa8:	2206      	movs	r2, #6
 8005aaa:	4619      	mov	r1, r3
 8005aac:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8005ab0:	f7fe fffe 	bl	8004ab0 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8005ab4:	f107 0314 	add.w	r3, r7, #20
 8005ab8:	2204      	movs	r2, #4
 8005aba:	4619      	mov	r1, r3
 8005abc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005ac0:	f7fe fff6 	bl	8004ab0 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8005ac4:	f107 0310 	add.w	r3, r7, #16
 8005ac8:	2204      	movs	r2, #4
 8005aca:	4619      	mov	r1, r3
 8005acc:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8005ad0:	f7fe ffee 	bl	8004ab0 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8005ad4:	f107 030c 	add.w	r3, r7, #12
 8005ad8:	2204      	movs	r2, #4
 8005ada:	4619      	mov	r1, r3
 8005adc:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8005ae0:	f7fe ffe6 	bl	8004ab0 <WIZCHIP_WRITE_BUF>
}
 8005ae4:	bf00      	nop
 8005ae6:	3718      	adds	r7, #24
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8005af6:	2300      	movs	r3, #0
 8005af8:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8005afa:	f7ff ffab 	bl	8005a54 <wizchip_sw_reset>
   if(txsize)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d03b      	beq.n	8005b7c <wizchip_init+0x90>
   {
      tmp = 0;
 8005b04:	2300      	movs	r3, #0
 8005b06:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005b08:	2300      	movs	r3, #0
 8005b0a:	73fb      	strb	r3, [r7, #15]
 8005b0c:	e015      	b.n	8005b3a <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8005b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	4413      	add	r3, r2
 8005b16:	781a      	ldrb	r2, [r3, #0]
 8005b18:	7bbb      	ldrb	r3, [r7, #14]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8005b20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b24:	2b10      	cmp	r3, #16
 8005b26:	dd02      	ble.n	8005b2e <wizchip_init+0x42>
 8005b28:	f04f 33ff 	mov.w	r3, #4294967295
 8005b2c:	e066      	b.n	8005bfc <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	3301      	adds	r3, #1
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	73fb      	strb	r3, [r7, #15]
 8005b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b3e:	2b07      	cmp	r3, #7
 8005b40:	dde5      	ble.n	8005b0e <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005b42:	2300      	movs	r3, #0
 8005b44:	73fb      	strb	r3, [r7, #15]
 8005b46:	e015      	b.n	8005b74 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8005b48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	3301      	adds	r3, #1
 8005b50:	00db      	lsls	r3, r3, #3
 8005b52:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8005b56:	4618      	mov	r0, r3
 8005b58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	4413      	add	r3, r2
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	4619      	mov	r1, r3
 8005b64:	f7fe fef6 	bl	8004954 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005b68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	3301      	adds	r3, #1
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	73fb      	strb	r3, [r7, #15]
 8005b74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b78:	2b07      	cmp	r3, #7
 8005b7a:	dde5      	ble.n	8005b48 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d03b      	beq.n	8005bfa <wizchip_init+0x10e>
   {
      tmp = 0;
 8005b82:	2300      	movs	r3, #0
 8005b84:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005b86:	2300      	movs	r3, #0
 8005b88:	73fb      	strb	r3, [r7, #15]
 8005b8a:	e015      	b.n	8005bb8 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8005b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b90:	683a      	ldr	r2, [r7, #0]
 8005b92:	4413      	add	r3, r2
 8005b94:	781a      	ldrb	r2, [r3, #0]
 8005b96:	7bbb      	ldrb	r3, [r7, #14]
 8005b98:	4413      	add	r3, r2
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8005b9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ba2:	2b10      	cmp	r3, #16
 8005ba4:	dd02      	ble.n	8005bac <wizchip_init+0xc0>
 8005ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8005baa:	e027      	b.n	8005bfc <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	73fb      	strb	r3, [r7, #15]
 8005bb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bbc:	2b07      	cmp	r3, #7
 8005bbe:	dde5      	ble.n	8005b8c <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	73fb      	strb	r3, [r7, #15]
 8005bc4:	e015      	b.n	8005bf2 <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8005bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	3301      	adds	r3, #1
 8005bce:	00db      	lsls	r3, r3, #3
 8005bd0:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	4413      	add	r3, r2
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	4619      	mov	r1, r3
 8005be2:	f7fe feb7 	bl	8004954 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	3301      	adds	r3, #1
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	73fb      	strb	r3, [r7, #15]
 8005bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bf6:	2b07      	cmp	r3, #7
 8005bf8:	dde5      	ble.n	8005bc6 <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8005c0e:	88fb      	ldrh	r3, [r7, #6]
 8005c10:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8005c12:	88fb      	ldrh	r3, [r7, #6]
 8005c14:	0a1b      	lsrs	r3, r3, #8
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8005c1a:	7bfb      	ldrb	r3, [r7, #15]
 8005c1c:	f023 030f 	bic.w	r3, r3, #15
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	4619      	mov	r1, r3
 8005c24:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8005c28:	f7fe fe94 	bl	8004954 <WIZCHIP_WRITE>
   setSIR(sir);
 8005c2c:	7bbb      	ldrb	r3, [r7, #14]
 8005c2e:	4619      	mov	r1, r3
 8005c30:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8005c34:	f7fe fe8e 	bl	8004954 <WIZCHIP_WRITE>
#endif   
}
 8005c38:	bf00      	nop
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8005c46:	2300      	movs	r3, #0
 8005c48:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8005c52:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8005c56:	f7fe fe31 	bl	80048bc <WIZCHIP_READ>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	f023 030f 	bic.w	r3, r3, #15
 8005c60:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8005c62:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8005c66:	f7fe fe29 	bl	80048bc <WIZCHIP_READ>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8005c6e:	79bb      	ldrb	r3, [r7, #6]
 8005c70:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8005c72:	88bb      	ldrh	r3, [r7, #4]
 8005c74:	021b      	lsls	r3, r3, #8
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	79fb      	ldrb	r3, [r7, #7]
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	4413      	add	r3, r2
 8005c7e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8005c80:	88bb      	ldrh	r3, [r7, #4]
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b084      	sub	sp, #16
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	4603      	mov	r3, r0
 8005c92:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8005c94:	88fb      	ldrh	r3, [r7, #6]
 8005c96:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8005c98:	88fb      	ldrh	r3, [r7, #6]
 8005c9a:	0a1b      	lsrs	r3, r3, #8
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8005ca0:	7bfb      	ldrb	r3, [r7, #15]
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8005ca8:	f7fe fe54 	bl	8004954 <WIZCHIP_WRITE>
   setSIMR(simr);
 8005cac:	7bbb      	ldrb	r3, [r7, #14]
 8005cae:	4619      	mov	r1, r3
 8005cb0:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8005cb4:	f7fe fe4e 	bl	8004954 <WIZCHIP_WRITE>
#endif   
}
 8005cb8:	bf00      	nop
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8005cd2:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8005cd6:	f7fe fdf1 	bl	80048bc <WIZCHIP_READ>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8005cde:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8005ce2:	f7fe fdeb 	bl	80048bc <WIZCHIP_READ>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8005cea:	79bb      	ldrb	r3, [r7, #6]
 8005cec:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8005cee:	88bb      	ldrh	r3, [r7, #4]
 8005cf0:	021b      	lsls	r3, r3, #8
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	79fb      	ldrb	r3, [r7, #7]
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	4413      	add	r3, r2
 8005cfa:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8005cfc:	88bb      	ldrh	r3, [r7, #4]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b082      	sub	sp, #8
 8005d0a:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8005d10:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8005d14:	f7fe fdd2 	bl	80048bc <WIZCHIP_READ>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d001      	beq.n	8005d26 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8005d22:	2301      	movs	r3, #1
 8005d24:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8005d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b082      	sub	sp, #8
 8005d36:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8005d3c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8005d40:	f7fe fdbc 	bl	80048bc <WIZCHIP_READ>
 8005d44:	4603      	mov	r3, r0
 8005d46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d4a:	2b30      	cmp	r3, #48	; 0x30
 8005d4c:	d102      	bne.n	8005d54 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	71fb      	strb	r3, [r7, #7]
 8005d52:	e001      	b.n	8005d58 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8005d54:	2300      	movs	r3, #0
 8005d56:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8005d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3708      	adds	r7, #8
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8005d6a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8005d6e:	f7fe fda5 	bl	80048bc <WIZCHIP_READ>
 8005d72:	4603      	mov	r3, r0
 8005d74:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8005d76:	79fb      	ldrb	r3, [r7, #7]
 8005d78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d7c:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8005d7e:	79fb      	ldrb	r3, [r7, #7]
 8005d80:	4619      	mov	r1, r3
 8005d82:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8005d86:	f7fe fde5 	bl	8004954 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8005d8a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8005d8e:	f7fe fd95 	bl	80048bc <WIZCHIP_READ>
 8005d92:	4603      	mov	r3, r0
 8005d94:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8005d96:	79fb      	ldrb	r3, [r7, #7]
 8005d98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d9c:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8005d9e:	79fb      	ldrb	r3, [r7, #7]
 8005da0:	4619      	mov	r1, r3
 8005da2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8005da6:	f7fe fdd5 	bl	8004954 <WIZCHIP_WRITE>
}
 8005daa:	bf00      	nop
 8005dac:	3708      	adds	r7, #8
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b084      	sub	sp, #16
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d104      	bne.n	8005dd0 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8005dc6:	7bfb      	ldrb	r3, [r7, #15]
 8005dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dcc:	73fb      	strb	r3, [r7, #15]
 8005dce:	e003      	b.n	8005dd8 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8005dd0:	7bfb      	ldrb	r3, [r7, #15]
 8005dd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dd6:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	785b      	ldrb	r3, [r3, #1]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d104      	bne.n	8005dea <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8005de0:	7bfb      	ldrb	r3, [r7, #15]
 8005de2:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8005de6:	73fb      	strb	r3, [r7, #15]
 8005de8:	e019      	b.n	8005e1e <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	78db      	ldrb	r3, [r3, #3]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d10d      	bne.n	8005e0e <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	789b      	ldrb	r3, [r3, #2]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d104      	bne.n	8005e04 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8005dfa:	7bfb      	ldrb	r3, [r7, #15]
 8005dfc:	f043 0318 	orr.w	r3, r3, #24
 8005e00:	73fb      	strb	r3, [r7, #15]
 8005e02:	e00c      	b.n	8005e1e <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
 8005e06:	f043 0308 	orr.w	r3, r3, #8
 8005e0a:	73fb      	strb	r3, [r7, #15]
 8005e0c:	e007      	b.n	8005e1e <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	789b      	ldrb	r3, [r3, #2]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d103      	bne.n	8005e1e <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8005e16:	7bfb      	ldrb	r3, [r7, #15]
 8005e18:	f043 0310 	orr.w	r3, r3, #16
 8005e1c:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8005e1e:	7bfb      	ldrb	r3, [r7, #15]
 8005e20:	4619      	mov	r1, r3
 8005e22:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8005e26:	f7fe fd95 	bl	8004954 <WIZCHIP_WRITE>
   wizphy_reset();
 8005e2a:	f7ff ff9b 	bl	8005d64 <wizphy_reset>
}
 8005e2e:	bf00      	nop
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b084      	sub	sp, #16
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8005e42:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8005e46:	f7fe fd39 	bl	80048bc <WIZCHIP_READ>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8005e4e:	7bfb      	ldrb	r3, [r7, #15]
 8005e50:	119b      	asrs	r3, r3, #6
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8005e5e:	7bfb      	ldrb	r3, [r7, #15]
 8005e60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e64:	2b20      	cmp	r3, #32
 8005e66:	d001      	beq.n	8005e6c <wizphy_getphyconf+0x36>
 8005e68:	2b38      	cmp	r3, #56	; 0x38
 8005e6a:	d103      	bne.n	8005e74 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	705a      	strb	r2, [r3, #1]
         break;
 8005e72:	e003      	b.n	8005e7c <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	705a      	strb	r2, [r3, #1]
         break;
 8005e7a:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8005e7c:	7bfb      	ldrb	r3, [r7, #15]
 8005e7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e82:	2b18      	cmp	r3, #24
 8005e84:	d003      	beq.n	8005e8e <wizphy_getphyconf+0x58>
 8005e86:	2b20      	cmp	r3, #32
 8005e88:	d001      	beq.n	8005e8e <wizphy_getphyconf+0x58>
 8005e8a:	2b10      	cmp	r3, #16
 8005e8c:	d103      	bne.n	8005e96 <wizphy_getphyconf+0x60>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	709a      	strb	r2, [r3, #2]
         break;
 8005e94:	e003      	b.n	8005e9e <wizphy_getphyconf+0x68>
      default:
         phyconf->speed = PHY_SPEED_10;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	709a      	strb	r2, [r3, #2]
         break;
 8005e9c:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8005e9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ea0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ea4:	2b18      	cmp	r3, #24
 8005ea6:	d003      	beq.n	8005eb0 <wizphy_getphyconf+0x7a>
 8005ea8:	2b20      	cmp	r3, #32
 8005eaa:	d001      	beq.n	8005eb0 <wizphy_getphyconf+0x7a>
 8005eac:	2b08      	cmp	r3, #8
 8005eae:	d103      	bne.n	8005eb8 <wizphy_getphyconf+0x82>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	70da      	strb	r2, [r3, #3]
         break;
 8005eb6:	e003      	b.n	8005ec0 <wizphy_getphyconf+0x8a>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	70da      	strb	r2, [r3, #3]
         break;
 8005ebe:	bf00      	nop
   }
}
 8005ec0:	bf00      	nop
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	4603      	mov	r3, r0
 8005ed0:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8005ed6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8005eda:	f7fe fcef 	bl	80048bc <WIZCHIP_READ>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8005ee2:	7bfb      	ldrb	r3, [r7, #15]
 8005ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d102      	bne.n	8005ef2 <wizphy_setphypmode+0x2a>
 8005eec:	f04f 33ff 	mov.w	r3, #4294967295
 8005ef0:	e030      	b.n	8005f54 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8005ef2:	7bfb      	ldrb	r3, [r7, #15]
 8005ef4:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8005ef8:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8005efa:	79fb      	ldrb	r3, [r7, #7]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d104      	bne.n	8005f0a <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8005f00:	7bfb      	ldrb	r3, [r7, #15]
 8005f02:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8005f06:	73fb      	strb	r3, [r7, #15]
 8005f08:	e003      	b.n	8005f12 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8005f0a:	7bfb      	ldrb	r3, [r7, #15]
 8005f0c:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8005f10:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8005f12:	7bfb      	ldrb	r3, [r7, #15]
 8005f14:	4619      	mov	r1, r3
 8005f16:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8005f1a:	f7fe fd1b 	bl	8004954 <WIZCHIP_WRITE>
   wizphy_reset();
 8005f1e:	f7ff ff21 	bl	8005d64 <wizphy_reset>
   tmp = getPHYCFGR();
 8005f22:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8005f26:	f7fe fcc9 	bl	80048bc <WIZCHIP_READ>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8005f2e:	79fb      	ldrb	r3, [r7, #7]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d106      	bne.n	8005f42 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
 8005f36:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d008      	beq.n	8005f50 <wizphy_setphypmode+0x88>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	e008      	b.n	8005f54 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8005f42:	7bfb      	ldrb	r3, [r7, #15]
 8005f44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <wizphy_setphypmode+0x88>
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	e001      	b.n	8005f54 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8005f50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2206      	movs	r2, #6
 8005f68:	4619      	mov	r1, r3
 8005f6a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8005f6e:	f7fe fd9f 	bl	8004ab0 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	330e      	adds	r3, #14
 8005f76:	2204      	movs	r2, #4
 8005f78:	4619      	mov	r1, r3
 8005f7a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005f7e:	f7fe fd97 	bl	8004ab0 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	330a      	adds	r3, #10
 8005f86:	2204      	movs	r2, #4
 8005f88:	4619      	mov	r1, r3
 8005f8a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8005f8e:	f7fe fd8f 	bl	8004ab0 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	3306      	adds	r3, #6
 8005f96:	2204      	movs	r2, #4
 8005f98:	4619      	mov	r1, r3
 8005f9a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8005f9e:	f7fe fd87 	bl	8004ab0 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	7c9a      	ldrb	r2, [r3, #18]
 8005fa6:	4b0b      	ldr	r3, [pc, #44]	; (8005fd4 <wizchip_setnetinfo+0x78>)
 8005fa8:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	7cda      	ldrb	r2, [r3, #19]
 8005fae:	4b09      	ldr	r3, [pc, #36]	; (8005fd4 <wizchip_setnetinfo+0x78>)
 8005fb0:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	7d1a      	ldrb	r2, [r3, #20]
 8005fb6:	4b07      	ldr	r3, [pc, #28]	; (8005fd4 <wizchip_setnetinfo+0x78>)
 8005fb8:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	7d5a      	ldrb	r2, [r3, #21]
 8005fbe:	4b05      	ldr	r3, [pc, #20]	; (8005fd4 <wizchip_setnetinfo+0x78>)
 8005fc0:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	7d9a      	ldrb	r2, [r3, #22]
 8005fc6:	4b04      	ldr	r3, [pc, #16]	; (8005fd8 <wizchip_setnetinfo+0x7c>)
 8005fc8:	701a      	strb	r2, [r3, #0]
}
 8005fca:	bf00      	nop
 8005fcc:	3708      	adds	r7, #8
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	20000334 	.word	0x20000334
 8005fd8:	20000338 	.word	0x20000338

08005fdc <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2206      	movs	r2, #6
 8005fe8:	4619      	mov	r1, r3
 8005fea:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8005fee:	f7fe fcff 	bl	80049f0 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	330e      	adds	r3, #14
 8005ff6:	2204      	movs	r2, #4
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005ffe:	f7fe fcf7 	bl	80049f0 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	330a      	adds	r3, #10
 8006006:	2204      	movs	r2, #4
 8006008:	4619      	mov	r1, r3
 800600a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800600e:	f7fe fcef 	bl	80049f0 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	3306      	adds	r3, #6
 8006016:	2204      	movs	r2, #4
 8006018:	4619      	mov	r1, r3
 800601a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800601e:	f7fe fce7 	bl	80049f0 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8006022:	4b0c      	ldr	r3, [pc, #48]	; (8006054 <wizchip_getnetinfo+0x78>)
 8006024:	781a      	ldrb	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800602a:	4b0a      	ldr	r3, [pc, #40]	; (8006054 <wizchip_getnetinfo+0x78>)
 800602c:	785a      	ldrb	r2, [r3, #1]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8006032:	4b08      	ldr	r3, [pc, #32]	; (8006054 <wizchip_getnetinfo+0x78>)
 8006034:	789a      	ldrb	r2, [r3, #2]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 800603a:	4b06      	ldr	r3, [pc, #24]	; (8006054 <wizchip_getnetinfo+0x78>)
 800603c:	78da      	ldrb	r2, [r3, #3]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8006042:	4b05      	ldr	r3, [pc, #20]	; (8006058 <wizchip_getnetinfo+0x7c>)
 8006044:	781a      	ldrb	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	759a      	strb	r2, [r3, #22]
}
 800604a:	bf00      	nop
 800604c:	3708      	adds	r7, #8
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	20000334 	.word	0x20000334
 8006058:	20000338 	.word	0x20000338

0800605c <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	4603      	mov	r3, r0
 8006064:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8006066:	2300      	movs	r3, #0
 8006068:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 800606a:	79fb      	ldrb	r3, [r7, #7]
 800606c:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8006070:	2b00      	cmp	r3, #0
 8006072:	d002      	beq.n	800607a <wizchip_setnetmode+0x1e>
 8006074:	f04f 33ff 	mov.w	r3, #4294967295
 8006078:	e00e      	b.n	8006098 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 800607a:	2000      	movs	r0, #0
 800607c:	f7fe fc1e 	bl	80048bc <WIZCHIP_READ>
 8006080:	4603      	mov	r3, r0
 8006082:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8006084:	7bfa      	ldrb	r2, [r7, #15]
 8006086:	79fb      	ldrb	r3, [r7, #7]
 8006088:	4313      	orrs	r3, r2
 800608a:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 800608c:	7bfb      	ldrb	r3, [r7, #15]
 800608e:	4619      	mov	r1, r3
 8006090:	2000      	movs	r0, #0
 8006092:	f7fe fc5f 	bl	8004954 <WIZCHIP_WRITE>
   return 0;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 80060a4:	2000      	movs	r0, #0
 80060a6:	f7fe fc09 	bl	80048bc <WIZCHIP_READ>
 80060aa:	4603      	mov	r3, r0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	4619      	mov	r1, r3
 80060be:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 80060c2:	f7fe fc47 	bl	8004954 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	885b      	ldrh	r3, [r3, #2]
 80060ca:	0a1b      	lsrs	r3, r3, #8
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	4619      	mov	r1, r3
 80060d2:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 80060d6:	f7fe fc3d 	bl	8004954 <WIZCHIP_WRITE>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	885b      	ldrh	r3, [r3, #2]
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	4619      	mov	r1, r3
 80060e2:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 80060e6:	f7fe fc35 	bl	8004954 <WIZCHIP_WRITE>
}
 80060ea:	bf00      	nop
 80060ec:	3708      	adds	r7, #8
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 80060f2:	b590      	push	{r4, r7, lr}
 80060f4:	b083      	sub	sp, #12
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 80060fa:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 80060fe:	f7fe fbdd 	bl	80048bc <WIZCHIP_READ>
 8006102:	4603      	mov	r3, r0
 8006104:	461a      	mov	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 800610a:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 800610e:	f7fe fbd5 	bl	80048bc <WIZCHIP_READ>
 8006112:	4603      	mov	r3, r0
 8006114:	b29b      	uxth	r3, r3
 8006116:	021b      	lsls	r3, r3, #8
 8006118:	b29c      	uxth	r4, r3
 800611a:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 800611e:	f7fe fbcd 	bl	80048bc <WIZCHIP_READ>
 8006122:	4603      	mov	r3, r0
 8006124:	b29b      	uxth	r3, r3
 8006126:	4423      	add	r3, r4
 8006128:	b29a      	uxth	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	805a      	strh	r2, [r3, #2]
}
 800612e:	bf00      	nop
 8006130:	370c      	adds	r7, #12
 8006132:	46bd      	mov	sp, r7
 8006134:	bd90      	pop	{r4, r7, pc}
	...

08006138 <__errno>:
 8006138:	4b01      	ldr	r3, [pc, #4]	; (8006140 <__errno+0x8>)
 800613a:	6818      	ldr	r0, [r3, #0]
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	20000188 	.word	0x20000188

08006144 <__libc_init_array>:
 8006144:	b570      	push	{r4, r5, r6, lr}
 8006146:	4e0d      	ldr	r6, [pc, #52]	; (800617c <__libc_init_array+0x38>)
 8006148:	4c0d      	ldr	r4, [pc, #52]	; (8006180 <__libc_init_array+0x3c>)
 800614a:	1ba4      	subs	r4, r4, r6
 800614c:	10a4      	asrs	r4, r4, #2
 800614e:	2500      	movs	r5, #0
 8006150:	42a5      	cmp	r5, r4
 8006152:	d109      	bne.n	8006168 <__libc_init_array+0x24>
 8006154:	4e0b      	ldr	r6, [pc, #44]	; (8006184 <__libc_init_array+0x40>)
 8006156:	4c0c      	ldr	r4, [pc, #48]	; (8006188 <__libc_init_array+0x44>)
 8006158:	f000 fc40 	bl	80069dc <_init>
 800615c:	1ba4      	subs	r4, r4, r6
 800615e:	10a4      	asrs	r4, r4, #2
 8006160:	2500      	movs	r5, #0
 8006162:	42a5      	cmp	r5, r4
 8006164:	d105      	bne.n	8006172 <__libc_init_array+0x2e>
 8006166:	bd70      	pop	{r4, r5, r6, pc}
 8006168:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800616c:	4798      	blx	r3
 800616e:	3501      	adds	r5, #1
 8006170:	e7ee      	b.n	8006150 <__libc_init_array+0xc>
 8006172:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006176:	4798      	blx	r3
 8006178:	3501      	adds	r5, #1
 800617a:	e7f2      	b.n	8006162 <__libc_init_array+0x1e>
 800617c:	08006a64 	.word	0x08006a64
 8006180:	08006a64 	.word	0x08006a64
 8006184:	08006a64 	.word	0x08006a64
 8006188:	08006a68 	.word	0x08006a68

0800618c <memset>:
 800618c:	4402      	add	r2, r0
 800618e:	4603      	mov	r3, r0
 8006190:	4293      	cmp	r3, r2
 8006192:	d100      	bne.n	8006196 <memset+0xa>
 8006194:	4770      	bx	lr
 8006196:	f803 1b01 	strb.w	r1, [r3], #1
 800619a:	e7f9      	b.n	8006190 <memset+0x4>

0800619c <_vsniprintf_r>:
 800619c:	b530      	push	{r4, r5, lr}
 800619e:	1e14      	subs	r4, r2, #0
 80061a0:	4605      	mov	r5, r0
 80061a2:	b09b      	sub	sp, #108	; 0x6c
 80061a4:	4618      	mov	r0, r3
 80061a6:	da05      	bge.n	80061b4 <_vsniprintf_r+0x18>
 80061a8:	238b      	movs	r3, #139	; 0x8b
 80061aa:	602b      	str	r3, [r5, #0]
 80061ac:	f04f 30ff 	mov.w	r0, #4294967295
 80061b0:	b01b      	add	sp, #108	; 0x6c
 80061b2:	bd30      	pop	{r4, r5, pc}
 80061b4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80061b8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80061bc:	bf14      	ite	ne
 80061be:	f104 33ff 	addne.w	r3, r4, #4294967295
 80061c2:	4623      	moveq	r3, r4
 80061c4:	9302      	str	r3, [sp, #8]
 80061c6:	9305      	str	r3, [sp, #20]
 80061c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80061cc:	9100      	str	r1, [sp, #0]
 80061ce:	9104      	str	r1, [sp, #16]
 80061d0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80061d4:	4602      	mov	r2, r0
 80061d6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80061d8:	4669      	mov	r1, sp
 80061da:	4628      	mov	r0, r5
 80061dc:	f000 f872 	bl	80062c4 <_svfiprintf_r>
 80061e0:	1c43      	adds	r3, r0, #1
 80061e2:	bfbc      	itt	lt
 80061e4:	238b      	movlt	r3, #139	; 0x8b
 80061e6:	602b      	strlt	r3, [r5, #0]
 80061e8:	2c00      	cmp	r4, #0
 80061ea:	d0e1      	beq.n	80061b0 <_vsniprintf_r+0x14>
 80061ec:	9b00      	ldr	r3, [sp, #0]
 80061ee:	2200      	movs	r2, #0
 80061f0:	701a      	strb	r2, [r3, #0]
 80061f2:	e7dd      	b.n	80061b0 <_vsniprintf_r+0x14>

080061f4 <vsniprintf>:
 80061f4:	b507      	push	{r0, r1, r2, lr}
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	4613      	mov	r3, r2
 80061fa:	460a      	mov	r2, r1
 80061fc:	4601      	mov	r1, r0
 80061fe:	4803      	ldr	r0, [pc, #12]	; (800620c <vsniprintf+0x18>)
 8006200:	6800      	ldr	r0, [r0, #0]
 8006202:	f7ff ffcb 	bl	800619c <_vsniprintf_r>
 8006206:	b003      	add	sp, #12
 8006208:	f85d fb04 	ldr.w	pc, [sp], #4
 800620c:	20000188 	.word	0x20000188

08006210 <__ssputs_r>:
 8006210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006214:	688e      	ldr	r6, [r1, #8]
 8006216:	429e      	cmp	r6, r3
 8006218:	4682      	mov	sl, r0
 800621a:	460c      	mov	r4, r1
 800621c:	4690      	mov	r8, r2
 800621e:	4699      	mov	r9, r3
 8006220:	d837      	bhi.n	8006292 <__ssputs_r+0x82>
 8006222:	898a      	ldrh	r2, [r1, #12]
 8006224:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006228:	d031      	beq.n	800628e <__ssputs_r+0x7e>
 800622a:	6825      	ldr	r5, [r4, #0]
 800622c:	6909      	ldr	r1, [r1, #16]
 800622e:	1a6f      	subs	r7, r5, r1
 8006230:	6965      	ldr	r5, [r4, #20]
 8006232:	2302      	movs	r3, #2
 8006234:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006238:	fb95 f5f3 	sdiv	r5, r5, r3
 800623c:	f109 0301 	add.w	r3, r9, #1
 8006240:	443b      	add	r3, r7
 8006242:	429d      	cmp	r5, r3
 8006244:	bf38      	it	cc
 8006246:	461d      	movcc	r5, r3
 8006248:	0553      	lsls	r3, r2, #21
 800624a:	d530      	bpl.n	80062ae <__ssputs_r+0x9e>
 800624c:	4629      	mov	r1, r5
 800624e:	f000 fb2b 	bl	80068a8 <_malloc_r>
 8006252:	4606      	mov	r6, r0
 8006254:	b950      	cbnz	r0, 800626c <__ssputs_r+0x5c>
 8006256:	230c      	movs	r3, #12
 8006258:	f8ca 3000 	str.w	r3, [sl]
 800625c:	89a3      	ldrh	r3, [r4, #12]
 800625e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006262:	81a3      	strh	r3, [r4, #12]
 8006264:	f04f 30ff 	mov.w	r0, #4294967295
 8006268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800626c:	463a      	mov	r2, r7
 800626e:	6921      	ldr	r1, [r4, #16]
 8006270:	f000 faa8 	bl	80067c4 <memcpy>
 8006274:	89a3      	ldrh	r3, [r4, #12]
 8006276:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800627a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800627e:	81a3      	strh	r3, [r4, #12]
 8006280:	6126      	str	r6, [r4, #16]
 8006282:	6165      	str	r5, [r4, #20]
 8006284:	443e      	add	r6, r7
 8006286:	1bed      	subs	r5, r5, r7
 8006288:	6026      	str	r6, [r4, #0]
 800628a:	60a5      	str	r5, [r4, #8]
 800628c:	464e      	mov	r6, r9
 800628e:	454e      	cmp	r6, r9
 8006290:	d900      	bls.n	8006294 <__ssputs_r+0x84>
 8006292:	464e      	mov	r6, r9
 8006294:	4632      	mov	r2, r6
 8006296:	4641      	mov	r1, r8
 8006298:	6820      	ldr	r0, [r4, #0]
 800629a:	f000 fa9e 	bl	80067da <memmove>
 800629e:	68a3      	ldr	r3, [r4, #8]
 80062a0:	1b9b      	subs	r3, r3, r6
 80062a2:	60a3      	str	r3, [r4, #8]
 80062a4:	6823      	ldr	r3, [r4, #0]
 80062a6:	441e      	add	r6, r3
 80062a8:	6026      	str	r6, [r4, #0]
 80062aa:	2000      	movs	r0, #0
 80062ac:	e7dc      	b.n	8006268 <__ssputs_r+0x58>
 80062ae:	462a      	mov	r2, r5
 80062b0:	f000 fb54 	bl	800695c <_realloc_r>
 80062b4:	4606      	mov	r6, r0
 80062b6:	2800      	cmp	r0, #0
 80062b8:	d1e2      	bne.n	8006280 <__ssputs_r+0x70>
 80062ba:	6921      	ldr	r1, [r4, #16]
 80062bc:	4650      	mov	r0, sl
 80062be:	f000 faa5 	bl	800680c <_free_r>
 80062c2:	e7c8      	b.n	8006256 <__ssputs_r+0x46>

080062c4 <_svfiprintf_r>:
 80062c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c8:	461d      	mov	r5, r3
 80062ca:	898b      	ldrh	r3, [r1, #12]
 80062cc:	061f      	lsls	r7, r3, #24
 80062ce:	b09d      	sub	sp, #116	; 0x74
 80062d0:	4680      	mov	r8, r0
 80062d2:	460c      	mov	r4, r1
 80062d4:	4616      	mov	r6, r2
 80062d6:	d50f      	bpl.n	80062f8 <_svfiprintf_r+0x34>
 80062d8:	690b      	ldr	r3, [r1, #16]
 80062da:	b96b      	cbnz	r3, 80062f8 <_svfiprintf_r+0x34>
 80062dc:	2140      	movs	r1, #64	; 0x40
 80062de:	f000 fae3 	bl	80068a8 <_malloc_r>
 80062e2:	6020      	str	r0, [r4, #0]
 80062e4:	6120      	str	r0, [r4, #16]
 80062e6:	b928      	cbnz	r0, 80062f4 <_svfiprintf_r+0x30>
 80062e8:	230c      	movs	r3, #12
 80062ea:	f8c8 3000 	str.w	r3, [r8]
 80062ee:	f04f 30ff 	mov.w	r0, #4294967295
 80062f2:	e0c8      	b.n	8006486 <_svfiprintf_r+0x1c2>
 80062f4:	2340      	movs	r3, #64	; 0x40
 80062f6:	6163      	str	r3, [r4, #20]
 80062f8:	2300      	movs	r3, #0
 80062fa:	9309      	str	r3, [sp, #36]	; 0x24
 80062fc:	2320      	movs	r3, #32
 80062fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006302:	2330      	movs	r3, #48	; 0x30
 8006304:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006308:	9503      	str	r5, [sp, #12]
 800630a:	f04f 0b01 	mov.w	fp, #1
 800630e:	4637      	mov	r7, r6
 8006310:	463d      	mov	r5, r7
 8006312:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006316:	b10b      	cbz	r3, 800631c <_svfiprintf_r+0x58>
 8006318:	2b25      	cmp	r3, #37	; 0x25
 800631a:	d13e      	bne.n	800639a <_svfiprintf_r+0xd6>
 800631c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006320:	d00b      	beq.n	800633a <_svfiprintf_r+0x76>
 8006322:	4653      	mov	r3, sl
 8006324:	4632      	mov	r2, r6
 8006326:	4621      	mov	r1, r4
 8006328:	4640      	mov	r0, r8
 800632a:	f7ff ff71 	bl	8006210 <__ssputs_r>
 800632e:	3001      	adds	r0, #1
 8006330:	f000 80a4 	beq.w	800647c <_svfiprintf_r+0x1b8>
 8006334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006336:	4453      	add	r3, sl
 8006338:	9309      	str	r3, [sp, #36]	; 0x24
 800633a:	783b      	ldrb	r3, [r7, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	f000 809d 	beq.w	800647c <_svfiprintf_r+0x1b8>
 8006342:	2300      	movs	r3, #0
 8006344:	f04f 32ff 	mov.w	r2, #4294967295
 8006348:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800634c:	9304      	str	r3, [sp, #16]
 800634e:	9307      	str	r3, [sp, #28]
 8006350:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006354:	931a      	str	r3, [sp, #104]	; 0x68
 8006356:	462f      	mov	r7, r5
 8006358:	2205      	movs	r2, #5
 800635a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800635e:	4850      	ldr	r0, [pc, #320]	; (80064a0 <_svfiprintf_r+0x1dc>)
 8006360:	f7f9 ff3e 	bl	80001e0 <memchr>
 8006364:	9b04      	ldr	r3, [sp, #16]
 8006366:	b9d0      	cbnz	r0, 800639e <_svfiprintf_r+0xda>
 8006368:	06d9      	lsls	r1, r3, #27
 800636a:	bf44      	itt	mi
 800636c:	2220      	movmi	r2, #32
 800636e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006372:	071a      	lsls	r2, r3, #28
 8006374:	bf44      	itt	mi
 8006376:	222b      	movmi	r2, #43	; 0x2b
 8006378:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800637c:	782a      	ldrb	r2, [r5, #0]
 800637e:	2a2a      	cmp	r2, #42	; 0x2a
 8006380:	d015      	beq.n	80063ae <_svfiprintf_r+0xea>
 8006382:	9a07      	ldr	r2, [sp, #28]
 8006384:	462f      	mov	r7, r5
 8006386:	2000      	movs	r0, #0
 8006388:	250a      	movs	r5, #10
 800638a:	4639      	mov	r1, r7
 800638c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006390:	3b30      	subs	r3, #48	; 0x30
 8006392:	2b09      	cmp	r3, #9
 8006394:	d94d      	bls.n	8006432 <_svfiprintf_r+0x16e>
 8006396:	b1b8      	cbz	r0, 80063c8 <_svfiprintf_r+0x104>
 8006398:	e00f      	b.n	80063ba <_svfiprintf_r+0xf6>
 800639a:	462f      	mov	r7, r5
 800639c:	e7b8      	b.n	8006310 <_svfiprintf_r+0x4c>
 800639e:	4a40      	ldr	r2, [pc, #256]	; (80064a0 <_svfiprintf_r+0x1dc>)
 80063a0:	1a80      	subs	r0, r0, r2
 80063a2:	fa0b f000 	lsl.w	r0, fp, r0
 80063a6:	4318      	orrs	r0, r3
 80063a8:	9004      	str	r0, [sp, #16]
 80063aa:	463d      	mov	r5, r7
 80063ac:	e7d3      	b.n	8006356 <_svfiprintf_r+0x92>
 80063ae:	9a03      	ldr	r2, [sp, #12]
 80063b0:	1d11      	adds	r1, r2, #4
 80063b2:	6812      	ldr	r2, [r2, #0]
 80063b4:	9103      	str	r1, [sp, #12]
 80063b6:	2a00      	cmp	r2, #0
 80063b8:	db01      	blt.n	80063be <_svfiprintf_r+0xfa>
 80063ba:	9207      	str	r2, [sp, #28]
 80063bc:	e004      	b.n	80063c8 <_svfiprintf_r+0x104>
 80063be:	4252      	negs	r2, r2
 80063c0:	f043 0302 	orr.w	r3, r3, #2
 80063c4:	9207      	str	r2, [sp, #28]
 80063c6:	9304      	str	r3, [sp, #16]
 80063c8:	783b      	ldrb	r3, [r7, #0]
 80063ca:	2b2e      	cmp	r3, #46	; 0x2e
 80063cc:	d10c      	bne.n	80063e8 <_svfiprintf_r+0x124>
 80063ce:	787b      	ldrb	r3, [r7, #1]
 80063d0:	2b2a      	cmp	r3, #42	; 0x2a
 80063d2:	d133      	bne.n	800643c <_svfiprintf_r+0x178>
 80063d4:	9b03      	ldr	r3, [sp, #12]
 80063d6:	1d1a      	adds	r2, r3, #4
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	9203      	str	r2, [sp, #12]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	bfb8      	it	lt
 80063e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80063e4:	3702      	adds	r7, #2
 80063e6:	9305      	str	r3, [sp, #20]
 80063e8:	4d2e      	ldr	r5, [pc, #184]	; (80064a4 <_svfiprintf_r+0x1e0>)
 80063ea:	7839      	ldrb	r1, [r7, #0]
 80063ec:	2203      	movs	r2, #3
 80063ee:	4628      	mov	r0, r5
 80063f0:	f7f9 fef6 	bl	80001e0 <memchr>
 80063f4:	b138      	cbz	r0, 8006406 <_svfiprintf_r+0x142>
 80063f6:	2340      	movs	r3, #64	; 0x40
 80063f8:	1b40      	subs	r0, r0, r5
 80063fa:	fa03 f000 	lsl.w	r0, r3, r0
 80063fe:	9b04      	ldr	r3, [sp, #16]
 8006400:	4303      	orrs	r3, r0
 8006402:	3701      	adds	r7, #1
 8006404:	9304      	str	r3, [sp, #16]
 8006406:	7839      	ldrb	r1, [r7, #0]
 8006408:	4827      	ldr	r0, [pc, #156]	; (80064a8 <_svfiprintf_r+0x1e4>)
 800640a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800640e:	2206      	movs	r2, #6
 8006410:	1c7e      	adds	r6, r7, #1
 8006412:	f7f9 fee5 	bl	80001e0 <memchr>
 8006416:	2800      	cmp	r0, #0
 8006418:	d038      	beq.n	800648c <_svfiprintf_r+0x1c8>
 800641a:	4b24      	ldr	r3, [pc, #144]	; (80064ac <_svfiprintf_r+0x1e8>)
 800641c:	bb13      	cbnz	r3, 8006464 <_svfiprintf_r+0x1a0>
 800641e:	9b03      	ldr	r3, [sp, #12]
 8006420:	3307      	adds	r3, #7
 8006422:	f023 0307 	bic.w	r3, r3, #7
 8006426:	3308      	adds	r3, #8
 8006428:	9303      	str	r3, [sp, #12]
 800642a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800642c:	444b      	add	r3, r9
 800642e:	9309      	str	r3, [sp, #36]	; 0x24
 8006430:	e76d      	b.n	800630e <_svfiprintf_r+0x4a>
 8006432:	fb05 3202 	mla	r2, r5, r2, r3
 8006436:	2001      	movs	r0, #1
 8006438:	460f      	mov	r7, r1
 800643a:	e7a6      	b.n	800638a <_svfiprintf_r+0xc6>
 800643c:	2300      	movs	r3, #0
 800643e:	3701      	adds	r7, #1
 8006440:	9305      	str	r3, [sp, #20]
 8006442:	4619      	mov	r1, r3
 8006444:	250a      	movs	r5, #10
 8006446:	4638      	mov	r0, r7
 8006448:	f810 2b01 	ldrb.w	r2, [r0], #1
 800644c:	3a30      	subs	r2, #48	; 0x30
 800644e:	2a09      	cmp	r2, #9
 8006450:	d903      	bls.n	800645a <_svfiprintf_r+0x196>
 8006452:	2b00      	cmp	r3, #0
 8006454:	d0c8      	beq.n	80063e8 <_svfiprintf_r+0x124>
 8006456:	9105      	str	r1, [sp, #20]
 8006458:	e7c6      	b.n	80063e8 <_svfiprintf_r+0x124>
 800645a:	fb05 2101 	mla	r1, r5, r1, r2
 800645e:	2301      	movs	r3, #1
 8006460:	4607      	mov	r7, r0
 8006462:	e7f0      	b.n	8006446 <_svfiprintf_r+0x182>
 8006464:	ab03      	add	r3, sp, #12
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	4622      	mov	r2, r4
 800646a:	4b11      	ldr	r3, [pc, #68]	; (80064b0 <_svfiprintf_r+0x1ec>)
 800646c:	a904      	add	r1, sp, #16
 800646e:	4640      	mov	r0, r8
 8006470:	f3af 8000 	nop.w
 8006474:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006478:	4681      	mov	r9, r0
 800647a:	d1d6      	bne.n	800642a <_svfiprintf_r+0x166>
 800647c:	89a3      	ldrh	r3, [r4, #12]
 800647e:	065b      	lsls	r3, r3, #25
 8006480:	f53f af35 	bmi.w	80062ee <_svfiprintf_r+0x2a>
 8006484:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006486:	b01d      	add	sp, #116	; 0x74
 8006488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800648c:	ab03      	add	r3, sp, #12
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	4622      	mov	r2, r4
 8006492:	4b07      	ldr	r3, [pc, #28]	; (80064b0 <_svfiprintf_r+0x1ec>)
 8006494:	a904      	add	r1, sp, #16
 8006496:	4640      	mov	r0, r8
 8006498:	f000 f882 	bl	80065a0 <_printf_i>
 800649c:	e7ea      	b.n	8006474 <_svfiprintf_r+0x1b0>
 800649e:	bf00      	nop
 80064a0:	08006a28 	.word	0x08006a28
 80064a4:	08006a2e 	.word	0x08006a2e
 80064a8:	08006a32 	.word	0x08006a32
 80064ac:	00000000 	.word	0x00000000
 80064b0:	08006211 	.word	0x08006211

080064b4 <_printf_common>:
 80064b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064b8:	4691      	mov	r9, r2
 80064ba:	461f      	mov	r7, r3
 80064bc:	688a      	ldr	r2, [r1, #8]
 80064be:	690b      	ldr	r3, [r1, #16]
 80064c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064c4:	4293      	cmp	r3, r2
 80064c6:	bfb8      	it	lt
 80064c8:	4613      	movlt	r3, r2
 80064ca:	f8c9 3000 	str.w	r3, [r9]
 80064ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064d2:	4606      	mov	r6, r0
 80064d4:	460c      	mov	r4, r1
 80064d6:	b112      	cbz	r2, 80064de <_printf_common+0x2a>
 80064d8:	3301      	adds	r3, #1
 80064da:	f8c9 3000 	str.w	r3, [r9]
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	0699      	lsls	r1, r3, #26
 80064e2:	bf42      	ittt	mi
 80064e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80064e8:	3302      	addmi	r3, #2
 80064ea:	f8c9 3000 	strmi.w	r3, [r9]
 80064ee:	6825      	ldr	r5, [r4, #0]
 80064f0:	f015 0506 	ands.w	r5, r5, #6
 80064f4:	d107      	bne.n	8006506 <_printf_common+0x52>
 80064f6:	f104 0a19 	add.w	sl, r4, #25
 80064fa:	68e3      	ldr	r3, [r4, #12]
 80064fc:	f8d9 2000 	ldr.w	r2, [r9]
 8006500:	1a9b      	subs	r3, r3, r2
 8006502:	42ab      	cmp	r3, r5
 8006504:	dc28      	bgt.n	8006558 <_printf_common+0xa4>
 8006506:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800650a:	6822      	ldr	r2, [r4, #0]
 800650c:	3300      	adds	r3, #0
 800650e:	bf18      	it	ne
 8006510:	2301      	movne	r3, #1
 8006512:	0692      	lsls	r2, r2, #26
 8006514:	d42d      	bmi.n	8006572 <_printf_common+0xbe>
 8006516:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800651a:	4639      	mov	r1, r7
 800651c:	4630      	mov	r0, r6
 800651e:	47c0      	blx	r8
 8006520:	3001      	adds	r0, #1
 8006522:	d020      	beq.n	8006566 <_printf_common+0xb2>
 8006524:	6823      	ldr	r3, [r4, #0]
 8006526:	68e5      	ldr	r5, [r4, #12]
 8006528:	f8d9 2000 	ldr.w	r2, [r9]
 800652c:	f003 0306 	and.w	r3, r3, #6
 8006530:	2b04      	cmp	r3, #4
 8006532:	bf08      	it	eq
 8006534:	1aad      	subeq	r5, r5, r2
 8006536:	68a3      	ldr	r3, [r4, #8]
 8006538:	6922      	ldr	r2, [r4, #16]
 800653a:	bf0c      	ite	eq
 800653c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006540:	2500      	movne	r5, #0
 8006542:	4293      	cmp	r3, r2
 8006544:	bfc4      	itt	gt
 8006546:	1a9b      	subgt	r3, r3, r2
 8006548:	18ed      	addgt	r5, r5, r3
 800654a:	f04f 0900 	mov.w	r9, #0
 800654e:	341a      	adds	r4, #26
 8006550:	454d      	cmp	r5, r9
 8006552:	d11a      	bne.n	800658a <_printf_common+0xd6>
 8006554:	2000      	movs	r0, #0
 8006556:	e008      	b.n	800656a <_printf_common+0xb6>
 8006558:	2301      	movs	r3, #1
 800655a:	4652      	mov	r2, sl
 800655c:	4639      	mov	r1, r7
 800655e:	4630      	mov	r0, r6
 8006560:	47c0      	blx	r8
 8006562:	3001      	adds	r0, #1
 8006564:	d103      	bne.n	800656e <_printf_common+0xba>
 8006566:	f04f 30ff 	mov.w	r0, #4294967295
 800656a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800656e:	3501      	adds	r5, #1
 8006570:	e7c3      	b.n	80064fa <_printf_common+0x46>
 8006572:	18e1      	adds	r1, r4, r3
 8006574:	1c5a      	adds	r2, r3, #1
 8006576:	2030      	movs	r0, #48	; 0x30
 8006578:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800657c:	4422      	add	r2, r4
 800657e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006582:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006586:	3302      	adds	r3, #2
 8006588:	e7c5      	b.n	8006516 <_printf_common+0x62>
 800658a:	2301      	movs	r3, #1
 800658c:	4622      	mov	r2, r4
 800658e:	4639      	mov	r1, r7
 8006590:	4630      	mov	r0, r6
 8006592:	47c0      	blx	r8
 8006594:	3001      	adds	r0, #1
 8006596:	d0e6      	beq.n	8006566 <_printf_common+0xb2>
 8006598:	f109 0901 	add.w	r9, r9, #1
 800659c:	e7d8      	b.n	8006550 <_printf_common+0x9c>
	...

080065a0 <_printf_i>:
 80065a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80065a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80065a8:	460c      	mov	r4, r1
 80065aa:	7e09      	ldrb	r1, [r1, #24]
 80065ac:	b085      	sub	sp, #20
 80065ae:	296e      	cmp	r1, #110	; 0x6e
 80065b0:	4617      	mov	r7, r2
 80065b2:	4606      	mov	r6, r0
 80065b4:	4698      	mov	r8, r3
 80065b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065b8:	f000 80b3 	beq.w	8006722 <_printf_i+0x182>
 80065bc:	d822      	bhi.n	8006604 <_printf_i+0x64>
 80065be:	2963      	cmp	r1, #99	; 0x63
 80065c0:	d036      	beq.n	8006630 <_printf_i+0x90>
 80065c2:	d80a      	bhi.n	80065da <_printf_i+0x3a>
 80065c4:	2900      	cmp	r1, #0
 80065c6:	f000 80b9 	beq.w	800673c <_printf_i+0x19c>
 80065ca:	2958      	cmp	r1, #88	; 0x58
 80065cc:	f000 8083 	beq.w	80066d6 <_printf_i+0x136>
 80065d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80065d8:	e032      	b.n	8006640 <_printf_i+0xa0>
 80065da:	2964      	cmp	r1, #100	; 0x64
 80065dc:	d001      	beq.n	80065e2 <_printf_i+0x42>
 80065de:	2969      	cmp	r1, #105	; 0x69
 80065e0:	d1f6      	bne.n	80065d0 <_printf_i+0x30>
 80065e2:	6820      	ldr	r0, [r4, #0]
 80065e4:	6813      	ldr	r3, [r2, #0]
 80065e6:	0605      	lsls	r5, r0, #24
 80065e8:	f103 0104 	add.w	r1, r3, #4
 80065ec:	d52a      	bpl.n	8006644 <_printf_i+0xa4>
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6011      	str	r1, [r2, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	da03      	bge.n	80065fe <_printf_i+0x5e>
 80065f6:	222d      	movs	r2, #45	; 0x2d
 80065f8:	425b      	negs	r3, r3
 80065fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80065fe:	486f      	ldr	r0, [pc, #444]	; (80067bc <_printf_i+0x21c>)
 8006600:	220a      	movs	r2, #10
 8006602:	e039      	b.n	8006678 <_printf_i+0xd8>
 8006604:	2973      	cmp	r1, #115	; 0x73
 8006606:	f000 809d 	beq.w	8006744 <_printf_i+0x1a4>
 800660a:	d808      	bhi.n	800661e <_printf_i+0x7e>
 800660c:	296f      	cmp	r1, #111	; 0x6f
 800660e:	d020      	beq.n	8006652 <_printf_i+0xb2>
 8006610:	2970      	cmp	r1, #112	; 0x70
 8006612:	d1dd      	bne.n	80065d0 <_printf_i+0x30>
 8006614:	6823      	ldr	r3, [r4, #0]
 8006616:	f043 0320 	orr.w	r3, r3, #32
 800661a:	6023      	str	r3, [r4, #0]
 800661c:	e003      	b.n	8006626 <_printf_i+0x86>
 800661e:	2975      	cmp	r1, #117	; 0x75
 8006620:	d017      	beq.n	8006652 <_printf_i+0xb2>
 8006622:	2978      	cmp	r1, #120	; 0x78
 8006624:	d1d4      	bne.n	80065d0 <_printf_i+0x30>
 8006626:	2378      	movs	r3, #120	; 0x78
 8006628:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800662c:	4864      	ldr	r0, [pc, #400]	; (80067c0 <_printf_i+0x220>)
 800662e:	e055      	b.n	80066dc <_printf_i+0x13c>
 8006630:	6813      	ldr	r3, [r2, #0]
 8006632:	1d19      	adds	r1, r3, #4
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	6011      	str	r1, [r2, #0]
 8006638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800663c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006640:	2301      	movs	r3, #1
 8006642:	e08c      	b.n	800675e <_printf_i+0x1be>
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	6011      	str	r1, [r2, #0]
 8006648:	f010 0f40 	tst.w	r0, #64	; 0x40
 800664c:	bf18      	it	ne
 800664e:	b21b      	sxthne	r3, r3
 8006650:	e7cf      	b.n	80065f2 <_printf_i+0x52>
 8006652:	6813      	ldr	r3, [r2, #0]
 8006654:	6825      	ldr	r5, [r4, #0]
 8006656:	1d18      	adds	r0, r3, #4
 8006658:	6010      	str	r0, [r2, #0]
 800665a:	0628      	lsls	r0, r5, #24
 800665c:	d501      	bpl.n	8006662 <_printf_i+0xc2>
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	e002      	b.n	8006668 <_printf_i+0xc8>
 8006662:	0668      	lsls	r0, r5, #25
 8006664:	d5fb      	bpl.n	800665e <_printf_i+0xbe>
 8006666:	881b      	ldrh	r3, [r3, #0]
 8006668:	4854      	ldr	r0, [pc, #336]	; (80067bc <_printf_i+0x21c>)
 800666a:	296f      	cmp	r1, #111	; 0x6f
 800666c:	bf14      	ite	ne
 800666e:	220a      	movne	r2, #10
 8006670:	2208      	moveq	r2, #8
 8006672:	2100      	movs	r1, #0
 8006674:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006678:	6865      	ldr	r5, [r4, #4]
 800667a:	60a5      	str	r5, [r4, #8]
 800667c:	2d00      	cmp	r5, #0
 800667e:	f2c0 8095 	blt.w	80067ac <_printf_i+0x20c>
 8006682:	6821      	ldr	r1, [r4, #0]
 8006684:	f021 0104 	bic.w	r1, r1, #4
 8006688:	6021      	str	r1, [r4, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d13d      	bne.n	800670a <_printf_i+0x16a>
 800668e:	2d00      	cmp	r5, #0
 8006690:	f040 808e 	bne.w	80067b0 <_printf_i+0x210>
 8006694:	4665      	mov	r5, ip
 8006696:	2a08      	cmp	r2, #8
 8006698:	d10b      	bne.n	80066b2 <_printf_i+0x112>
 800669a:	6823      	ldr	r3, [r4, #0]
 800669c:	07db      	lsls	r3, r3, #31
 800669e:	d508      	bpl.n	80066b2 <_printf_i+0x112>
 80066a0:	6923      	ldr	r3, [r4, #16]
 80066a2:	6862      	ldr	r2, [r4, #4]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	bfde      	ittt	le
 80066a8:	2330      	movle	r3, #48	; 0x30
 80066aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80066b2:	ebac 0305 	sub.w	r3, ip, r5
 80066b6:	6123      	str	r3, [r4, #16]
 80066b8:	f8cd 8000 	str.w	r8, [sp]
 80066bc:	463b      	mov	r3, r7
 80066be:	aa03      	add	r2, sp, #12
 80066c0:	4621      	mov	r1, r4
 80066c2:	4630      	mov	r0, r6
 80066c4:	f7ff fef6 	bl	80064b4 <_printf_common>
 80066c8:	3001      	adds	r0, #1
 80066ca:	d14d      	bne.n	8006768 <_printf_i+0x1c8>
 80066cc:	f04f 30ff 	mov.w	r0, #4294967295
 80066d0:	b005      	add	sp, #20
 80066d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066d6:	4839      	ldr	r0, [pc, #228]	; (80067bc <_printf_i+0x21c>)
 80066d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80066dc:	6813      	ldr	r3, [r2, #0]
 80066de:	6821      	ldr	r1, [r4, #0]
 80066e0:	1d1d      	adds	r5, r3, #4
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6015      	str	r5, [r2, #0]
 80066e6:	060a      	lsls	r2, r1, #24
 80066e8:	d50b      	bpl.n	8006702 <_printf_i+0x162>
 80066ea:	07ca      	lsls	r2, r1, #31
 80066ec:	bf44      	itt	mi
 80066ee:	f041 0120 	orrmi.w	r1, r1, #32
 80066f2:	6021      	strmi	r1, [r4, #0]
 80066f4:	b91b      	cbnz	r3, 80066fe <_printf_i+0x15e>
 80066f6:	6822      	ldr	r2, [r4, #0]
 80066f8:	f022 0220 	bic.w	r2, r2, #32
 80066fc:	6022      	str	r2, [r4, #0]
 80066fe:	2210      	movs	r2, #16
 8006700:	e7b7      	b.n	8006672 <_printf_i+0xd2>
 8006702:	064d      	lsls	r5, r1, #25
 8006704:	bf48      	it	mi
 8006706:	b29b      	uxthmi	r3, r3
 8006708:	e7ef      	b.n	80066ea <_printf_i+0x14a>
 800670a:	4665      	mov	r5, ip
 800670c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006710:	fb02 3311 	mls	r3, r2, r1, r3
 8006714:	5cc3      	ldrb	r3, [r0, r3]
 8006716:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800671a:	460b      	mov	r3, r1
 800671c:	2900      	cmp	r1, #0
 800671e:	d1f5      	bne.n	800670c <_printf_i+0x16c>
 8006720:	e7b9      	b.n	8006696 <_printf_i+0xf6>
 8006722:	6813      	ldr	r3, [r2, #0]
 8006724:	6825      	ldr	r5, [r4, #0]
 8006726:	6961      	ldr	r1, [r4, #20]
 8006728:	1d18      	adds	r0, r3, #4
 800672a:	6010      	str	r0, [r2, #0]
 800672c:	0628      	lsls	r0, r5, #24
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	d501      	bpl.n	8006736 <_printf_i+0x196>
 8006732:	6019      	str	r1, [r3, #0]
 8006734:	e002      	b.n	800673c <_printf_i+0x19c>
 8006736:	066a      	lsls	r2, r5, #25
 8006738:	d5fb      	bpl.n	8006732 <_printf_i+0x192>
 800673a:	8019      	strh	r1, [r3, #0]
 800673c:	2300      	movs	r3, #0
 800673e:	6123      	str	r3, [r4, #16]
 8006740:	4665      	mov	r5, ip
 8006742:	e7b9      	b.n	80066b8 <_printf_i+0x118>
 8006744:	6813      	ldr	r3, [r2, #0]
 8006746:	1d19      	adds	r1, r3, #4
 8006748:	6011      	str	r1, [r2, #0]
 800674a:	681d      	ldr	r5, [r3, #0]
 800674c:	6862      	ldr	r2, [r4, #4]
 800674e:	2100      	movs	r1, #0
 8006750:	4628      	mov	r0, r5
 8006752:	f7f9 fd45 	bl	80001e0 <memchr>
 8006756:	b108      	cbz	r0, 800675c <_printf_i+0x1bc>
 8006758:	1b40      	subs	r0, r0, r5
 800675a:	6060      	str	r0, [r4, #4]
 800675c:	6863      	ldr	r3, [r4, #4]
 800675e:	6123      	str	r3, [r4, #16]
 8006760:	2300      	movs	r3, #0
 8006762:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006766:	e7a7      	b.n	80066b8 <_printf_i+0x118>
 8006768:	6923      	ldr	r3, [r4, #16]
 800676a:	462a      	mov	r2, r5
 800676c:	4639      	mov	r1, r7
 800676e:	4630      	mov	r0, r6
 8006770:	47c0      	blx	r8
 8006772:	3001      	adds	r0, #1
 8006774:	d0aa      	beq.n	80066cc <_printf_i+0x12c>
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	079b      	lsls	r3, r3, #30
 800677a:	d413      	bmi.n	80067a4 <_printf_i+0x204>
 800677c:	68e0      	ldr	r0, [r4, #12]
 800677e:	9b03      	ldr	r3, [sp, #12]
 8006780:	4298      	cmp	r0, r3
 8006782:	bfb8      	it	lt
 8006784:	4618      	movlt	r0, r3
 8006786:	e7a3      	b.n	80066d0 <_printf_i+0x130>
 8006788:	2301      	movs	r3, #1
 800678a:	464a      	mov	r2, r9
 800678c:	4639      	mov	r1, r7
 800678e:	4630      	mov	r0, r6
 8006790:	47c0      	blx	r8
 8006792:	3001      	adds	r0, #1
 8006794:	d09a      	beq.n	80066cc <_printf_i+0x12c>
 8006796:	3501      	adds	r5, #1
 8006798:	68e3      	ldr	r3, [r4, #12]
 800679a:	9a03      	ldr	r2, [sp, #12]
 800679c:	1a9b      	subs	r3, r3, r2
 800679e:	42ab      	cmp	r3, r5
 80067a0:	dcf2      	bgt.n	8006788 <_printf_i+0x1e8>
 80067a2:	e7eb      	b.n	800677c <_printf_i+0x1dc>
 80067a4:	2500      	movs	r5, #0
 80067a6:	f104 0919 	add.w	r9, r4, #25
 80067aa:	e7f5      	b.n	8006798 <_printf_i+0x1f8>
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1ac      	bne.n	800670a <_printf_i+0x16a>
 80067b0:	7803      	ldrb	r3, [r0, #0]
 80067b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067ba:	e76c      	b.n	8006696 <_printf_i+0xf6>
 80067bc:	08006a39 	.word	0x08006a39
 80067c0:	08006a4a 	.word	0x08006a4a

080067c4 <memcpy>:
 80067c4:	b510      	push	{r4, lr}
 80067c6:	1e43      	subs	r3, r0, #1
 80067c8:	440a      	add	r2, r1
 80067ca:	4291      	cmp	r1, r2
 80067cc:	d100      	bne.n	80067d0 <memcpy+0xc>
 80067ce:	bd10      	pop	{r4, pc}
 80067d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067d8:	e7f7      	b.n	80067ca <memcpy+0x6>

080067da <memmove>:
 80067da:	4288      	cmp	r0, r1
 80067dc:	b510      	push	{r4, lr}
 80067de:	eb01 0302 	add.w	r3, r1, r2
 80067e2:	d807      	bhi.n	80067f4 <memmove+0x1a>
 80067e4:	1e42      	subs	r2, r0, #1
 80067e6:	4299      	cmp	r1, r3
 80067e8:	d00a      	beq.n	8006800 <memmove+0x26>
 80067ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067ee:	f802 4f01 	strb.w	r4, [r2, #1]!
 80067f2:	e7f8      	b.n	80067e6 <memmove+0xc>
 80067f4:	4283      	cmp	r3, r0
 80067f6:	d9f5      	bls.n	80067e4 <memmove+0xa>
 80067f8:	1881      	adds	r1, r0, r2
 80067fa:	1ad2      	subs	r2, r2, r3
 80067fc:	42d3      	cmn	r3, r2
 80067fe:	d100      	bne.n	8006802 <memmove+0x28>
 8006800:	bd10      	pop	{r4, pc}
 8006802:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006806:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800680a:	e7f7      	b.n	80067fc <memmove+0x22>

0800680c <_free_r>:
 800680c:	b538      	push	{r3, r4, r5, lr}
 800680e:	4605      	mov	r5, r0
 8006810:	2900      	cmp	r1, #0
 8006812:	d045      	beq.n	80068a0 <_free_r+0x94>
 8006814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006818:	1f0c      	subs	r4, r1, #4
 800681a:	2b00      	cmp	r3, #0
 800681c:	bfb8      	it	lt
 800681e:	18e4      	addlt	r4, r4, r3
 8006820:	f000 f8d2 	bl	80069c8 <__malloc_lock>
 8006824:	4a1f      	ldr	r2, [pc, #124]	; (80068a4 <_free_r+0x98>)
 8006826:	6813      	ldr	r3, [r2, #0]
 8006828:	4610      	mov	r0, r2
 800682a:	b933      	cbnz	r3, 800683a <_free_r+0x2e>
 800682c:	6063      	str	r3, [r4, #4]
 800682e:	6014      	str	r4, [r2, #0]
 8006830:	4628      	mov	r0, r5
 8006832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006836:	f000 b8c8 	b.w	80069ca <__malloc_unlock>
 800683a:	42a3      	cmp	r3, r4
 800683c:	d90c      	bls.n	8006858 <_free_r+0x4c>
 800683e:	6821      	ldr	r1, [r4, #0]
 8006840:	1862      	adds	r2, r4, r1
 8006842:	4293      	cmp	r3, r2
 8006844:	bf04      	itt	eq
 8006846:	681a      	ldreq	r2, [r3, #0]
 8006848:	685b      	ldreq	r3, [r3, #4]
 800684a:	6063      	str	r3, [r4, #4]
 800684c:	bf04      	itt	eq
 800684e:	1852      	addeq	r2, r2, r1
 8006850:	6022      	streq	r2, [r4, #0]
 8006852:	6004      	str	r4, [r0, #0]
 8006854:	e7ec      	b.n	8006830 <_free_r+0x24>
 8006856:	4613      	mov	r3, r2
 8006858:	685a      	ldr	r2, [r3, #4]
 800685a:	b10a      	cbz	r2, 8006860 <_free_r+0x54>
 800685c:	42a2      	cmp	r2, r4
 800685e:	d9fa      	bls.n	8006856 <_free_r+0x4a>
 8006860:	6819      	ldr	r1, [r3, #0]
 8006862:	1858      	adds	r0, r3, r1
 8006864:	42a0      	cmp	r0, r4
 8006866:	d10b      	bne.n	8006880 <_free_r+0x74>
 8006868:	6820      	ldr	r0, [r4, #0]
 800686a:	4401      	add	r1, r0
 800686c:	1858      	adds	r0, r3, r1
 800686e:	4282      	cmp	r2, r0
 8006870:	6019      	str	r1, [r3, #0]
 8006872:	d1dd      	bne.n	8006830 <_free_r+0x24>
 8006874:	6810      	ldr	r0, [r2, #0]
 8006876:	6852      	ldr	r2, [r2, #4]
 8006878:	605a      	str	r2, [r3, #4]
 800687a:	4401      	add	r1, r0
 800687c:	6019      	str	r1, [r3, #0]
 800687e:	e7d7      	b.n	8006830 <_free_r+0x24>
 8006880:	d902      	bls.n	8006888 <_free_r+0x7c>
 8006882:	230c      	movs	r3, #12
 8006884:	602b      	str	r3, [r5, #0]
 8006886:	e7d3      	b.n	8006830 <_free_r+0x24>
 8006888:	6820      	ldr	r0, [r4, #0]
 800688a:	1821      	adds	r1, r4, r0
 800688c:	428a      	cmp	r2, r1
 800688e:	bf04      	itt	eq
 8006890:	6811      	ldreq	r1, [r2, #0]
 8006892:	6852      	ldreq	r2, [r2, #4]
 8006894:	6062      	str	r2, [r4, #4]
 8006896:	bf04      	itt	eq
 8006898:	1809      	addeq	r1, r1, r0
 800689a:	6021      	streq	r1, [r4, #0]
 800689c:	605c      	str	r4, [r3, #4]
 800689e:	e7c7      	b.n	8006830 <_free_r+0x24>
 80068a0:	bd38      	pop	{r3, r4, r5, pc}
 80068a2:	bf00      	nop
 80068a4:	2000033c 	.word	0x2000033c

080068a8 <_malloc_r>:
 80068a8:	b570      	push	{r4, r5, r6, lr}
 80068aa:	1ccd      	adds	r5, r1, #3
 80068ac:	f025 0503 	bic.w	r5, r5, #3
 80068b0:	3508      	adds	r5, #8
 80068b2:	2d0c      	cmp	r5, #12
 80068b4:	bf38      	it	cc
 80068b6:	250c      	movcc	r5, #12
 80068b8:	2d00      	cmp	r5, #0
 80068ba:	4606      	mov	r6, r0
 80068bc:	db01      	blt.n	80068c2 <_malloc_r+0x1a>
 80068be:	42a9      	cmp	r1, r5
 80068c0:	d903      	bls.n	80068ca <_malloc_r+0x22>
 80068c2:	230c      	movs	r3, #12
 80068c4:	6033      	str	r3, [r6, #0]
 80068c6:	2000      	movs	r0, #0
 80068c8:	bd70      	pop	{r4, r5, r6, pc}
 80068ca:	f000 f87d 	bl	80069c8 <__malloc_lock>
 80068ce:	4a21      	ldr	r2, [pc, #132]	; (8006954 <_malloc_r+0xac>)
 80068d0:	6814      	ldr	r4, [r2, #0]
 80068d2:	4621      	mov	r1, r4
 80068d4:	b991      	cbnz	r1, 80068fc <_malloc_r+0x54>
 80068d6:	4c20      	ldr	r4, [pc, #128]	; (8006958 <_malloc_r+0xb0>)
 80068d8:	6823      	ldr	r3, [r4, #0]
 80068da:	b91b      	cbnz	r3, 80068e4 <_malloc_r+0x3c>
 80068dc:	4630      	mov	r0, r6
 80068de:	f000 f863 	bl	80069a8 <_sbrk_r>
 80068e2:	6020      	str	r0, [r4, #0]
 80068e4:	4629      	mov	r1, r5
 80068e6:	4630      	mov	r0, r6
 80068e8:	f000 f85e 	bl	80069a8 <_sbrk_r>
 80068ec:	1c43      	adds	r3, r0, #1
 80068ee:	d124      	bne.n	800693a <_malloc_r+0x92>
 80068f0:	230c      	movs	r3, #12
 80068f2:	6033      	str	r3, [r6, #0]
 80068f4:	4630      	mov	r0, r6
 80068f6:	f000 f868 	bl	80069ca <__malloc_unlock>
 80068fa:	e7e4      	b.n	80068c6 <_malloc_r+0x1e>
 80068fc:	680b      	ldr	r3, [r1, #0]
 80068fe:	1b5b      	subs	r3, r3, r5
 8006900:	d418      	bmi.n	8006934 <_malloc_r+0x8c>
 8006902:	2b0b      	cmp	r3, #11
 8006904:	d90f      	bls.n	8006926 <_malloc_r+0x7e>
 8006906:	600b      	str	r3, [r1, #0]
 8006908:	50cd      	str	r5, [r1, r3]
 800690a:	18cc      	adds	r4, r1, r3
 800690c:	4630      	mov	r0, r6
 800690e:	f000 f85c 	bl	80069ca <__malloc_unlock>
 8006912:	f104 000b 	add.w	r0, r4, #11
 8006916:	1d23      	adds	r3, r4, #4
 8006918:	f020 0007 	bic.w	r0, r0, #7
 800691c:	1ac3      	subs	r3, r0, r3
 800691e:	d0d3      	beq.n	80068c8 <_malloc_r+0x20>
 8006920:	425a      	negs	r2, r3
 8006922:	50e2      	str	r2, [r4, r3]
 8006924:	e7d0      	b.n	80068c8 <_malloc_r+0x20>
 8006926:	428c      	cmp	r4, r1
 8006928:	684b      	ldr	r3, [r1, #4]
 800692a:	bf16      	itet	ne
 800692c:	6063      	strne	r3, [r4, #4]
 800692e:	6013      	streq	r3, [r2, #0]
 8006930:	460c      	movne	r4, r1
 8006932:	e7eb      	b.n	800690c <_malloc_r+0x64>
 8006934:	460c      	mov	r4, r1
 8006936:	6849      	ldr	r1, [r1, #4]
 8006938:	e7cc      	b.n	80068d4 <_malloc_r+0x2c>
 800693a:	1cc4      	adds	r4, r0, #3
 800693c:	f024 0403 	bic.w	r4, r4, #3
 8006940:	42a0      	cmp	r0, r4
 8006942:	d005      	beq.n	8006950 <_malloc_r+0xa8>
 8006944:	1a21      	subs	r1, r4, r0
 8006946:	4630      	mov	r0, r6
 8006948:	f000 f82e 	bl	80069a8 <_sbrk_r>
 800694c:	3001      	adds	r0, #1
 800694e:	d0cf      	beq.n	80068f0 <_malloc_r+0x48>
 8006950:	6025      	str	r5, [r4, #0]
 8006952:	e7db      	b.n	800690c <_malloc_r+0x64>
 8006954:	2000033c 	.word	0x2000033c
 8006958:	20000340 	.word	0x20000340

0800695c <_realloc_r>:
 800695c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800695e:	4607      	mov	r7, r0
 8006960:	4614      	mov	r4, r2
 8006962:	460e      	mov	r6, r1
 8006964:	b921      	cbnz	r1, 8006970 <_realloc_r+0x14>
 8006966:	4611      	mov	r1, r2
 8006968:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800696c:	f7ff bf9c 	b.w	80068a8 <_malloc_r>
 8006970:	b922      	cbnz	r2, 800697c <_realloc_r+0x20>
 8006972:	f7ff ff4b 	bl	800680c <_free_r>
 8006976:	4625      	mov	r5, r4
 8006978:	4628      	mov	r0, r5
 800697a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800697c:	f000 f826 	bl	80069cc <_malloc_usable_size_r>
 8006980:	42a0      	cmp	r0, r4
 8006982:	d20f      	bcs.n	80069a4 <_realloc_r+0x48>
 8006984:	4621      	mov	r1, r4
 8006986:	4638      	mov	r0, r7
 8006988:	f7ff ff8e 	bl	80068a8 <_malloc_r>
 800698c:	4605      	mov	r5, r0
 800698e:	2800      	cmp	r0, #0
 8006990:	d0f2      	beq.n	8006978 <_realloc_r+0x1c>
 8006992:	4631      	mov	r1, r6
 8006994:	4622      	mov	r2, r4
 8006996:	f7ff ff15 	bl	80067c4 <memcpy>
 800699a:	4631      	mov	r1, r6
 800699c:	4638      	mov	r0, r7
 800699e:	f7ff ff35 	bl	800680c <_free_r>
 80069a2:	e7e9      	b.n	8006978 <_realloc_r+0x1c>
 80069a4:	4635      	mov	r5, r6
 80069a6:	e7e7      	b.n	8006978 <_realloc_r+0x1c>

080069a8 <_sbrk_r>:
 80069a8:	b538      	push	{r3, r4, r5, lr}
 80069aa:	4c06      	ldr	r4, [pc, #24]	; (80069c4 <_sbrk_r+0x1c>)
 80069ac:	2300      	movs	r3, #0
 80069ae:	4605      	mov	r5, r0
 80069b0:	4608      	mov	r0, r1
 80069b2:	6023      	str	r3, [r4, #0]
 80069b4:	f7fa fdf0 	bl	8001598 <_sbrk>
 80069b8:	1c43      	adds	r3, r0, #1
 80069ba:	d102      	bne.n	80069c2 <_sbrk_r+0x1a>
 80069bc:	6823      	ldr	r3, [r4, #0]
 80069be:	b103      	cbz	r3, 80069c2 <_sbrk_r+0x1a>
 80069c0:	602b      	str	r3, [r5, #0]
 80069c2:	bd38      	pop	{r3, r4, r5, pc}
 80069c4:	20000530 	.word	0x20000530

080069c8 <__malloc_lock>:
 80069c8:	4770      	bx	lr

080069ca <__malloc_unlock>:
 80069ca:	4770      	bx	lr

080069cc <_malloc_usable_size_r>:
 80069cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069d0:	1f18      	subs	r0, r3, #4
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	bfbc      	itt	lt
 80069d6:	580b      	ldrlt	r3, [r1, r0]
 80069d8:	18c0      	addlt	r0, r0, r3
 80069da:	4770      	bx	lr

080069dc <_init>:
 80069dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069de:	bf00      	nop
 80069e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069e2:	bc08      	pop	{r3}
 80069e4:	469e      	mov	lr, r3
 80069e6:	4770      	bx	lr

080069e8 <_fini>:
 80069e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ea:	bf00      	nop
 80069ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ee:	bc08      	pop	{r3}
 80069f0:	469e      	mov	lr, r3
 80069f2:	4770      	bx	lr
